
study_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00007756  000077ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  0080018a  0080018a  00007914  2**0
                  ALLOC
  3 .stab         00006e40  00000000  00000000  00007914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002271  00000000  00000000  0000e754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022c  00000000  00000000  00010ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000290a  00000000  00000000  00010dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000162b  00000000  00000000  000136db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000137e  00000000  00000000  00014d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00016084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000303  00000000  00000000  00016284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a46  00000000  00000000  00016587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_1>
       8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__vector_2>
       c:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__vector_3>
      10:	0c 94 05 31 	jmp	0x620a	; 0x620a <__vector_4>
      14:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__vector_5>
      18:	0c 94 9f 30 	jmp	0x613e	; 0x613e <__vector_6>
      1c:	0c 94 6c 30 	jmp	0x60d8	; 0x60d8 <__vector_7>
      20:	0c 94 39 30 	jmp	0x6072	; 0x6072 <__vector_8>
      24:	0c 94 06 30 	jmp	0x600c	; 0x600c <__vector_9>
      28:	0c 94 d3 2f 	jmp	0x5fa6	; 0x5fa6 <__vector_10>
      2c:	0c 94 a0 2f 	jmp	0x5f40	; 0x5f40 <__vector_11>
      30:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <__vector_12>
      34:	0c 94 1d 33 	jmp	0x663a	; 0x663a <__vector_13>
      38:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__vector_14>
      3c:	0c 94 8b 33 	jmp	0x6716	; 0x6716 <__vector_15>
      40:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f7 e7       	ldi	r31, 0x77	; 119
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <main>
      8a:	0c 94 a9 3b 	jmp	0x7752	; 0x7752 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 72 3b 	jmp	0x76e4	; 0x76e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 72 3b 	jmp	0x76e4	; 0x76e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7a 3b 	jmp	0x76f4	; 0x76f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 96 3b 	jmp	0x772c	; 0x772c <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 7e 3b 	jmp	0x76fc	; 0x76fc <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 03 07 	call	0xe06	; 0xe06 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 7b 3b 	jmp	0x76f6	; 0x76f6 <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 67 05 	call	0xace	; 0xace <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 97 3b 	jmp	0x772e	; 0x772e <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 82 3b 	jmp	0x7704	; 0x7704 <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 8b 06 	call	0xd16	; 0xd16 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 9e 3b 	jmp	0x773c	; 0x773c <__epilogue_restores__+0x20>

00000ace <__clzsi2>:
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	7b 01       	movw	r14, r22
     ad8:	8c 01       	movw	r16, r24
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	e8 16       	cp	r14, r24
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	f8 06       	cpc	r15, r24
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	08 07       	cpc	r16, r24
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	18 07       	cpc	r17, r24
     aea:	88 f4       	brcc	.+34     	; 0xb0e <__clzsi2+0x40>
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	e8 16       	cp	r14, r24
     af0:	f1 04       	cpc	r15, r1
     af2:	01 05       	cpc	r16, r1
     af4:	11 05       	cpc	r17, r1
     af6:	31 f0       	breq	.+12     	; 0xb04 <__clzsi2+0x36>
     af8:	28 f0       	brcs	.+10     	; 0xb04 <__clzsi2+0x36>
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <__clzsi2+0x64>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <__clzsi2+0x64>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	e8 16       	cp	r14, r24
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	f8 06       	cpc	r15, r24
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	08 07       	cpc	r16, r24
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	18 07       	cpc	r17, r24
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <__clzsi2+0x5c>
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__clzsi2+0x64>
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	20 e2       	ldi	r18, 0x20	; 32
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	28 1b       	sub	r18, r24
     b3c:	39 0b       	sbc	r19, r25
     b3e:	4a 0b       	sbc	r20, r26
     b40:	5b 0b       	sbc	r21, r27
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__clzsi2+0x7e>
     b44:	16 95       	lsr	r17
     b46:	07 95       	ror	r16
     b48:	f7 94       	ror	r15
     b4a:	e7 94       	ror	r14
     b4c:	8a 95       	dec	r24
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <__clzsi2+0x76>
     b50:	f7 01       	movw	r30, r14
     b52:	ec 58       	subi	r30, 0x8C	; 140
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	28 1b       	sub	r18, r24
     b5a:	31 09       	sbc	r19, r1
     b5c:	41 09       	sbc	r20, r1
     b5e:	51 09       	sbc	r21, r1
     b60:	c9 01       	movw	r24, r18
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <__pack_f>:
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	fc 01       	movw	r30, r24
     b78:	e4 80       	ldd	r14, Z+4	; 0x04
     b7a:	f5 80       	ldd	r15, Z+5	; 0x05
     b7c:	06 81       	ldd	r16, Z+6	; 0x06
     b7e:	17 81       	ldd	r17, Z+7	; 0x07
     b80:	d1 80       	ldd	r13, Z+1	; 0x01
     b82:	80 81       	ld	r24, Z
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	48 f4       	brcc	.+18     	; 0xb9a <__pack_f+0x2e>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e1       	ldi	r26, 0x10	; 16
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e8 2a       	or	r14, r24
     b92:	f9 2a       	or	r15, r25
     b94:	0a 2b       	or	r16, r26
     b96:	1b 2b       	or	r17, r27
     b98:	a5 c0       	rjmp	.+330    	; 0xce4 <__pack_f+0x178>
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	09 f4       	brne	.+2      	; 0xba0 <__pack_f+0x34>
     b9e:	9f c0       	rjmp	.+318    	; 0xcde <__pack_f+0x172>
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	21 f4       	brne	.+8      	; 0xbac <__pack_f+0x40>
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__pack_f+0x4a>
     bac:	e1 14       	cp	r14, r1
     bae:	f1 04       	cpc	r15, r1
     bb0:	01 05       	cpc	r16, r1
     bb2:	11 05       	cpc	r17, r1
     bb4:	19 f4       	brne	.+6      	; 0xbbc <__pack_f+0x50>
     bb6:	e0 e0       	ldi	r30, 0x00	; 0
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	96 c0       	rjmp	.+300    	; 0xce8 <__pack_f+0x17c>
     bbc:	62 81       	ldd	r22, Z+2	; 0x02
     bbe:	73 81       	ldd	r23, Z+3	; 0x03
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
     bc2:	62 38       	cpi	r22, 0x82	; 130
     bc4:	79 07       	cpc	r23, r25
     bc6:	0c f0       	brlt	.+2      	; 0xbca <__pack_f+0x5e>
     bc8:	5b c0       	rjmp	.+182    	; 0xc80 <__pack_f+0x114>
     bca:	22 e8       	ldi	r18, 0x82	; 130
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	26 1b       	sub	r18, r22
     bd0:	37 0b       	sbc	r19, r23
     bd2:	2a 31       	cpi	r18, 0x1A	; 26
     bd4:	31 05       	cpc	r19, r1
     bd6:	2c f0       	brlt	.+10     	; 0xbe2 <__pack_f+0x76>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	2a c0       	rjmp	.+84     	; 0xc36 <__pack_f+0xca>
     be2:	b8 01       	movw	r22, r16
     be4:	a7 01       	movw	r20, r14
     be6:	02 2e       	mov	r0, r18
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x86>
     bea:	76 95       	lsr	r23
     bec:	67 95       	ror	r22
     bee:	57 95       	ror	r21
     bf0:	47 95       	ror	r20
     bf2:	0a 94       	dec	r0
     bf4:	d2 f7       	brpl	.-12     	; 0xbea <__pack_f+0x7e>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__pack_f+0x9c>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	2a 95       	dec	r18
     c0a:	d2 f7       	brpl	.-12     	; 0xc00 <__pack_f+0x94>
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	8e 21       	and	r24, r14
     c14:	9f 21       	and	r25, r15
     c16:	a0 23       	and	r26, r16
     c18:	b1 23       	and	r27, r17
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	21 f0       	breq	.+8      	; 0xc2a <__pack_f+0xbe>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	9a 01       	movw	r18, r20
     c2c:	ab 01       	movw	r20, r22
     c2e:	28 2b       	or	r18, r24
     c30:	39 2b       	or	r19, r25
     c32:	4a 2b       	or	r20, r26
     c34:	5b 2b       	or	r21, r27
     c36:	da 01       	movw	r26, r20
     c38:	c9 01       	movw	r24, r18
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	90 70       	andi	r25, 0x00	; 0
     c3e:	a0 70       	andi	r26, 0x00	; 0
     c40:	b0 70       	andi	r27, 0x00	; 0
     c42:	80 34       	cpi	r24, 0x40	; 64
     c44:	91 05       	cpc	r25, r1
     c46:	a1 05       	cpc	r26, r1
     c48:	b1 05       	cpc	r27, r1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <__pack_f+0xee>
     c4c:	27 ff       	sbrs	r18, 7
     c4e:	09 c0       	rjmp	.+18     	; 0xc62 <__pack_f+0xf6>
     c50:	20 5c       	subi	r18, 0xC0	; 192
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	4f 4f       	sbci	r20, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0xf6>
     c5a:	21 5c       	subi	r18, 0xC1	; 193
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	4f 4f       	sbci	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	e0 e0       	ldi	r30, 0x00	; 0
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	20 30       	cpi	r18, 0x00	; 0
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	3a 07       	cpc	r19, r26
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	4a 07       	cpc	r20, r26
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	5a 07       	cpc	r21, r26
     c74:	10 f0       	brcs	.+4      	; 0xc7a <__pack_f+0x10e>
     c76:	e1 e0       	ldi	r30, 0x01	; 1
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	79 01       	movw	r14, r18
     c7c:	8a 01       	movw	r16, r20
     c7e:	27 c0       	rjmp	.+78     	; 0xcce <__pack_f+0x162>
     c80:	60 38       	cpi	r22, 0x80	; 128
     c82:	71 05       	cpc	r23, r1
     c84:	64 f5       	brge	.+88     	; 0xcde <__pack_f+0x172>
     c86:	fb 01       	movw	r30, r22
     c88:	e1 58       	subi	r30, 0x81	; 129
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	d8 01       	movw	r26, r16
     c8e:	c7 01       	movw	r24, r14
     c90:	8f 77       	andi	r24, 0x7F	; 127
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	a0 70       	andi	r26, 0x00	; 0
     c96:	b0 70       	andi	r27, 0x00	; 0
     c98:	80 34       	cpi	r24, 0x40	; 64
     c9a:	91 05       	cpc	r25, r1
     c9c:	a1 05       	cpc	r26, r1
     c9e:	b1 05       	cpc	r27, r1
     ca0:	39 f4       	brne	.+14     	; 0xcb0 <__pack_f+0x144>
     ca2:	e7 fe       	sbrs	r14, 7
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__pack_f+0x154>
     ca6:	80 e4       	ldi	r24, 0x40	; 64
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__pack_f+0x14c>
     cb0:	8f e3       	ldi	r24, 0x3F	; 63
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e8 0e       	add	r14, r24
     cba:	f9 1e       	adc	r15, r25
     cbc:	0a 1f       	adc	r16, r26
     cbe:	1b 1f       	adc	r17, r27
     cc0:	17 ff       	sbrs	r17, 7
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <__pack_f+0x162>
     cc4:	16 95       	lsr	r17
     cc6:	07 95       	ror	r16
     cc8:	f7 94       	ror	r15
     cca:	e7 94       	ror	r14
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	16 95       	lsr	r17
     cd2:	07 95       	ror	r16
     cd4:	f7 94       	ror	r15
     cd6:	e7 94       	ror	r14
     cd8:	8a 95       	dec	r24
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__pack_f+0x164>
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <__pack_f+0x17c>
     cde:	ee 24       	eor	r14, r14
     ce0:	ff 24       	eor	r15, r15
     ce2:	87 01       	movw	r16, r14
     ce4:	ef ef       	ldi	r30, 0xFF	; 255
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	6e 2f       	mov	r22, r30
     cea:	67 95       	ror	r22
     cec:	66 27       	eor	r22, r22
     cee:	67 95       	ror	r22
     cf0:	90 2f       	mov	r25, r16
     cf2:	9f 77       	andi	r25, 0x7F	; 127
     cf4:	d7 94       	ror	r13
     cf6:	dd 24       	eor	r13, r13
     cf8:	d7 94       	ror	r13
     cfa:	8e 2f       	mov	r24, r30
     cfc:	86 95       	lsr	r24
     cfe:	49 2f       	mov	r20, r25
     d00:	46 2b       	or	r20, r22
     d02:	58 2f       	mov	r21, r24
     d04:	5d 29       	or	r21, r13
     d06:	b7 01       	movw	r22, r14
     d08:	ca 01       	movw	r24, r20
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	08 95       	ret

00000d16 <__unpack_f>:
     d16:	fc 01       	movw	r30, r24
     d18:	db 01       	movw	r26, r22
     d1a:	40 81       	ld	r20, Z
     d1c:	51 81       	ldd	r21, Z+1	; 0x01
     d1e:	22 81       	ldd	r18, Z+2	; 0x02
     d20:	62 2f       	mov	r22, r18
     d22:	6f 77       	andi	r22, 0x7F	; 127
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	22 1f       	adc	r18, r18
     d28:	22 27       	eor	r18, r18
     d2a:	22 1f       	adc	r18, r18
     d2c:	93 81       	ldd	r25, Z+3	; 0x03
     d2e:	89 2f       	mov	r24, r25
     d30:	88 0f       	add	r24, r24
     d32:	82 2b       	or	r24, r18
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	99 1f       	adc	r25, r25
     d3a:	99 27       	eor	r25, r25
     d3c:	99 1f       	adc	r25, r25
     d3e:	11 96       	adiw	r26, 0x01	; 1
     d40:	9c 93       	st	X, r25
     d42:	11 97       	sbiw	r26, 0x01	; 1
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	a9 f5       	brne	.+106    	; 0xdb4 <__unpack_f+0x9e>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	11 f4       	brne	.+4      	; 0xd58 <__unpack_f+0x42>
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	37 c0       	rjmp	.+110    	; 0xdc6 <__unpack_f+0xb0>
     d58:	82 e8       	ldi	r24, 0x82	; 130
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	13 96       	adiw	r26, 0x03	; 3
     d5e:	9c 93       	st	X, r25
     d60:	8e 93       	st	-X, r24
     d62:	12 97       	sbiw	r26, 0x02	; 2
     d64:	9a 01       	movw	r18, r20
     d66:	ab 01       	movw	r20, r22
     d68:	67 e0       	ldi	r22, 0x07	; 7
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	44 1f       	adc	r20, r20
     d70:	55 1f       	adc	r21, r21
     d72:	6a 95       	dec	r22
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__unpack_f+0x54>
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	8c 93       	st	X, r24
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <__unpack_f+0x80>
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	44 1f       	adc	r20, r20
     d82:	55 1f       	adc	r21, r21
     d84:	12 96       	adiw	r26, 0x02	; 2
     d86:	8d 91       	ld	r24, X+
     d88:	9c 91       	ld	r25, X
     d8a:	13 97       	sbiw	r26, 0x03	; 3
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	20 30       	cpi	r18, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	38 07       	cpc	r19, r24
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	48 07       	cpc	r20, r24
     da0:	80 e4       	ldi	r24, 0x40	; 64
     da2:	58 07       	cpc	r21, r24
     da4:	58 f3       	brcs	.-42     	; 0xd7c <__unpack_f+0x66>
     da6:	14 96       	adiw	r26, 0x04	; 4
     da8:	2d 93       	st	X+, r18
     daa:	3d 93       	st	X+, r19
     dac:	4d 93       	st	X+, r20
     dae:	5c 93       	st	X, r21
     db0:	17 97       	sbiw	r26, 0x07	; 7
     db2:	08 95       	ret
     db4:	2f 3f       	cpi	r18, 0xFF	; 255
     db6:	31 05       	cpc	r19, r1
     db8:	79 f4       	brne	.+30     	; 0xdd8 <__unpack_f+0xc2>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <__unpack_f+0xb4>
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	8c 93       	st	X, r24
     dc8:	08 95       	ret
     dca:	64 ff       	sbrs	r22, 4
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <__unpack_f+0xbe>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
     dd2:	12 c0       	rjmp	.+36     	; 0xdf8 <__unpack_f+0xe2>
     dd4:	1c 92       	st	X, r1
     dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <__unpack_f+0xe2>
     dd8:	2f 57       	subi	r18, 0x7F	; 127
     dda:	30 40       	sbci	r19, 0x00	; 0
     ddc:	13 96       	adiw	r26, 0x03	; 3
     dde:	3c 93       	st	X, r19
     de0:	2e 93       	st	-X, r18
     de2:	12 97       	sbiw	r26, 0x02	; 2
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	8c 93       	st	X, r24
     de8:	87 e0       	ldi	r24, 0x07	; 7
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	66 1f       	adc	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	8a 95       	dec	r24
     df4:	d1 f7       	brne	.-12     	; 0xdea <__unpack_f+0xd4>
     df6:	70 64       	ori	r23, 0x40	; 64
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	4d 93       	st	X+, r20
     dfc:	5d 93       	st	X+, r21
     dfe:	6d 93       	st	X+, r22
     e00:	7c 93       	st	X, r23
     e02:	17 97       	sbiw	r26, 0x07	; 7
     e04:	08 95       	ret

00000e06 <__fpcmp_parts_f>:
     e06:	1f 93       	push	r17
     e08:	dc 01       	movw	r26, r24
     e0a:	fb 01       	movw	r30, r22
     e0c:	9c 91       	ld	r25, X
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	08 f4       	brcc	.+2      	; 0xe14 <__fpcmp_parts_f+0xe>
     e12:	47 c0       	rjmp	.+142    	; 0xea2 <__fpcmp_parts_f+0x9c>
     e14:	80 81       	ld	r24, Z
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	08 f4       	brcc	.+2      	; 0xe1c <__fpcmp_parts_f+0x16>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <__fpcmp_parts_f+0x9c>
     e1c:	94 30       	cpi	r25, 0x04	; 4
     e1e:	51 f4       	brne	.+20     	; 0xe34 <__fpcmp_parts_f+0x2e>
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	1c 91       	ld	r17, X
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	99 f5       	brne	.+102    	; 0xe8e <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	68 2f       	mov	r22, r24
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	61 1b       	sub	r22, r17
     e30:	71 09       	sbc	r23, r1
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <__fpcmp_parts_f+0xac>
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	21 f0       	breq	.+8      	; 0xe40 <__fpcmp_parts_f+0x3a>
     e38:	92 30       	cpi	r25, 0x02	; 2
     e3a:	31 f4       	brne	.+12     	; 0xe48 <__fpcmp_parts_f+0x42>
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	b9 f1       	breq	.+110    	; 0xeae <__fpcmp_parts_f+0xa8>
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	88 23       	and	r24, r24
     e44:	89 f1       	breq	.+98     	; 0xea8 <__fpcmp_parts_f+0xa2>
     e46:	2d c0       	rjmp	.+90     	; 0xea2 <__fpcmp_parts_f+0x9c>
     e48:	11 96       	adiw	r26, 0x01	; 1
     e4a:	1c 91       	ld	r17, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	f1 f0       	breq	.+60     	; 0xe8e <__fpcmp_parts_f+0x88>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	18 17       	cp	r17, r24
     e56:	d9 f4       	brne	.+54     	; 0xe8e <__fpcmp_parts_f+0x88>
     e58:	12 96       	adiw	r26, 0x02	; 2
     e5a:	2d 91       	ld	r18, X+
     e5c:	3c 91       	ld	r19, X
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	82 17       	cp	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	94 f0       	brlt	.+36     	; 0xe8e <__fpcmp_parts_f+0x88>
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	bc f0       	brlt	.+46     	; 0xe9e <__fpcmp_parts_f+0x98>
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	8d 91       	ld	r24, X+
     e74:	9d 91       	ld	r25, X+
     e76:	0d 90       	ld	r0, X+
     e78:	bc 91       	ld	r27, X
     e7a:	a0 2d       	mov	r26, r0
     e7c:	24 81       	ldd	r18, Z+4	; 0x04
     e7e:	35 81       	ldd	r19, Z+5	; 0x05
     e80:	46 81       	ldd	r20, Z+6	; 0x06
     e82:	57 81       	ldd	r21, Z+7	; 0x07
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	4a 07       	cpc	r20, r26
     e8a:	5b 07       	cpc	r21, r27
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <__fpcmp_parts_f+0x8e>
     e8e:	11 23       	and	r17, r17
     e90:	41 f0       	breq	.+16     	; 0xea2 <__fpcmp_parts_f+0x9c>
     e92:	0a c0       	rjmp	.+20     	; 0xea8 <__fpcmp_parts_f+0xa2>
     e94:	82 17       	cp	r24, r18
     e96:	93 07       	cpc	r25, r19
     e98:	a4 07       	cpc	r26, r20
     e9a:	b5 07       	cpc	r27, r21
     e9c:	40 f4       	brcc	.+16     	; 0xeae <__fpcmp_parts_f+0xa8>
     e9e:	11 23       	and	r17, r17
     ea0:	19 f0       	breq	.+6      	; 0xea8 <__fpcmp_parts_f+0xa2>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__fpcmp_parts_f+0xac>
     ea8:	6f ef       	ldi	r22, 0xFF	; 255
     eaa:	7f ef       	ldi	r23, 0xFF	; 255
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <__fpcmp_parts_f+0xac>
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	cb 01       	movw	r24, r22
     eb4:	1f 91       	pop	r17
     eb6:	08 95       	ret

00000eb8 <ADC_voidInit>:
static void (*ADC_Callback)(void) = NULL ;

void __vector_16(void) __attribute__ ((signal,used, externally_visible)); //to avoid optimization

void ADC_voidInit(void)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	/* **************** Select Voltage Reference **************** */
	ADMUX &= ADC_VOLTAGE_REF_CLR_MSK ;
     ec0:	a7 e2       	ldi	r26, 0x27	; 39
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e2       	ldi	r30, 0x27	; 39
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 73       	andi	r24, 0x3F	; 63
     ecc:	8c 93       	st	X, r24
	ADMUX |= VOLTAGE_REFERENCE ;
     ece:	a7 e2       	ldi	r26, 0x27	; 39
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e7 e2       	ldi	r30, 0x27	; 39
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 64       	ori	r24, 0x40	; 64
     eda:	8c 93       	st	X, r24
#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
	SET_BIT(ADCSRA, 5);
	SFIOR &= ADC_AUTO_TRIG_SRC_CLR_MSK ;
	SFIOR |= ADC_AUTO_TRIG_SRCE_SELECTOR;
#elif ADC_MODE_SELECTOR == ADC_MODE_SINGLE_CONVERION
	 CLR_BIT(ADCSRA, 5);
     edc:	a6 e2       	ldi	r26, 0x26	; 38
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e6 e2       	ldi	r30, 0x26	; 38
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8f 7d       	andi	r24, 0xDF	; 223
     ee8:	8c 93       	st	X, r24
#endif
	/* **************** Select ADJUSTMENT *********************** */
#if ADJUSTMENT == ADC_RIGHT_ADJUSTED
	CLR_BIT(ADMUX, 5);
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 7d       	andi	r24, 0xDF	; 223
     ef6:	8c 93       	st	X, r24

#elif ADJUSTMENT == ADC_LEFT_ADJUSTED
	SET_BIT(ADMUX, 5);
#endif
	/* **************** Select Clear Interrupt Flag ************* */
	SET_BIT(ADCSRA, 4);
     ef8:	a6 e2       	ldi	r26, 0x26	; 38
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e6 e2       	ldi	r30, 0x26	; 38
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	8c 93       	st	X, r24
	/* **************** Enable ADC ****************************** */
	SET_BIT(ADCSRA, 7);
     f06:	a6 e2       	ldi	r26, 0x26	; 38
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e6 e2       	ldi	r30, 0x26	; 38
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	8c 93       	st	X, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <ADC_voidStartConversion>:
void ADC_voidStartConversion(ADC_Channel_t ADC_Channel)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
	/* **************** Select ADC Channel ****************************** */
	ADMUX &= ADC_CHANNEL_SELECTOR_clr_msk ;
     f26:	a7 e2       	ldi	r26, 0x27	; 39
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e2       	ldi	r30, 0x27	; 39
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 7e       	andi	r24, 0xE0	; 224
     f32:	8c 93       	st	X, r24
	ADMUX |= ADC_Channel ;
     f34:	a7 e2       	ldi	r26, 0x27	; 39
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e7 e2       	ldi	r30, 0x27	; 39
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	90 81       	ld	r25, Z
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	89 2b       	or	r24, r25
     f42:	8c 93       	st	X, r24
	/* **************** ADC Start Conversion ****************************** */
	SET_BIT(ADCSRA, 6);
     f44:	a6 e2       	ldi	r26, 0x26	; 38
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e6 e2       	ldi	r30, 0x26	; 38
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 64       	ori	r24, 0x40	; 64
     f50:	8c 93       	st	X, r24
}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <ADC_voidGetResoult>:
u16 ADC_voidGetResoult(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
	return ADCLH;
#elif ADC_MODE_SELECTOR == ADC_MODE_SINGLE_CONVERION
	while((GET_BIT(ADCSRA, 6))); // while(!ADCSRA)
     f62:	e6 e2       	ldi	r30, 0x26	; 38
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	82 95       	swap	r24
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	83 70       	andi	r24, 0x03	; 3
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	99 f7       	brne	.-26     	; 0xf62 <ADC_voidGetResoult+0x8>
	return ADCLH;
     f7c:	e4 e2       	ldi	r30, 0x24	; 36
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
#endif

}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <ADC_EnableInt0>:

void ADC_EnableInt0(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 3);
     f92:	a6 e2       	ldi	r26, 0x26	; 38
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e6 e2       	ldi	r30, 0x26	; 38
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	8c 93       	st	X, r24
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <ADC_DesableInt0>:
void ADC_DesableInt0(void)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA, 3);
     fae:	a6 e2       	ldi	r26, 0x26	; 38
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e6 e2       	ldi	r30, 0x26	; 38
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	8c 93       	st	X, r24
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <ADC_SetCallback>:
void ADC_SetCallback(void (*CopyFuncPtr)(void))
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <ADC_SetCallback+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
	ADC_Callback = CopyFuncPtr ;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	90 93 8b 01 	sts	0x018B, r25
     fd8:	80 93 8a 01 	sts	0x018A, r24
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <__vector_16>:

void __vector_16(void)
{
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_Callback)
    1010:	80 91 8a 01 	lds	r24, 0x018A
    1014:	90 91 8b 01 	lds	r25, 0x018B
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	29 f0       	breq	.+10     	; 0x1026 <__vector_16+0x40>
	{
		ADC_Callback();
    101c:	e0 91 8a 01 	lds	r30, 0x018A
    1020:	f0 91 8b 01 	lds	r31, 0x018B
    1024:	09 95       	icall

	}
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <HDC_Init>:
#include "DIO_interface.h"
#include "DC_MOTOR_interface.h"
#include "DC_MOTOR_config.h"
#include "DC_MOTOR_private.h"
void HDC_Init(u8 Copy_u8MotorPort,u8 Copy_u8MotorTerminal1Pin,u8 Copy_u8MotorTerminal2Pin)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <HDC_Init+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <HDC_Init+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	6a 83       	std	Y+2, r22	; 0x02
    105e:	4b 83       	std	Y+3, r20	; 0x03
  	switch(Copy_u8MotorPort)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3d 83       	std	Y+5, r19	; 0x05
    1068:	2c 83       	std	Y+4, r18	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	01 f1       	breq	.+64     	; 0x10b4 <HDC_Init+0x68>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <HDC_Init+0x3c>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <HDC_Init+0x52>
    1086:	36 c0       	rjmp	.+108    	; 0x10f4 <HDC_Init+0xa8>
    1088:	2c 81       	ldd	r18, Y+4	; 0x04
    108a:	3d 81       	ldd	r19, Y+5	; 0x05
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	e1 f0       	breq	.+56     	; 0x10ca <HDC_Init+0x7e>
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	11 f1       	breq	.+68     	; 0x10e0 <HDC_Init+0x94>
    109c:	2b c0       	rjmp	.+86     	; 0x10f4 <HDC_Init+0xa8>
	{
	   case PORTA_ID :
		   DIO_voidSetPinDirection(PORTA_ID,Copy_u8MotorTerminal1Pin,PIN_OUTPUT);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	6a 81       	ldd	r22, Y+2	; 0x02
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
		   DIO_voidSetPinDirection(PORTA_ID,Copy_u8MotorTerminal2Pin,PIN_OUTPUT);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	6b 81       	ldd	r22, Y+3	; 0x03
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
    10b2:	20 c0       	rjmp	.+64     	; 0x10f4 <HDC_Init+0xa8>
		   break;
	   case PORTB_ID :
		   DIO_voidSetPinDirection(PORTB_ID,Copy_u8MotorTerminal1Pin,PIN_OUTPUT);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	6a 81       	ldd	r22, Y+2	; 0x02
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
		   DIO_voidSetPinDirection(PORTB_ID,Copy_u8MotorTerminal2Pin,PIN_OUTPUT);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	6b 81       	ldd	r22, Y+3	; 0x03
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
    10c8:	15 c0       	rjmp	.+42     	; 0x10f4 <HDC_Init+0xa8>
		   break;
	   case PORTC_ID :
		   DIO_voidSetPinDirection(PORTC_ID,Copy_u8MotorTerminal1Pin,PIN_OUTPUT);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	6a 81       	ldd	r22, Y+2	; 0x02
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
		   DIO_voidSetPinDirection(PORTC_ID,Copy_u8MotorTerminal2Pin,PIN_OUTPUT);
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	6b 81       	ldd	r22, Y+3	; 0x03
    10d8:	41 e0       	ldi	r20, 0x01	; 1
    10da:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <HDC_Init+0xa8>
		   break;
	   case PORTD_ID :
		   DIO_voidSetPinDirection(PORTD_ID,Copy_u8MotorTerminal1Pin,PIN_OUTPUT);
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	6a 81       	ldd	r22, Y+2	; 0x02
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
		   DIO_voidSetPinDirection(PORTD_ID,Copy_u8MotorTerminal2Pin,PIN_OUTPUT);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	6b 81       	ldd	r22, Y+3	; 0x03
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	   default:
		   /* return error  */
		   break;
    }

}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <HDC_RotateCW>:

void HDC_RotateCW(u8 Copy_u8MotorPort,u8 Copy_u8MotorTerminal1Pin,u8 Copy_u8MotorTerminal2Pin)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <HDC_RotateCW+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <HDC_RotateCW+0x8>
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	6a 83       	std	Y+2, r22	; 0x02
    1116:	4b 83       	std	Y+3, r20	; 0x03
	// Terminal 1  of the DC motor will be connected to high pin and Terminal 2 to low pin
	switch(Copy_u8MotorPort)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3d 83       	std	Y+5, r19	; 0x05
    1120:	2c 83       	std	Y+4, r18	; 0x04
    1122:	8c 81       	ldd	r24, Y+4	; 0x04
    1124:	9d 81       	ldd	r25, Y+5	; 0x05
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	01 f1       	breq	.+64     	; 0x116c <HDC_RotateCW+0x68>
    112c:	2c 81       	ldd	r18, Y+4	; 0x04
    112e:	3d 81       	ldd	r19, Y+5	; 0x05
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <HDC_RotateCW+0x3c>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	61 f0       	breq	.+24     	; 0x1156 <HDC_RotateCW+0x52>
    113e:	36 c0       	rjmp	.+108    	; 0x11ac <HDC_RotateCW+0xa8>
    1140:	2c 81       	ldd	r18, Y+4	; 0x04
    1142:	3d 81       	ldd	r19, Y+5	; 0x05
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	e1 f0       	breq	.+56     	; 0x1182 <HDC_RotateCW+0x7e>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	11 f1       	breq	.+68     	; 0x1198 <HDC_RotateCW+0x94>
    1154:	2b c0       	rjmp	.+86     	; 0x11ac <HDC_RotateCW+0xa8>
	{
		case PORTA_ID :
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal1Pin,PIN_HIGH);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	6a 81       	ldd	r22, Y+2	; 0x02
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	6b 81       	ldd	r22, Y+3	; 0x03
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    116a:	20 c0       	rjmp	.+64     	; 0x11ac <HDC_RotateCW+0xa8>
		   break;
        case PORTB_ID :
           DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal1Pin,PIN_HIGH);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	6a 81       	ldd	r22, Y+2	; 0x02
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
           DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	6b 81       	ldd	r22, Y+3	; 0x03
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    1180:	15 c0       	rjmp	.+42     	; 0x11ac <HDC_RotateCW+0xa8>
           break;
		case PORTC_ID :
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal1Pin,PIN_HIGH);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	6a 81       	ldd	r22, Y+2	; 0x02
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	6b 81       	ldd	r22, Y+3	; 0x03
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <HDC_RotateCW+0xa8>
		   break;
		case PORTD_ID :
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal1Pin,PIN_HIGH);
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	6a 81       	ldd	r22, Y+2	; 0x02
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	6b 81       	ldd	r22, Y+3	; 0x03
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   break;
		default:
		/* return error  */
		break;
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <HDC_RotateCCW>:
void HDC_RotateCCW(u8 Copy_u8MotorPort,u8 Copy_u8MotorTerminal1Pin,u8 Copy_u8MotorTerminal2Pin)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <HDC_RotateCCW+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <HDC_RotateCCW+0x8>
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	6a 83       	std	Y+2, r22	; 0x02
    11ce:	4b 83       	std	Y+3, r20	; 0x03
	// Terminal 1  of the DC motor will be connected to LOW pin and Terminal 2 to HIGH pin
	switch(Copy_u8MotorPort)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3d 83       	std	Y+5, r19	; 0x05
    11d8:	2c 83       	std	Y+4, r18	; 0x04
    11da:	8c 81       	ldd	r24, Y+4	; 0x04
    11dc:	9d 81       	ldd	r25, Y+5	; 0x05
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	91 05       	cpc	r25, r1
    11e2:	01 f1       	breq	.+64     	; 0x1224 <HDC_RotateCCW+0x68>
    11e4:	2c 81       	ldd	r18, Y+4	; 0x04
    11e6:	3d 81       	ldd	r19, Y+5	; 0x05
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <HDC_RotateCCW+0x3c>
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
    11f0:	9d 81       	ldd	r25, Y+5	; 0x05
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	61 f0       	breq	.+24     	; 0x120e <HDC_RotateCCW+0x52>
    11f6:	36 c0       	rjmp	.+108    	; 0x1264 <HDC_RotateCCW+0xa8>
    11f8:	2c 81       	ldd	r18, Y+4	; 0x04
    11fa:	3d 81       	ldd	r19, Y+5	; 0x05
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	e1 f0       	breq	.+56     	; 0x123a <HDC_RotateCCW+0x7e>
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	9d 81       	ldd	r25, Y+5	; 0x05
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	11 f1       	breq	.+68     	; 0x1250 <HDC_RotateCCW+0x94>
    120c:	2b c0       	rjmp	.+86     	; 0x1264 <HDC_RotateCCW+0xa8>
	{
		case PORTA_ID :
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	6a 81       	ldd	r22, Y+2	; 0x02
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal2Pin,PIN_HIGH);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	6b 81       	ldd	r22, Y+3	; 0x03
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    1222:	20 c0       	rjmp	.+64     	; 0x1264 <HDC_RotateCCW+0xa8>
		   break;
		case PORTB_ID :
		   DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	6a 81       	ldd	r22, Y+2	; 0x02
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal2Pin,PIN_HIGH);
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	6b 81       	ldd	r22, Y+3	; 0x03
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    1238:	15 c0       	rjmp	.+42     	; 0x1264 <HDC_RotateCCW+0xa8>
		   break;
		case PORTC_ID :
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	6a 81       	ldd	r22, Y+2	; 0x02
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal2Pin,PIN_HIGH);
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	6b 81       	ldd	r22, Y+3	; 0x03
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <HDC_RotateCCW+0xa8>
		   break;
		case PORTD_ID :
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	6a 81       	ldd	r22, Y+2	; 0x02
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal2Pin,PIN_HIGH);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	6b 81       	ldd	r22, Y+3	; 0x03
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		default:
		/* return error  */
		break;
	}

}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <HDC_voidStopMotor>:

void HDC_voidStopMotor(u8 Copy_u8MotorPort,u8 Copy_u8MotorTerminal1Pin,u8 Copy_u8MotorTerminal2Pin)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <HDC_voidStopMotor+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <HDC_voidStopMotor+0x8>
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	6a 83       	std	Y+2, r22	; 0x02
    1286:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8MotorPort)
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	01 f1       	breq	.+64     	; 0x12dc <HDC_voidStopMotor+0x68>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <HDC_voidStopMotor+0x3c>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <HDC_voidStopMotor+0x52>
    12ae:	36 c0       	rjmp	.+108    	; 0x131c <HDC_voidStopMotor+0xa8>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	e1 f0       	breq	.+56     	; 0x12f2 <HDC_voidStopMotor+0x7e>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	11 f1       	breq	.+68     	; 0x1308 <HDC_voidStopMotor+0x94>
    12c4:	2b c0       	rjmp	.+86     	; 0x131c <HDC_voidStopMotor+0xa8>
	{
		case PORTA_ID :
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	6a 81       	ldd	r22, Y+2	; 0x02
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTA_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	6b 81       	ldd	r22, Y+3	; 0x03
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    12da:	20 c0       	rjmp	.+64     	; 0x131c <HDC_voidStopMotor+0xa8>
		   break;
		case PORTB_ID :
		   DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	6a 81       	ldd	r22, Y+2	; 0x02
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTB_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	6b 81       	ldd	r22, Y+3	; 0x03
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <HDC_voidStopMotor+0xa8>
		   break;
		case PORTC_ID :
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	6a 81       	ldd	r22, Y+2	; 0x02
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTC_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    1306:	0a c0       	rjmp	.+20     	; 0x131c <HDC_voidStopMotor+0xa8>
		   break;
		case PORTD_ID :
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal1Pin,PIN_LOW);
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	6a 81       	ldd	r22, Y+2	; 0x02
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		   DIO_voidSetPinValue(PORTD_ID,Copy_u8MotorTerminal2Pin,PIN_LOW);
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	6b 81       	ldd	r22, Y+3	; 0x03
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		default:
		/* return error  */
		break;
	}

}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_voidSetPortDirection>:
#include "DIO_private.h"



void DIO_voidSetPortDirection (u8 Copy_u8PortID , u8 Copy_u8PortDir )
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_voidSetPortDirection+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_voidSetPortDirection+0x8>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8PortID<=3)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	90 f5       	brcc	.+100    	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
	{
		switch(Copy_u8PortID)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3c 83       	std	Y+4, r19	; 0x04
    134a:	2b 83       	std	Y+3, r18	; 0x03
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d1 f0       	breq	.+52     	; 0x138a <DIO_voidSetPortDirection+0x5e>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <DIO_voidSetPortDirection+0x3e>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <DIO_voidSetPortDirection+0x54>
    1368:	1e c0       	rjmp	.+60     	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <DIO_voidSetPortDirection+0x68>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	81 f0       	breq	.+32     	; 0x139e <DIO_voidSetPortDirection+0x72>
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
		{
			case PORTA_ID : DDRA_REG =Copy_u8PortDir ;break;
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 83       	st	Z, r24
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
			case PORTB_ID : DDRB_REG =Copy_u8PortDir ;break;
    138a:	e7 e3       	ldi	r30, 0x37	; 55
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
			case PORTC_ID : DDRC_REG =Copy_u8PortDir ;break;
    1394:	e4 e3       	ldi	r30, 0x34	; 52
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <DIO_voidSetPortDirection+0x7a>
			case PORTD_ID : DDRD_REG =Copy_u8PortDir ;break;
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
			default :
				break;
		}
	}
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue (u8 Copy_u8PortID , u8 Copy_u8PortVal )
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_voidSetPortValue+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_voidSetPortValue+0x8>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8PortID<=3 )
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	84 30       	cpi	r24, 0x04	; 4
    13c8:	90 f5       	brcc	.+100    	; 0x142e <DIO_voidSetPortValue+0x7a>
	{
		switch(Copy_u8PortID)
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3c 83       	std	Y+4, r19	; 0x04
    13d2:	2b 83       	std	Y+3, r18	; 0x03
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	d1 f0       	breq	.+52     	; 0x1412 <DIO_voidSetPortValue+0x5e>
    13de:	2b 81       	ldd	r18, Y+3	; 0x03
    13e0:	3c 81       	ldd	r19, Y+4	; 0x04
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <DIO_voidSetPortValue+0x3e>
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <DIO_voidSetPortValue+0x54>
    13f0:	1e c0       	rjmp	.+60     	; 0x142e <DIO_voidSetPortValue+0x7a>
    13f2:	2b 81       	ldd	r18, Y+3	; 0x03
    13f4:	3c 81       	ldd	r19, Y+4	; 0x04
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	81 f0       	breq	.+32     	; 0x141c <DIO_voidSetPortValue+0x68>
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	81 f0       	breq	.+32     	; 0x1426 <DIO_voidSetPortValue+0x72>
    1406:	13 c0       	rjmp	.+38     	; 0x142e <DIO_voidSetPortValue+0x7a>
		{
			case PORTA_ID : PORTA_REG =Copy_u8PortVal ;break;
    1408:	eb e3       	ldi	r30, 0x3B	; 59
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	80 83       	st	Z, r24
    1410:	0e c0       	rjmp	.+28     	; 0x142e <DIO_voidSetPortValue+0x7a>
			case PORTB_ID : PORTB_REG =Copy_u8PortVal ;break;
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	80 83       	st	Z, r24
    141a:	09 c0       	rjmp	.+18     	; 0x142e <DIO_voidSetPortValue+0x7a>
			case PORTC_ID : PORTC_REG =Copy_u8PortVal ;break;
    141c:	e5 e3       	ldi	r30, 0x35	; 53
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	80 83       	st	Z, r24
    1424:	04 c0       	rjmp	.+8      	; 0x142e <DIO_voidSetPortValue+0x7a>
			case PORTD_ID : PORTD_REG =Copy_u8PortVal ;break;
    1426:	e2 e3       	ldi	r30, 0x32	; 50
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	80 83       	st	Z, r24
			default :
				break;
		}
	}
}
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection (u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8PinDir )
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	27 97       	sbiw	r28, 0x07	; 7
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	6a 83       	std	Y+2, r22	; 0x02
    1454:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8PinID<=7 )
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 30       	cpi	r24, 0x08	; 8
    145a:	08 f0       	brcs	.+2      	; 0x145e <DIO_voidSetPinDirection+0x22>
    145c:	ea c0       	rjmp	.+468    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
	{
		if (PIN_OUTPUT ==Copy_u8PinDir)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	09 f0       	breq	.+2      	; 0x1466 <DIO_voidSetPinDirection+0x2a>
    1464:	6f c0       	rjmp	.+222    	; 0x1544 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3f 83       	std	Y+7, r19	; 0x07
    146e:	2e 83       	std	Y+6, r18	; 0x06
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	49 f1       	breq	.+82     	; 0x14cc <DIO_voidSetPinDirection+0x90>
    147a:	2e 81       	ldd	r18, Y+6	; 0x06
    147c:	3f 81       	ldd	r19, Y+7	; 0x07
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	2c f4       	brge	.+10     	; 0x148e <DIO_voidSetPinDirection+0x52>
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	9f 81       	ldd	r25, Y+7	; 0x07
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 f0       	breq	.+24     	; 0x14a4 <DIO_voidSetPinDirection+0x68>
    148c:	d2 c0       	rjmp	.+420    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
    148e:	2e 81       	ldd	r18, Y+6	; 0x06
    1490:	3f 81       	ldd	r19, Y+7	; 0x07
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <DIO_voidSetPinDirection+0xb8>
    1498:	8e 81       	ldd	r24, Y+6	; 0x06
    149a:	9f 81       	ldd	r25, Y+7	; 0x07
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	e9 f1       	breq	.+122    	; 0x151c <DIO_voidSetPinDirection+0xe0>
    14a2:	c7 c0       	rjmp	.+398    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
	        {
				case PORTA_ID :SET_BIT(DDRA_REG,Copy_u8PinID);break;
    14a4:	aa e3       	ldi	r26, 0x3A	; 58
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ea e3       	ldi	r30, 0x3A	; 58
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_voidSetPinDirection+0x86>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_voidSetPinDirection+0x82>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	b3 c0       	rjmp	.+358    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTB_ID :SET_BIT(DDRB_REG,Copy_u8PinID);break;
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_voidSetPinDirection+0xae>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_voidSetPinDirection+0xaa>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	9f c0       	rjmp	.+318    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTC_ID :SET_BIT(DDRC_REG,Copy_u8PinID);break;
    14f4:	a4 e3       	ldi	r26, 0x34	; 52
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e3       	ldi	r30, 0x34	; 52
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_voidSetPinDirection+0xd6>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_voidSetPinDirection+0xd2>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	8b c0       	rjmp	.+278    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTD_ID :SET_BIT(DDRD_REG,Copy_u8PinID);break;
    151c:	a1 e3       	ldi	r26, 0x31	; 49
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_voidSetPinDirection+0xfe>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_voidSetPinDirection+0xfa>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	77 c0       	rjmp	.+238    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				default :
					break;
			}
		}
		else if (PIN_INPUT ==Copy_u8PinDir)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 23       	and	r24, r24
    1548:	09 f0       	breq	.+2      	; 0x154c <DIO_voidSetPinDirection+0x110>
    154a:	73 c0       	rjmp	.+230    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	59 f1       	breq	.+86     	; 0x15b6 <DIO_voidSetPinDirection+0x17a>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_voidSetPinDirection+0x138>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	69 f0       	breq	.+26     	; 0x158c <DIO_voidSetPinDirection+0x150>
    1572:	5f c0       	rjmp	.+190    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	89 f1       	breq	.+98     	; 0x15e0 <DIO_voidSetPinDirection+0x1a4>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_voidSetPinDirection+0x14e>
    1588:	40 c0       	rjmp	.+128    	; 0x160a <DIO_voidSetPinDirection+0x1ce>
    158a:	53 c0       	rjmp	.+166    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
			{
				case PORTA_ID :CLR_BIT(DDRA_REG,Copy_u8PinID);break;
    158c:	aa e3       	ldi	r26, 0x3A	; 58
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ea e3       	ldi	r30, 0x3A	; 58
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_voidSetPinDirection+0x16e>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_voidSetPinDirection+0x16a>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	3e c0       	rjmp	.+124    	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTB_ID :CLR_BIT(DDRB_REG,Copy_u8PinID);break;
    15b6:	a7 e3       	ldi	r26, 0x37	; 55
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e7 e3       	ldi	r30, 0x37	; 55
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinDirection+0x198>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinDirection+0x194>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	29 c0       	rjmp	.+82     	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTC_ID :CLR_BIT(DDRC_REG,Copy_u8PinID);break;
    15e0:	a4 e3       	ldi	r26, 0x34	; 52
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e4 e3       	ldi	r30, 0x34	; 52
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_voidSetPinDirection+0x1c2>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_voidSetPinDirection+0x1be>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <DIO_voidSetPinDirection+0x1f6>
				case PORTD_ID :CLR_BIT(DDRD_REG,Copy_u8PinID);break;
    160a:	a1 e3       	ldi	r26, 0x31	; 49
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e1 e3       	ldi	r30, 0x31	; 49
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_voidSetPinDirection+0x1ec>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_voidSetPinDirection+0x1e8>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
		else
		{

		}
	}
}
    1632:	27 96       	adiw	r28, 0x07	; 7
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue (u8 Copy_u8PortID ,u8 Copy_u8PinID, u8 Copy_u8PinVal ){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	27 97       	sbiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	6a 83       	std	Y+2, r22	; 0x02
    165c:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8PinID<=7 )
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	88 30       	cpi	r24, 0x08	; 8
    1662:	08 f0       	brcs	.+2      	; 0x1666 <DIO_voidSetPinValue+0x22>
    1664:	ea c0       	rjmp	.+468    	; 0x183a <DIO_voidSetPinValue+0x1f6>
	{
		if (PIN_HIGH ==Copy_u8PinVal)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	09 f0       	breq	.+2      	; 0x166e <DIO_voidSetPinValue+0x2a>
    166c:	6f c0       	rjmp	.+222    	; 0x174c <DIO_voidSetPinValue+0x108>
		{
			switch(Copy_u8PortID)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3f 83       	std	Y+7, r19	; 0x07
    1676:	2e 83       	std	Y+6, r18	; 0x06
    1678:	8e 81       	ldd	r24, Y+6	; 0x06
    167a:	9f 81       	ldd	r25, Y+7	; 0x07
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	91 05       	cpc	r25, r1
    1680:	49 f1       	breq	.+82     	; 0x16d4 <DIO_voidSetPinValue+0x90>
    1682:	2e 81       	ldd	r18, Y+6	; 0x06
    1684:	3f 81       	ldd	r19, Y+7	; 0x07
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	2c f4       	brge	.+10     	; 0x1696 <DIO_voidSetPinValue+0x52>
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	61 f0       	breq	.+24     	; 0x16ac <DIO_voidSetPinValue+0x68>
    1694:	d2 c0       	rjmp	.+420    	; 0x183a <DIO_voidSetPinValue+0x1f6>
    1696:	2e 81       	ldd	r18, Y+6	; 0x06
    1698:	3f 81       	ldd	r19, Y+7	; 0x07
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	71 f1       	breq	.+92     	; 0x16fc <DIO_voidSetPinValue+0xb8>
    16a0:	8e 81       	ldd	r24, Y+6	; 0x06
    16a2:	9f 81       	ldd	r25, Y+7	; 0x07
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	e9 f1       	breq	.+122    	; 0x1724 <DIO_voidSetPinValue+0xe0>
    16aa:	c7 c0       	rjmp	.+398    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :SET_BIT(PORTA_REG,Copy_u8PinID);break;
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_voidSetPinValue+0x86>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_voidSetPinValue+0x82>
    16ce:	84 2b       	or	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	b3 c0       	rjmp	.+358    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :SET_BIT(PORTB_REG,Copy_u8PinID);break;
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_voidSetPinValue+0xae>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_voidSetPinValue+0xaa>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	9f c0       	rjmp	.+318    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :SET_BIT(PORTC_REG,Copy_u8PinID);break;
    16fc:	a5 e3       	ldi	r26, 0x35	; 53
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e3       	ldi	r30, 0x35	; 53
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_voidSetPinValue+0xd6>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_voidSetPinValue+0xd2>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	8b c0       	rjmp	.+278    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :SET_BIT(PORTD_REG,Copy_u8PinID);break;
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_voidSetPinValue+0xfe>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_voidSetPinValue+0xfa>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	77 c0       	rjmp	.+238    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			default :
				break;
			}
		}
		else if (PIN_LOW ==Copy_u8PinVal)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 23       	and	r24, r24
    1750:	09 f0       	breq	.+2      	; 0x1754 <DIO_voidSetPinValue+0x110>
    1752:	73 c0       	rjmp	.+230    	; 0x183a <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3d 83       	std	Y+5, r19	; 0x05
    175c:	2c 83       	std	Y+4, r18	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	59 f1       	breq	.+86     	; 0x17be <DIO_voidSetPinValue+0x17a>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <DIO_voidSetPinValue+0x138>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f0       	breq	.+26     	; 0x1794 <DIO_voidSetPinValue+0x150>
    177a:	5f c0       	rjmp	.+190    	; 0x183a <DIO_voidSetPinValue+0x1f6>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	89 f1       	breq	.+98     	; 0x17e8 <DIO_voidSetPinValue+0x1a4>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <DIO_voidSetPinValue+0x14e>
    1790:	40 c0       	rjmp	.+128    	; 0x1812 <DIO_voidSetPinValue+0x1ce>
    1792:	53 c0       	rjmp	.+166    	; 0x183a <DIO_voidSetPinValue+0x1f6>
			{
				case PORTA_ID :CLR_BIT(PORTA_REG,Copy_u8PinID);break;
    1794:	ab e3       	ldi	r26, 0x3B	; 59
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_voidSetPinValue+0x16e>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_voidSetPinValue+0x16a>
    17b6:	80 95       	com	r24
    17b8:	84 23       	and	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	3e c0       	rjmp	.+124    	; 0x183a <DIO_voidSetPinValue+0x1f6>
				case PORTB_ID :CLR_BIT(PORTB_REG,Copy_u8PinID);break;
    17be:	a8 e3       	ldi	r26, 0x38	; 56
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e8 e3       	ldi	r30, 0x38	; 56
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_voidSetPinValue+0x198>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_voidSetPinValue+0x194>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	29 c0       	rjmp	.+82     	; 0x183a <DIO_voidSetPinValue+0x1f6>
				case PORTC_ID :CLR_BIT(PORTC_REG,Copy_u8PinID);break;
    17e8:	a5 e3       	ldi	r26, 0x35	; 53
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e5 e3       	ldi	r30, 0x35	; 53
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_voidSetPinValue+0x1c2>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <DIO_voidSetPinValue+0x1be>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	14 c0       	rjmp	.+40     	; 0x183a <DIO_voidSetPinValue+0x1f6>
				case PORTD_ID :CLR_BIT(PORTD_REG,Copy_u8PinID);break;
    1812:	a2 e3       	ldi	r26, 0x32	; 50
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e2 e3       	ldi	r30, 0x32	; 50
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_voidSetPinValue+0x1ec>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_voidSetPinValue+0x1e8>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
		else
		{

		}
	}
}
    183a:	27 96       	adiw	r28, 0x07	; 7
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortID ,u8 Copy_u8PinID ){
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <DIO_u8GetPinValue+0x6>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_u8GetPinValue+0x8>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	8a 83       	std	Y+2, r24	; 0x02
    185c:	6b 83       	std	Y+3, r22	; 0x03
	u8 value ;
	if (Copy_u8PinID<=7 )
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_u8GetPinValue+0x1a>
    1864:	67 c0       	rjmp	.+206    	; 0x1934 <DIO_u8GetPinValue+0xe8>
	{
		switch(Copy_u8PortID)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3d 83       	std	Y+5, r19	; 0x05
    186e:	2c 83       	std	Y+4, r18	; 0x04
    1870:	4c 81       	ldd	r20, Y+4	; 0x04
    1872:	5d 81       	ldd	r21, Y+5	; 0x05
    1874:	41 30       	cpi	r20, 0x01	; 1
    1876:	51 05       	cpc	r21, r1
    1878:	41 f1       	breq	.+80     	; 0x18ca <DIO_u8GetPinValue+0x7e>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	34 f4       	brge	.+12     	; 0x1890 <DIO_u8GetPinValue+0x44>
    1884:	2c 81       	ldd	r18, Y+4	; 0x04
    1886:	3d 81       	ldd	r19, Y+5	; 0x05
    1888:	21 15       	cp	r18, r1
    188a:	31 05       	cpc	r19, r1
    188c:	61 f0       	breq	.+24     	; 0x18a6 <DIO_u8GetPinValue+0x5a>
    188e:	52 c0       	rjmp	.+164    	; 0x1934 <DIO_u8GetPinValue+0xe8>
    1890:	4c 81       	ldd	r20, Y+4	; 0x04
    1892:	5d 81       	ldd	r21, Y+5	; 0x05
    1894:	42 30       	cpi	r20, 0x02	; 2
    1896:	51 05       	cpc	r21, r1
    1898:	51 f1       	breq	.+84     	; 0x18ee <DIO_u8GetPinValue+0xa2>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	b9 f1       	breq	.+110    	; 0x1912 <DIO_u8GetPinValue+0xc6>
    18a4:	47 c0       	rjmp	.+142    	; 0x1934 <DIO_u8GetPinValue+0xe8>
		{
		case PORTA_ID : value =GET_BIT(PINA_REG ,Copy_u8PinID); break;
    18a6:	e9 e3       	ldi	r30, 0x39	; 57
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_u8GetPinValue+0x72>
    18ba:	55 95       	asr	r21
    18bc:	47 95       	ror	r20
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_u8GetPinValue+0x6e>
    18c2:	ca 01       	movw	r24, r20
    18c4:	81 70       	andi	r24, 0x01	; 1
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	35 c0       	rjmp	.+106    	; 0x1934 <DIO_u8GetPinValue+0xe8>
		case PORTB_ID : value =GET_BIT(PINB_REG ,Copy_u8PinID); break;
    18ca:	e6 e3       	ldi	r30, 0x36	; 54
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a9 01       	movw	r20, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_u8GetPinValue+0x96>
    18de:	55 95       	asr	r21
    18e0:	47 95       	ror	r20
    18e2:	8a 95       	dec	r24
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_u8GetPinValue+0x92>
    18e6:	ca 01       	movw	r24, r20
    18e8:	81 70       	andi	r24, 0x01	; 1
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	23 c0       	rjmp	.+70     	; 0x1934 <DIO_u8GetPinValue+0xe8>
		case PORTC_ID : value =GET_BIT(PINC_REG ,Copy_u8PinID); break;
    18ee:	e3 e3       	ldi	r30, 0x33	; 51
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_u8GetPinValue+0xba>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_u8GetPinValue+0xb6>
    190a:	ca 01       	movw	r24, r20
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <DIO_u8GetPinValue+0xe8>
		case PORTD_ID : value =GET_BIT(PIND_REG ,Copy_u8PinID); break;
    1912:	e0 e3       	ldi	r30, 0x30	; 48
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_u8GetPinValue+0xde>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_u8GetPinValue+0xda>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
		default :
			break;
		}
	}

	return value;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <DIO_voidTogglePin>:

void DIO_voidTogglePin (u8 Copy_u8PortID ,u8 Copy_u8PinID){
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <DIO_voidTogglePin+0x6>
    194c:	00 d0       	rcall	.+0      	; 0x194e <DIO_voidTogglePin+0x8>
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	6a 83       	std	Y+2, r22	; 0x02

	if (Copy_u8PinID<=7 )
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_voidTogglePin+0x18>
    195c:	6e c0       	rjmp	.+220    	; 0x1a3a <DIO_voidTogglePin+0xf4>
	{
		switch(Copy_u8PortID)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3c 83       	std	Y+4, r19	; 0x04
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	49 f1       	breq	.+82     	; 0x19c4 <DIO_voidTogglePin+0x7e>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	2c f4       	brge	.+10     	; 0x1986 <DIO_voidTogglePin+0x40>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	61 f0       	breq	.+24     	; 0x199c <DIO_voidTogglePin+0x56>
    1984:	5a c0       	rjmp	.+180    	; 0x1a3a <DIO_voidTogglePin+0xf4>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	71 f1       	breq	.+92     	; 0x19ec <DIO_voidTogglePin+0xa6>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	91 05       	cpc	r25, r1
    1998:	e9 f1       	breq	.+122    	; 0x1a14 <DIO_voidTogglePin+0xce>
    199a:	4f c0       	rjmp	.+158    	; 0x1a3a <DIO_voidTogglePin+0xf4>
		{
			case PORTA_ID :TOG_BIT(PORTA_REG ,Copy_u8PinID); break;
    199c:	ab e3       	ldi	r26, 0x3B	; 59
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	eb e3       	ldi	r30, 0x3B	; 59
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_voidTogglePin+0x74>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_voidTogglePin+0x70>
    19be:	84 27       	eor	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	3b c0       	rjmp	.+118    	; 0x1a3a <DIO_voidTogglePin+0xf4>
			case PORTB_ID :TOG_BIT(PORTB_REG ,Copy_u8PinID); break;
    19c4:	a8 e3       	ldi	r26, 0x38	; 56
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 e3       	ldi	r30, 0x38	; 56
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_voidTogglePin+0x9c>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_voidTogglePin+0x98>
    19e6:	84 27       	eor	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	27 c0       	rjmp	.+78     	; 0x1a3a <DIO_voidTogglePin+0xf4>
			case PORTC_ID :TOG_BIT(PORTC_REG ,Copy_u8PinID); break;
    19ec:	a5 e3       	ldi	r26, 0x35	; 53
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e3       	ldi	r30, 0x35	; 53
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_voidTogglePin+0xc4>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_voidTogglePin+0xc0>
    1a0e:	84 27       	eor	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <DIO_voidTogglePin+0xf4>
			case PORTD_ID :TOG_BIT(PORTD_REG ,Copy_u8PinID); break;
    1a14:	a2 e3       	ldi	r26, 0x32	; 50
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_voidTogglePin+0xec>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_voidTogglePin+0xe8>
    1a36:	84 27       	eor	r24, r20
    1a38:	8c 93       	st	X, r24
			default :
				break;
		}
	}
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <EEPROM_voidSendDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	62 97       	sbiw	r28, 0x12	; 18
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	99 8b       	std	Y+17, r25	; 0x11
    1a5e:	88 8b       	std	Y+16, r24	; 0x10
    1a60:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | ((u8)(Copy_u16LocationAddress >>8) & 0x03);
    1a62:	88 89       	ldd	r24, Y+16	; 0x10
    1a64:	99 89       	ldd	r25, Y+17	; 0x11
    1a66:	89 2f       	mov	r24, r25
    1a68:	99 27       	eor	r25, r25
    1a6a:	83 70       	andi	r24, 0x03	; 3
    1a6c:	80 65       	ori	r24, 0x50	; 80
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f
	/*if 24C02C :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    1a70:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    1a7a:	88 89       	ldd	r24, Y+16	; 0x10
    1a7c:	0e 94 40 32 	call	0x6480	; 0x6480 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    1a80:	8a 89       	ldd	r24, Y+18	; 0x12
    1a82:	0e 94 40 32 	call	0x6480	; 0x6480 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    1a86:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_SendStopCondition>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e2       	ldi	r26, 0x20	; 32
    1a90:	b1 e4       	ldi	r27, 0x41	; 65
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
    1a94:	9c 87       	std	Y+12, r25	; 0x0c
    1a96:	ad 87       	std	Y+13, r26	; 0x0d
    1a98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8f 83       	std	Y+7, r24	; 0x07
    1ab4:	98 87       	std	Y+8, r25	; 0x08
    1ab6:	a9 87       	std	Y+9, r26	; 0x09
    1ab8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aba:	6f 81       	ldd	r22, Y+7	; 0x07
    1abc:	78 85       	ldd	r23, Y+8	; 0x08
    1abe:	89 85       	ldd	r24, Y+9	; 0x09
    1ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <EEPROM_voidSendDataByte+0x94>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <EEPROM_voidSendDataByte+0x112>
	else if (__tmp > 65535)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <EEPROM_voidSendDataByte+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <EEPROM_voidSendDataByte+0xf4>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <EEPROM_voidSendDataByte+0xe2>
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <EEPROM_voidSendDataByte+0xd6>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <EEPROM_voidSendDataByte+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <EEPROM_voidSendDataByte+0x11e>
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    1b6e:	62 96       	adiw	r28, 0x12	; 18
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <EEPROM_u8ReadDataByte+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <EEPROM_u8ReadDataByte+0x8>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | ((u8)(Copy_u16LocationAddress >>8) & 0x03);
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	89 2f       	mov	r24, r25
    1b96:	99 27       	eor	r25, r25
    1b98:	83 70       	andi	r24, 0x03	; 3
    1b9a:	80 65       	ori	r24, 0x50	; 80
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	/*if 24C02C :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    1b9e:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	0e 94 40 32 	call	0x6480	; 0x6480 <TWI_MasterWriteDataByte>

	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    1bae:	0e 94 a6 31 	call	0x634c	; 0x634c <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	0e 94 08 32 	call	0x6410	; 0x6410 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	02 96       	adiw	r24, 0x02	; 2
    1bbc:	0e 94 69 32 	call	0x64d2	; 0x64d2 <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    1bc0:	0e 94 08 33 	call	0x6610	; 0x6610 <TWI_SendStopCondition>

	return Local_u8Data;
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <EXTI1_Set_Callback>:
static void (*CallBackPtr) (void) =NULL;
static void (*CallBackPtr_1) (void) =NULL;
static void (*CallBackPtr_2) (void) =NULL;

void EXTI1_Set_Callback(void (*ptr) (void) )
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <EXTI1_Set_Callback+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_1 = ptr;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	90 93 8f 01 	sts	0x018F, r25
    1bea:	80 93 8e 01 	sts	0x018E, r24
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <EXTI2_Set_Callback>:
void EXTI2_Set_Callback(void (*ptr) (void) )
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <EXTI2_Set_Callback+0x6>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_2 = ptr ;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	90 93 91 01 	sts	0x0191, r25
    1c0e:	80 93 90 01 	sts	0x0190, r24
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <EXTI0_Set_Callback>:

void EXTI0_Set_Callback(void (*ptr) (void) )
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <EXTI0_Set_Callback+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = ptr ;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	90 93 8d 01 	sts	0x018D, r25
    1c32:	80 93 8c 01 	sts	0x018C, r24
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <EXTI_voidInt0Init>:

void EXTI_voidInt0Init(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENS_CONTROL == SC_LOW_LEVEL
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);

#elif INT0_SENS_CONTROL == SC_LOGIC_CHANGE
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1c48:	aa e5       	ldi	r26, 0x5A	; 90
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e5       	ldi	r30, 0x5A	; 90
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	81 60       	ori	r24, 0x01	; 1
    1c54:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1c56:	aa e5       	ldi	r26, 0x5A	; 90
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ea e5       	ldi	r30, 0x5A	; 90
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8d 7f       	andi	r24, 0xFD	; 253
    1c62:	8c 93       	st	X, r24
#else 
	#erorr "wrong config"	
#endif


     SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1c64:	ab e5       	ldi	r26, 0x5B	; 91
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	eb e5       	ldi	r30, 0x5B	; 91
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 64       	ori	r24, 0x40	; 64
    1c70:	8c 93       	st	X, r24
}
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <EXTI_voidInt1Init>:




void EXTI_voidInt1Init(void)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62

#if INT1_SENS_CONTROL == SC_LOW_LEVEL
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1c80:	aa e5       	ldi	r26, 0x5A	; 90
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ea e5       	ldi	r30, 0x5A	; 90
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8e 7f       	andi	r24, 0xFE	; 254
    1c8c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1c8e:	aa e5       	ldi	r26, 0x5A	; 90
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ea e5       	ldi	r30, 0x5A	; 90
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8d 7f       	andi	r24, 0xFD	; 253
    1c9a:	8c 93       	st	X, r24

#elif INT1_SENS_CONTROL == SC_RISING_EDGE
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
#endif
	 SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1c9c:	ab e5       	ldi	r26, 0x5B	; 91
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	eb e5       	ldi	r30, 0x5B	; 91
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 68       	ori	r24, 0x80	; 128
    1ca8:	8c 93       	st	X, r24
}
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <EXTI_voidInt2Init>:




void EXTI_voidInt2Init(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENS_CONTROL == SC_FALLING_EDGE
	CLR_BIT(EXTI_MCUCSR	,EXTI_MCUCSR_ISC2_PIN);
#elif INT2_SENS_CONTROL == SC_RISING_EDGE
	SET_BIT(EXTI_MCUCSR	,EXTI_MCUCSR_ISC2_PIN);
#endif
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1cb8:	ab e5       	ldi	r26, 0x5B	; 91
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb e5       	ldi	r30, 0x5B	; 91
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	80 62       	ori	r24, 0x20	; 32
    1cc4:	8c 93       	st	X, r24
}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <EXTI_voidInt0Disable>:




void EXTI_voidInt0Disable(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1cd4:	ab e5       	ldi	r26, 0x5B	; 91
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	eb e5       	ldi	r30, 0x5B	; 91
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8f 7b       	andi	r24, 0xBF	; 191
    1ce0:	8c 93       	st	X, r24
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <EXTI_voidInt1Disable>:




void EXTI_voidInt1Disable(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1cf0:	ab e5       	ldi	r26, 0x5B	; 91
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	eb e5       	ldi	r30, 0x5B	; 91
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 77       	andi	r24, 0x7F	; 127
    1cfc:	8c 93       	st	X, r24
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <EXTI_voidInt2Disable>:




void EXTI_voidInt2Disable(void)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1d0c:	ab e5       	ldi	r26, 0x5B	; 91
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	eb e5       	ldi	r30, 0x5B	; 91
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8f 7d       	andi	r24, 0xDF	; 223
    1d18:	8c 93       	st	X, r24
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <EXTI_voidIntInit>:



/*******************************************************************************/
void EXTI_voidIntInit(u8 copy_Int_chanel,u8 copy_Int_trig_type)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	2a 97       	sbiw	r28, 0x0a	; 10
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_Int_chanel)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	3a 87       	std	Y+10, r19	; 0x0a
    1d40:	29 87       	std	Y+9, r18	; 0x09
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <EXTI_voidIntInit+0x2e>
    1d4c:	85 c0       	rjmp	.+266    	; 0x1e58 <EXTI_voidIntInit+0x138>
    1d4e:	29 85       	ldd	r18, Y+9	; 0x09
    1d50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d52:	23 30       	cpi	r18, 0x03	; 3
    1d54:	31 05       	cpc	r19, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <EXTI_voidIntInit+0x3a>
    1d58:	f8 c0       	rjmp	.+496    	; 0x1f4a <EXTI_voidIntInit+0x22a>
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <EXTI_voidIntInit+0x46>
    1d64:	1f c1       	rjmp	.+574    	; 0x1fa4 <EXTI_voidIntInit+0x284>
	{
		case  EXTI_INT0:
			switch(copy_Int_trig_type)
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	38 87       	std	Y+8, r19	; 0x08
    1d6e:	2f 83       	std	Y+7, r18	; 0x07
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	91 05       	cpc	r25, r1
    1d78:	69 f1       	breq	.+90     	; 0x1dd4 <EXTI_voidIntInit+0xb4>
    1d7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d7c:	38 85       	ldd	r19, Y+8	; 0x08
    1d7e:	23 30       	cpi	r18, 0x03	; 3
    1d80:	31 05       	cpc	r19, r1
    1d82:	34 f4       	brge	.+12     	; 0x1d90 <EXTI_voidIntInit+0x70>
    1d84:	8f 81       	ldd	r24, Y+7	; 0x07
    1d86:	98 85       	ldd	r25, Y+8	; 0x08
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	69 f0       	breq	.+26     	; 0x1da8 <EXTI_voidIntInit+0x88>
    1d8e:	0a c1       	rjmp	.+532    	; 0x1fa4 <EXTI_voidIntInit+0x284>
    1d90:	2f 81       	ldd	r18, Y+7	; 0x07
    1d92:	38 85       	ldd	r19, Y+8	; 0x08
    1d94:	23 30       	cpi	r18, 0x03	; 3
    1d96:	31 05       	cpc	r19, r1
    1d98:	99 f1       	breq	.+102    	; 0x1e00 <EXTI_voidIntInit+0xe0>
    1d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9c:	98 85       	ldd	r25, Y+8	; 0x08
    1d9e:	84 30       	cpi	r24, 0x04	; 4
    1da0:	91 05       	cpc	r25, r1
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <EXTI_voidIntInit+0x86>
    1da4:	43 c0       	rjmp	.+134    	; 0x1e2c <EXTI_voidIntInit+0x10c>
    1da6:	fe c0       	rjmp	.+508    	; 0x1fa4 <EXTI_voidIntInit+0x284>
			{
				case SC_LOW_LEVEL :
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1da8:	aa e5       	ldi	r26, 0x5A	; 90
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ea e5       	ldi	r30, 0x5A	; 90
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	8e 7f       	andi	r24, 0xFE	; 254
    1db4:	8c 93       	st	X, r24
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1db6:	aa e5       	ldi	r26, 0x5A	; 90
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ea e5       	ldi	r30, 0x5A	; 90
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8d 7f       	andi	r24, 0xFD	; 253
    1dc2:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1dc4:	ab e5       	ldi	r26, 0x5B	; 91
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e5       	ldi	r30, 0x5B	; 91
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	80 64       	ori	r24, 0x40	; 64
    1dd0:	8c 93       	st	X, r24
    1dd2:	e8 c0       	rjmp	.+464    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				case SC_LOGIC_CHANGE :
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1dd4:	aa e5       	ldi	r26, 0x5A	; 90
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	ea e5       	ldi	r30, 0x5A	; 90
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	81 60       	ori	r24, 0x01	; 1
    1de0:	8c 93       	st	X, r24
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1de2:	aa e5       	ldi	r26, 0x5A	; 90
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea e5       	ldi	r30, 0x5A	; 90
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8d 7f       	andi	r24, 0xFD	; 253
    1dee:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1df0:	ab e5       	ldi	r26, 0x5B	; 91
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	eb e5       	ldi	r30, 0x5B	; 91
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 64       	ori	r24, 0x40	; 64
    1dfc:	8c 93       	st	X, r24
    1dfe:	d2 c0       	rjmp	.+420    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;

				case SC_FALLING_EDGE :
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1e00:	aa e5       	ldi	r26, 0x5A	; 90
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ea e5       	ldi	r30, 0x5A	; 90
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8e 7f       	andi	r24, 0xFE	; 254
    1e0c:	8c 93       	st	X, r24
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1e0e:	aa e5       	ldi	r26, 0x5A	; 90
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ea e5       	ldi	r30, 0x5A	; 90
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	82 60       	ori	r24, 0x02	; 2
    1e1a:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1e1c:	ab e5       	ldi	r26, 0x5B	; 91
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	eb e5       	ldi	r30, 0x5B	; 91
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 64       	ori	r24, 0x40	; 64
    1e28:	8c 93       	st	X, r24
    1e2a:	bc c0       	rjmp	.+376    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				case SC_RISING_EDGE :
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1e2c:	aa e5       	ldi	r26, 0x5A	; 90
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ea e5       	ldi	r30, 0x5A	; 90
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	81 60       	ori	r24, 0x01	; 1
    1e38:	8c 93       	st	X, r24
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1e3a:	aa e5       	ldi	r26, 0x5A	; 90
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ea e5       	ldi	r30, 0x5A	; 90
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1e48:	ab e5       	ldi	r26, 0x5B	; 91
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e5       	ldi	r30, 0x5B	; 91
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 64       	ori	r24, 0x40	; 64
    1e54:	8c 93       	st	X, r24
    1e56:	a6 c0       	rjmp	.+332    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				}
				break;
		case  EXTI_INT1:

			switch(copy_Int_trig_type)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3e 83       	std	Y+6, r19	; 0x06
    1e60:	2d 83       	std	Y+5, r18	; 0x05
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	91 05       	cpc	r25, r1
    1e6a:	69 f1       	breq	.+90     	; 0x1ec6 <EXTI_voidIntInit+0x1a6>
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e70:	23 30       	cpi	r18, 0x03	; 3
    1e72:	31 05       	cpc	r19, r1
    1e74:	34 f4       	brge	.+12     	; 0x1e82 <EXTI_voidIntInit+0x162>
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	69 f0       	breq	.+26     	; 0x1e9a <EXTI_voidIntInit+0x17a>
    1e80:	91 c0       	rjmp	.+290    	; 0x1fa4 <EXTI_voidIntInit+0x284>
    1e82:	2d 81       	ldd	r18, Y+5	; 0x05
    1e84:	3e 81       	ldd	r19, Y+6	; 0x06
    1e86:	23 30       	cpi	r18, 0x03	; 3
    1e88:	31 05       	cpc	r19, r1
    1e8a:	99 f1       	breq	.+102    	; 0x1ef2 <EXTI_voidIntInit+0x1d2>
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <EXTI_voidIntInit+0x178>
    1e96:	43 c0       	rjmp	.+134    	; 0x1f1e <EXTI_voidIntInit+0x1fe>
    1e98:	85 c0       	rjmp	.+266    	; 0x1fa4 <EXTI_voidIntInit+0x284>
			{
				case SC_LOW_LEVEL :
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1e9a:	aa e5       	ldi	r26, 0x5A	; 90
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ea e5       	ldi	r30, 0x5A	; 90
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8e 7f       	andi	r24, 0xFE	; 254
    1ea6:	8c 93       	st	X, r24
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1ea8:	aa e5       	ldi	r26, 0x5A	; 90
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ea e5       	ldi	r30, 0x5A	; 90
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8d 7f       	andi	r24, 0xFD	; 253
    1eb4:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1eb6:	ab e5       	ldi	r26, 0x5B	; 91
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	eb e5       	ldi	r30, 0x5B	; 91
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 68       	ori	r24, 0x80	; 128
    1ec2:	8c 93       	st	X, r24
    1ec4:	6f c0       	rjmp	.+222    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				case SC_LOGIC_CHANGE :
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1ec6:	aa e5       	ldi	r26, 0x5A	; 90
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ea e5       	ldi	r30, 0x5A	; 90
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	8c 93       	st	X, r24
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1ed4:	aa e5       	ldi	r26, 0x5A	; 90
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	ea e5       	ldi	r30, 0x5A	; 90
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8d 7f       	andi	r24, 0xFD	; 253
    1ee0:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1ee2:	ab e5       	ldi	r26, 0x5B	; 91
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	eb e5       	ldi	r30, 0x5B	; 91
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	8c 93       	st	X, r24
    1ef0:	59 c0       	rjmp	.+178    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;

				case SC_FALLING_EDGE :
					CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1ef2:	aa e5       	ldi	r26, 0x5A	; 90
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ea e5       	ldi	r30, 0x5A	; 90
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8e 7f       	andi	r24, 0xFE	; 254
    1efe:	8c 93       	st	X, r24
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1f00:	aa e5       	ldi	r26, 0x5A	; 90
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	ea e5       	ldi	r30, 0x5A	; 90
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	82 60       	ori	r24, 0x02	; 2
    1f0c:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1f0e:	ab e5       	ldi	r26, 0x5B	; 91
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e5       	ldi	r30, 0x5B	; 91
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 68       	ori	r24, 0x80	; 128
    1f1a:	8c 93       	st	X, r24
    1f1c:	43 c0       	rjmp	.+134    	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				case SC_RISING_EDGE :
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00_PIN);
    1f1e:	aa e5       	ldi	r26, 0x5A	; 90
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ea e5       	ldi	r30, 0x5A	; 90
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	81 60       	ori	r24, 0x01	; 1
    1f2a:	8c 93       	st	X, r24
					SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01_PIN);
    1f2c:	aa e5       	ldi	r26, 0x5A	; 90
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ea e5       	ldi	r30, 0x5A	; 90
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1f3a:	ab e5       	ldi	r26, 0x5B	; 91
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	eb e5       	ldi	r30, 0x5B	; 91
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 68       	ori	r24, 0x80	; 128
    1f46:	8c 93       	st	X, r24
    1f48:	2d c0       	rjmp	.+90     	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
			}
			break;
		case  EXTI_INT2:

			switch(copy_Int_trig_type)
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3c 83       	std	Y+4, r19	; 0x04
    1f52:	2b 83       	std	Y+3, r18	; 0x03
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <EXTI_voidIntInit+0x24a>
    1f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f60:	3c 81       	ldd	r19, Y+4	; 0x04
    1f62:	24 30       	cpi	r18, 0x04	; 4
    1f64:	31 05       	cpc	r19, r1
    1f66:	81 f0       	breq	.+32     	; 0x1f88 <EXTI_voidIntInit+0x268>
    1f68:	1d c0       	rjmp	.+58     	; 0x1fa4 <EXTI_voidIntInit+0x284>
			{


				case SC_FALLING_EDGE :
					CLR_BIT(EXTI_MCUCSR	,EXTI_MCUCSR_ISC2_PIN);
    1f6a:	a4 e5       	ldi	r26, 0x54	; 84
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e4 e5       	ldi	r30, 0x54	; 84
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8f 7b       	andi	r24, 0xBF	; 191
    1f76:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1f78:	ab e5       	ldi	r26, 0x5B	; 91
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	eb e5       	ldi	r30, 0x5B	; 91
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 62       	ori	r24, 0x20	; 32
    1f84:	8c 93       	st	X, r24
    1f86:	0e c0       	rjmp	.+28     	; 0x1fa4 <EXTI_voidIntInit+0x284>
					break ;
				case SC_RISING_EDGE :
					SET_BIT(EXTI_MCUCSR	,EXTI_MCUCSR_ISC2_PIN);
    1f88:	a4 e5       	ldi	r26, 0x54	; 84
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e4 e5       	ldi	r30, 0x54	; 84
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 64       	ori	r24, 0x40	; 64
    1f94:	8c 93       	st	X, r24
					SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1f96:	ab e5       	ldi	r26, 0x5B	; 91
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e5       	ldi	r30, 0x5B	; 91
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 62       	ori	r24, 0x20	; 32
    1fa2:	8c 93       	st	X, r24
			}
			break;


	}
}
    1fa4:	2a 96       	adiw	r28, 0x0a	; 10
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <EXTI_voidIntDisable>:

void EXTI_voidIntDisable(u8 copy_Int_chanel)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <EXTI_voidIntDisable+0x6>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_Int_chanel)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	3b 83       	std	Y+3, r19	; 0x03
    1fcc:	2a 83       	std	Y+2, r18	; 0x02
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	91 f0       	breq	.+36     	; 0x1ffc <EXTI_voidIntDisable+0x46>
    1fd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1fda:	3b 81       	ldd	r19, Y+3	; 0x03
    1fdc:	23 30       	cpi	r18, 0x03	; 3
    1fde:	31 05       	cpc	r19, r1
    1fe0:	a9 f0       	breq	.+42     	; 0x200c <EXTI_voidIntDisable+0x56>
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	91 05       	cpc	r25, r1
    1fea:	b9 f4       	brne	.+46     	; 0x201a <EXTI_voidIntDisable+0x64>
	{
		case EXTI_INT0:
		{
			CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1fec:	ab e5       	ldi	r26, 0x5B	; 91
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e5       	ldi	r30, 0x5B	; 91
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	8f 7b       	andi	r24, 0xBF	; 191
    1ff8:	8c 93       	st	X, r24
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <EXTI_voidIntDisable+0x64>
			break ;
		}
		case EXTI_INT1:
		{
			CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1ffc:	ab e5       	ldi	r26, 0x5B	; 91
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	eb e5       	ldi	r30, 0x5B	; 91
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 77       	andi	r24, 0x7F	; 127
    2008:	8c 93       	st	X, r24
    200a:	07 c0       	rjmp	.+14     	; 0x201a <EXTI_voidIntDisable+0x64>
			break ;
		}
		case EXTI_INT2:
		{
			CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
    200c:	ab e5       	ldi	r26, 0x5B	; 91
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	eb e5       	ldi	r30, 0x5B	; 91
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7d       	andi	r24, 0xDF	; 223
    2018:	8c 93       	st	X, r24
			break ;
		}
	}
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <__vector_1>:

void __vector_1(void) __attribute__ ((signal,used, externally_visible));
void __vector_1(void)
{
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	2f 93       	push	r18
    2032:	3f 93       	push	r19
    2034:	4f 93       	push	r20
    2036:	5f 93       	push	r21
    2038:	6f 93       	push	r22
    203a:	7f 93       	push	r23
    203c:	8f 93       	push	r24
    203e:	9f 93       	push	r25
    2040:	af 93       	push	r26
    2042:	bf 93       	push	r27
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr)
    2050:	80 91 8c 01 	lds	r24, 0x018C
    2054:	90 91 8d 01 	lds	r25, 0x018D
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	29 f0       	breq	.+10     	; 0x2066 <__vector_1+0x40>
	{
		CallBackPtr();
    205c:	e0 91 8c 01 	lds	r30, 0x018C
    2060:	f0 91 8d 01 	lds	r31, 0x018D
    2064:	09 95       	icall
	}

}
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	ff 91       	pop	r31
    206c:	ef 91       	pop	r30
    206e:	bf 91       	pop	r27
    2070:	af 91       	pop	r26
    2072:	9f 91       	pop	r25
    2074:	8f 91       	pop	r24
    2076:	7f 91       	pop	r23
    2078:	6f 91       	pop	r22
    207a:	5f 91       	pop	r21
    207c:	4f 91       	pop	r20
    207e:	3f 91       	pop	r19
    2080:	2f 91       	pop	r18
    2082:	0f 90       	pop	r0
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	0f 90       	pop	r0
    2088:	1f 90       	pop	r1
    208a:	18 95       	reti

0000208c <__vector_2>:
void __vector_2(void) __attribute__ ((signal,used, externally_visible));
void __vector_2(void)
{
    208c:	1f 92       	push	r1
    208e:	0f 92       	push	r0
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	2f 93       	push	r18
    2098:	3f 93       	push	r19
    209a:	4f 93       	push	r20
    209c:	5f 93       	push	r21
    209e:	6f 93       	push	r22
    20a0:	7f 93       	push	r23
    20a2:	8f 93       	push	r24
    20a4:	9f 93       	push	r25
    20a6:	af 93       	push	r26
    20a8:	bf 93       	push	r27
    20aa:	ef 93       	push	r30
    20ac:	ff 93       	push	r31
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_1)
    20b6:	80 91 8e 01 	lds	r24, 0x018E
    20ba:	90 91 8f 01 	lds	r25, 0x018F
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	29 f0       	breq	.+10     	; 0x20cc <__vector_2+0x40>
	{
		CallBackPtr_1();
    20c2:	e0 91 8e 01 	lds	r30, 0x018E
    20c6:	f0 91 8f 01 	lds	r31, 0x018F
    20ca:	09 95       	icall
	}

}
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	ff 91       	pop	r31
    20d2:	ef 91       	pop	r30
    20d4:	bf 91       	pop	r27
    20d6:	af 91       	pop	r26
    20d8:	9f 91       	pop	r25
    20da:	8f 91       	pop	r24
    20dc:	7f 91       	pop	r23
    20de:	6f 91       	pop	r22
    20e0:	5f 91       	pop	r21
    20e2:	4f 91       	pop	r20
    20e4:	3f 91       	pop	r19
    20e6:	2f 91       	pop	r18
    20e8:	0f 90       	pop	r0
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	0f 90       	pop	r0
    20ee:	1f 90       	pop	r1
    20f0:	18 95       	reti

000020f2 <__vector_3>:
void __vector_3(void) __attribute__ ((signal,used, externally_visible));
void __vector_3(void)
{
    20f2:	1f 92       	push	r1
    20f4:	0f 92       	push	r0
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	0f 92       	push	r0
    20fa:	11 24       	eor	r1, r1
    20fc:	2f 93       	push	r18
    20fe:	3f 93       	push	r19
    2100:	4f 93       	push	r20
    2102:	5f 93       	push	r21
    2104:	6f 93       	push	r22
    2106:	7f 93       	push	r23
    2108:	8f 93       	push	r24
    210a:	9f 93       	push	r25
    210c:	af 93       	push	r26
    210e:	bf 93       	push	r27
    2110:	ef 93       	push	r30
    2112:	ff 93       	push	r31
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_2)
    211c:	80 91 90 01 	lds	r24, 0x0190
    2120:	90 91 91 01 	lds	r25, 0x0191
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	29 f0       	breq	.+10     	; 0x2132 <__vector_3+0x40>
	{
		CallBackPtr_2();
    2128:	e0 91 90 01 	lds	r30, 0x0190
    212c:	f0 91 91 01 	lds	r31, 0x0191
    2130:	09 95       	icall
	}

}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	ff 91       	pop	r31
    2138:	ef 91       	pop	r30
    213a:	bf 91       	pop	r27
    213c:	af 91       	pop	r26
    213e:	9f 91       	pop	r25
    2140:	8f 91       	pop	r24
    2142:	7f 91       	pop	r23
    2144:	6f 91       	pop	r22
    2146:	5f 91       	pop	r21
    2148:	4f 91       	pop	r20
    214a:	3f 91       	pop	r19
    214c:	2f 91       	pop	r18
    214e:	0f 90       	pop	r0
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	0f 90       	pop	r0
    2154:	1f 90       	pop	r1
    2156:	18 95       	reti

00002158 <GIE_voidEnable>:
#include "BIT_MATH.h"
#include "Interrupt_interface.h"
#include "Interrupt_private.h"
//function to enable global interrupts
void GIE_voidEnable(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT);  //set pin of global interrupts
    2160:	af e5       	ldi	r26, 0x5F	; 95
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	ef e5       	ldi	r30, 0x5F	; 95
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 68       	ori	r24, 0x80	; 128
    216c:	8c 93       	st	X, r24
}
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <GIE_voidDisable>:

//function to disable global interrupts
void GIE_voidDisable(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT); //clear pin of global interrupts
    217c:	af e5       	ldi	r26, 0x5F	; 95
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	ef e5       	ldi	r30, 0x5F	; 95
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8f 77       	andi	r24, 0x7F	; 127
    2188:	8c 93       	st	X, r24
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <voidDecodeDigit>:
#include"LCD_config.h"
#include<util/delay.h>
static u8 data_arr[32];
static u8 count_num;
static void voidDecodeDigit(u32 u32copy_data_to_write,u8 *data_arr)
 {   count_num=0;
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	27 97       	sbiw	r28, 0x07	; 7
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	6a 83       	std	Y+2, r22	; 0x02
    21aa:	7b 83       	std	Y+3, r23	; 0x03
    21ac:	8c 83       	std	Y+4, r24	; 0x04
    21ae:	9d 83       	std	Y+5, r25	; 0x05
    21b0:	5f 83       	std	Y+7, r21	; 0x07
    21b2:	4e 83       	std	Y+6, r20	; 0x06
    21b4:	10 92 b2 01 	sts	0x01B2, r1
 	 if(u32copy_data_to_write!=0)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	ac 81       	ldd	r26, Y+4	; 0x04
    21be:	bd 81       	ldd	r27, Y+5	; 0x05
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	a1 05       	cpc	r26, r1
    21c4:	b1 05       	cpc	r27, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <voidDecodeDigit+0x3a>
    21c8:	53 c0       	rjmp	.+166    	; 0x2270 <voidDecodeDigit+0xe0>
 	 {
     for(u8 i=0;i<32;i++)                                        //for loop with didit long iteration
    21ca:	19 82       	std	Y+1, r1	; 0x01
    21cc:	4d c0       	rjmp	.+154    	; 0x2268 <voidDecodeDigit+0xd8>
     {  if((u32copy_data_to_write%10==0)&&(u32copy_data_to_write/10==0))
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	ac 81       	ldd	r26, Y+4	; 0x04
    21d4:	bd 81       	ldd	r27, Y+5	; 0x05
    21d6:	2a e0       	ldi	r18, 0x0A	; 10
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	a1 05       	cpc	r26, r1
    21ee:	b1 05       	cpc	r27, r1
    21f0:	49 f4       	brne	.+18     	; 0x2204 <voidDecodeDigit+0x74>
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	ac 81       	ldd	r26, Y+4	; 0x04
    21f8:	bd 81       	ldd	r27, Y+5	; 0x05
    21fa:	8a 30       	cpi	r24, 0x0A	; 10
    21fc:	91 05       	cpc	r25, r1
    21fe:	a1 05       	cpc	r26, r1
    2200:	b1 05       	cpc	r27, r1
    2202:	b0 f1       	brcs	.+108    	; 0x2270 <voidDecodeDigit+0xe0>
    	 break;
         data_arr[i]=u32copy_data_to_write%10;                 //take the number by take the remander
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8e 81       	ldd	r24, Y+6	; 0x06
    220c:	9f 81       	ldd	r25, Y+7	; 0x07
    220e:	8c 01       	movw	r16, r24
    2210:	02 0f       	add	r16, r18
    2212:	13 1f       	adc	r17, r19
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	ac 81       	ldd	r26, Y+4	; 0x04
    221a:	bd 81       	ldd	r27, Y+5	; 0x05
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	80 83       	st	Z, r24
         u32copy_data_to_write=u32copy_data_to_write/10;       //divide the orginal number to can take the next number
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	9b 81       	ldd	r25, Y+3	; 0x03
    2238:	ac 81       	ldd	r26, Y+4	; 0x04
    223a:	bd 81       	ldd	r27, Y+5	; 0x05
    223c:	2a e0       	ldi	r18, 0x0A	; 10
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    224c:	da 01       	movw	r26, r20
    224e:	c9 01       	movw	r24, r18
    2250:	8a 83       	std	Y+2, r24	; 0x02
    2252:	9b 83       	std	Y+3, r25	; 0x03
    2254:	ac 83       	std	Y+4, r26	; 0x04
    2256:	bd 83       	std	Y+5, r27	; 0x05
         count_num++;
    2258:	80 91 b2 01 	lds	r24, 0x01B2
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	80 93 b2 01 	sts	0x01B2, r24
static u8 count_num;
static void voidDecodeDigit(u32 u32copy_data_to_write,u8 *data_arr)
 {   count_num=0;
 	 if(u32copy_data_to_write!=0)
 	 {
     for(u8 i=0;i<32;i++)                                        //for loop with didit long iteration
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	80 32       	cpi	r24, 0x20	; 32
    226c:	08 f4       	brcc	.+2      	; 0x2270 <voidDecodeDigit+0xe0>
    226e:	af cf       	rjmp	.-162    	; 0x21ce <voidDecodeDigit+0x3e>
         u32copy_data_to_write=u32copy_data_to_write/10;       //divide the orginal number to can take the next number
         count_num++;
     }
 	 }
 	 else{}
 }
    2270:	27 96       	adiw	r28, 0x07	; 7
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <voidWriteInBus>:
//	u32 count =0;
//	while(count<counter_percale)count++;
//}
//write data in the bus
static void voidWriteInBus(u8 data_or_cmd)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	0f 92       	push	r0
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(D4,GET_BIT(data_or_cmd,PIN4));
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	82 95       	swap	r24
    2296:	8f 70       	andi	r24, 0x0F	; 15
    2298:	98 2f       	mov	r25, r24
    229a:	91 70       	andi	r25, 0x01	; 1
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	49 2f       	mov	r20, r25
    22a2:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5,GET_BIT(data_or_cmd,PIN5));
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	82 95       	swap	r24
    22aa:	86 95       	lsr	r24
    22ac:	87 70       	andi	r24, 0x07	; 7
    22ae:	98 2f       	mov	r25, r24
    22b0:	91 70       	andi	r25, 0x01	; 1
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	49 2f       	mov	r20, r25
    22b8:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6,GET_BIT(data_or_cmd,PIN6));
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	82 95       	swap	r24
    22c0:	86 95       	lsr	r24
    22c2:	86 95       	lsr	r24
    22c4:	83 70       	andi	r24, 0x03	; 3
    22c6:	98 2f       	mov	r25, r24
    22c8:	91 70       	andi	r25, 0x01	; 1
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	62 e0       	ldi	r22, 0x02	; 2
    22ce:	49 2f       	mov	r20, r25
    22d0:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D7,GET_BIT(data_or_cmd,PIN7));
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	98 2f       	mov	r25, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	99 27       	eor	r25, r25
    22dc:	99 1f       	adc	r25, r25
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	64 e0       	ldi	r22, 0x04	; 4
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>


}
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <HLCD_voidLcdcmd>:
//write command in bus
void HLCD_voidLcdcmd(u8 command)
{    u8 copy_command_decoded =command;
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	ac 97       	sbiw	r28, 0x2c	; 44
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	8c a7       	std	Y+44, r24	; 0x2c
    2306:	8c a5       	ldd	r24, Y+44	; 0x2c
    2308:	8b a7       	std	Y+43, r24	; 0x2b
	 voidWriteInBus(copy_command_decoded);
    230a:	8b a5       	ldd	r24, Y+43	; 0x2b
    230c:	0e 94 43 11 	call	0x2286	; 0x2286 <voidWriteInBus>
	 DIO_voidSetPinValue(RS,PIN_LOW);  //TO WRITE COMMAND
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	63 e0       	ldi	r22, 0x03	; 3
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	 DIO_voidSetPinValue(EN,PIN_HIGH); //TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	62 e0       	ldi	r22, 0x02	; 2
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e8       	ldi	r26, 0x80	; 128
    232a:	bf e3       	ldi	r27, 0x3F	; 63
    232c:	8f a3       	std	Y+39, r24	; 0x27
    232e:	98 a7       	std	Y+40, r25	; 0x28
    2330:	a9 a7       	std	Y+41, r26	; 0x29
    2332:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6f a1       	ldd	r22, Y+39	; 0x27
    2336:	78 a5       	ldd	r23, Y+40	; 0x28
    2338:	89 a5       	ldd	r24, Y+41	; 0x29
    233a:	9a a5       	ldd	r25, Y+42	; 0x2a
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8b a3       	std	Y+35, r24	; 0x23
    234e:	9c a3       	std	Y+36, r25	; 0x24
    2350:	ad a3       	std	Y+37, r26	; 0x25
    2352:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <HLCD_voidLcdcmd+0x86>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9a a3       	std	Y+34, r25	; 0x22
    2372:	89 a3       	std	Y+33, r24	; 0x21
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <HLCD_voidLcdcmd+0x104>
	else if (__tmp > 65535)
    2376:	6b a1       	ldd	r22, Y+35	; 0x23
    2378:	7c a1       	ldd	r23, Y+36	; 0x24
    237a:	8d a1       	ldd	r24, Y+37	; 0x25
    237c:	9e a1       	ldd	r25, Y+38	; 0x26
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <HLCD_voidLcdcmd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6f a1       	ldd	r22, Y+39	; 0x27
    2390:	78 a5       	ldd	r23, Y+40	; 0x28
    2392:	89 a5       	ldd	r24, Y+41	; 0x29
    2394:	9a a5       	ldd	r25, Y+42	; 0x2a
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9a a3       	std	Y+34, r25	; 0x22
    23b4:	89 a3       	std	Y+33, r24	; 0x21
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <HLCD_voidLcdcmd+0xe6>
    23b8:	80 e9       	ldi	r24, 0x90	; 144
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	98 a3       	std	Y+32, r25	; 0x20
    23be:	8f 8f       	std	Y+31, r24	; 0x1f
    23c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c2:	98 a1       	ldd	r25, Y+32	; 0x20
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <HLCD_voidLcdcmd+0xd4>
    23c8:	98 a3       	std	Y+32, r25	; 0x20
    23ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	89 a1       	ldd	r24, Y+33	; 0x21
    23ce:	9a a1       	ldd	r25, Y+34	; 0x22
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9a a3       	std	Y+34, r25	; 0x22
    23d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	89 a1       	ldd	r24, Y+33	; 0x21
    23d8:	9a a1       	ldd	r25, Y+34	; 0x22
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <HLCD_voidLcdcmd+0xc8>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <HLCD_voidLcdcmd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6b a1       	ldd	r22, Y+35	; 0x23
    23e2:	7c a1       	ldd	r23, Y+36	; 0x24
    23e4:	8d a1       	ldd	r24, Y+37	; 0x25
    23e6:	9e a1       	ldd	r25, Y+38	; 0x26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9a a3       	std	Y+34, r25	; 0x22
    23f2:	89 a3       	std	Y+33, r24	; 0x21
    23f4:	89 a1       	ldd	r24, Y+33	; 0x21
    23f6:	9a a1       	ldd	r25, Y+34	; 0x22
    23f8:	9e 8f       	std	Y+30, r25	; 0x1e
    23fa:	8d 8f       	std	Y+29, r24	; 0x1d
    23fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <HLCD_voidLcdcmd+0x110>
    2404:	9e 8f       	std	Y+30, r25	; 0x1e
    2406:	8d 8f       	std	Y+29, r24	; 0x1d
     _delay_ms(1);
     DIO_voidSetPinValue(EN,PIN_LOW);	//TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	 copy_command_decoded=(command<<4);
    2412:	8c a5       	ldd	r24, Y+44	; 0x2c
    2414:	82 95       	swap	r24
    2416:	80 7f       	andi	r24, 0xF0	; 240
    2418:	8b a7       	std	Y+43, r24	; 0x2b
	 voidWriteInBus(copy_command_decoded);
    241a:	8b a5       	ldd	r24, Y+43	; 0x2b
    241c:	0e 94 43 11 	call	0x2286	; 0x2286 <voidWriteInBus>
	 DIO_voidSetPinValue(EN,PIN_HIGH); //TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 e8       	ldi	r26, 0x80	; 128
    2430:	bf e3       	ldi	r27, 0x3F	; 63
    2432:	89 8f       	std	Y+25, r24	; 0x19
    2434:	9a 8f       	std	Y+26, r25	; 0x1a
    2436:	ab 8f       	std	Y+27, r26	; 0x1b
    2438:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243a:	69 8d       	ldd	r22, Y+25	; 0x19
    243c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2440:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a e7       	ldi	r20, 0x7A	; 122
    2448:	55 e4       	ldi	r21, 0x45	; 69
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8d 8b       	std	Y+21, r24	; 0x15
    2454:	9e 8b       	std	Y+22, r25	; 0x16
    2456:	af 8b       	std	Y+23, r26	; 0x17
    2458:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <HLCD_voidLcdcmd+0x18c>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 8b       	std	Y+20, r25	; 0x14
    2478:	8b 8b       	std	Y+19, r24	; 0x13
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <HLCD_voidLcdcmd+0x20a>
	else if (__tmp > 65535)
    247c:	6d 89       	ldd	r22, Y+21	; 0x15
    247e:	7e 89       	ldd	r23, Y+22	; 0x16
    2480:	8f 89       	ldd	r24, Y+23	; 0x17
    2482:	98 8d       	ldd	r25, Y+24	; 0x18
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	4c f5       	brge	.+82     	; 0x24e6 <HLCD_voidLcdcmd+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <HLCD_voidLcdcmd+0x1ec>
    24be:	80 e9       	ldi	r24, 0x90	; 144
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	9a 8b       	std	Y+18, r25	; 0x12
    24c4:	89 8b       	std	Y+17, r24	; 0x11
    24c6:	89 89       	ldd	r24, Y+17	; 0x11
    24c8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <HLCD_voidLcdcmd+0x1da>
    24ce:	9a 8b       	std	Y+18, r25	; 0x12
    24d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d2:	8b 89       	ldd	r24, Y+19	; 0x13
    24d4:	9c 89       	ldd	r25, Y+20	; 0x14
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9c 8b       	std	Y+20, r25	; 0x14
    24da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24dc:	8b 89       	ldd	r24, Y+19	; 0x13
    24de:	9c 89       	ldd	r25, Y+20	; 0x14
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f7       	brne	.-38     	; 0x24be <HLCD_voidLcdcmd+0x1ce>
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <HLCD_voidLcdcmd+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	8b 89       	ldd	r24, Y+19	; 0x13
    24fc:	9c 89       	ldd	r25, Y+20	; 0x14
    24fe:	98 8b       	std	Y+16, r25	; 0x10
    2500:	8f 87       	std	Y+15, r24	; 0x0f
    2502:	8f 85       	ldd	r24, Y+15	; 0x0f
    2504:	98 89       	ldd	r25, Y+16	; 0x10
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <HLCD_voidLcdcmd+0x216>
    250a:	98 8b       	std	Y+16, r25	; 0x10
    250c:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(1);
     DIO_voidSetPinValue(EN,PIN_LOW);	//TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	62 e0       	ldi	r22, 0x02	; 2
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e4       	ldi	r27, 0x40	; 64
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	9c 87       	std	Y+12, r25	; 0x0c
    2524:	ad 87       	std	Y+13, r26	; 0x0d
    2526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a e7       	ldi	r20, 0x7A	; 122
    2536:	55 e4       	ldi	r21, 0x45	; 69
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8f 83       	std	Y+7, r24	; 0x07
    2542:	98 87       	std	Y+8, r25	; 0x08
    2544:	a9 87       	std	Y+9, r26	; 0x09
    2546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	2c f4       	brge	.+10     	; 0x256a <HLCD_voidLcdcmd+0x27a>
		__ticks = 1;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	3f c0       	rjmp	.+126    	; 0x25e8 <HLCD_voidLcdcmd+0x2f8>
	else if (__tmp > 65535)
    256a:	6f 81       	ldd	r22, Y+7	; 0x07
    256c:	78 85       	ldd	r23, Y+8	; 0x08
    256e:	89 85       	ldd	r24, Y+9	; 0x09
    2570:	9a 85       	ldd	r25, Y+10	; 0x0a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	4c f5       	brge	.+82     	; 0x25d4 <HLCD_voidLcdcmd+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	6b 85       	ldd	r22, Y+11	; 0x0b
    2584:	7c 85       	ldd	r23, Y+12	; 0x0c
    2586:	8d 85       	ldd	r24, Y+13	; 0x0d
    2588:	9e 85       	ldd	r25, Y+14	; 0x0e
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e2       	ldi	r20, 0x20	; 32
    2590:	51 e4       	ldi	r21, 0x41	; 65
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	0f c0       	rjmp	.+30     	; 0x25ca <HLCD_voidLcdcmd+0x2da>
    25ac:	80 e9       	ldi	r24, 0x90	; 144
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <HLCD_voidLcdcmd+0x2c8>
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	69 f7       	brne	.-38     	; 0x25ac <HLCD_voidLcdcmd+0x2bc>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <HLCD_voidLcdcmd+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9e 83       	std	Y+6, r25	; 0x06
    25e6:	8d 83       	std	Y+5, r24	; 0x05
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <HLCD_voidLcdcmd+0x304>
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(2);
}
    25fc:	ac 96       	adiw	r28, 0x2c	; 44
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <HLCD_voidLcdIntiate>:
//intaite lcd
void HLCD_voidLcdIntiate(void)
{   _delay_ms(40);
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	c4 55       	subi	r28, 0x54	; 84
    261c:	d0 40       	sbci	r29, 0x00	; 0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	fe 01       	movw	r30, r28
    262a:	ef 5a       	subi	r30, 0xAF	; 175
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e2       	ldi	r26, 0x20	; 32
    2634:	b2 e4       	ldi	r27, 0x42	; 66
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	8e 01       	movw	r16, r28
    2640:	03 5b       	subi	r16, 0xB3	; 179
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	ef 5a       	subi	r30, 0xAF	; 175
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a e7       	ldi	r20, 0x7A	; 122
    2658:	55 e4       	ldi	r21, 0x45	; 69
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	f8 01       	movw	r30, r16
    2664:	80 83       	st	Z, r24
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	a2 83       	std	Z+2, r26	; 0x02
    266a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266c:	fe 01       	movw	r30, r28
    266e:	e3 5b       	subi	r30, 0xB3	; 179
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	44 f4       	brge	.+16     	; 0x269a <HLCD_voidLcdIntiate+0x8c>
		__ticks = 1;
    268a:	fe 01       	movw	r30, r28
    268c:	e5 5b       	subi	r30, 0xB5	; 181
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	64 c0       	rjmp	.+200    	; 0x2762 <HLCD_voidLcdIntiate+0x154>
	else if (__tmp > 65535)
    269a:	fe 01       	movw	r30, r28
    269c:	e3 5b       	subi	r30, 0xB3	; 179
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <HLCD_voidLcdIntiate+0xac>
    26b8:	43 c0       	rjmp	.+134    	; 0x2740 <HLCD_voidLcdIntiate+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	fe 01       	movw	r30, r28
    26bc:	ef 5a       	subi	r30, 0xAF	; 175
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8e 01       	movw	r16, r28
    26da:	05 5b       	subi	r16, 0xB5	; 181
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	1f c0       	rjmp	.+62     	; 0x2730 <HLCD_voidLcdIntiate+0x122>
    26f2:	fe 01       	movw	r30, r28
    26f4:	e7 5b       	subi	r30, 0xB7	; 183
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 e9       	ldi	r24, 0x90	; 144
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	fe 01       	movw	r30, r28
    2702:	e7 5b       	subi	r30, 0xB7	; 183
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <HLCD_voidLcdIntiate+0xfc>
    270e:	fe 01       	movw	r30, r28
    2710:	e7 5b       	subi	r30, 0xB7	; 183
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	de 01       	movw	r26, r28
    271a:	a5 5b       	subi	r26, 0xB5	; 181
    271c:	bf 4f       	sbci	r27, 0xFF	; 255
    271e:	fe 01       	movw	r30, r28
    2720:	e5 5b       	subi	r30, 0xB5	; 181
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	9c 93       	st	X, r25
    272e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	fe 01       	movw	r30, r28
    2732:	e5 5b       	subi	r30, 0xB5	; 181
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	d1 f6       	brne	.-76     	; 0x26f2 <HLCD_voidLcdIntiate+0xe4>
    273e:	27 c0       	rjmp	.+78     	; 0x278e <HLCD_voidLcdIntiate+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	8e 01       	movw	r16, r28
    2742:	05 5b       	subi	r16, 0xB5	; 181
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e3 5b       	subi	r30, 0xB3	; 179
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	f8 01       	movw	r30, r16
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	de 01       	movw	r26, r28
    2764:	a9 5b       	subi	r26, 0xB9	; 185
    2766:	bf 4f       	sbci	r27, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	e5 5b       	subi	r30, 0xB5	; 181
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	8d 93       	st	X+, r24
    2774:	9c 93       	st	X, r25
    2776:	fe 01       	movw	r30, r28
    2778:	e9 5b       	subi	r30, 0xB9	; 185
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <HLCD_voidLcdIntiate+0x172>
    2784:	fe 01       	movw	r30, r28
    2786:	e9 5b       	subi	r30, 0xB9	; 185
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(RS,PIN_OUTPUT);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	63 e0       	ldi	r22, 0x03	; 3
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(EN,PIN_OUTPUT);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	62 e0       	ldi	r22, 0x02	; 2
    279c:	41 e0       	ldi	r20, 0x01	; 1
    279e:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D4,PIN_OUTPUT);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	41 e0       	ldi	r20, 0x01	; 1
    27a8:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5,PIN_OUTPUT);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6,PIN_OUTPUT);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7,PIN_OUTPUT);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	64 e0       	ldi	r22, 0x04	; 4
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	HLCD_voidLcdcmd(RETURN_HOME_LCD);
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    27d0:	fe 01       	movw	r30, r28
    27d2:	ed 5b       	subi	r30, 0xBD	; 189
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e7       	ldi	r26, 0x70	; 112
    27dc:	b1 e4       	ldi	r27, 0x41	; 65
    27de:	80 83       	st	Z, r24
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	a2 83       	std	Z+2, r26	; 0x02
    27e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e6:	8e 01       	movw	r16, r28
    27e8:	01 5c       	subi	r16, 0xC1	; 193
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
    27ec:	fe 01       	movw	r30, r28
    27ee:	ed 5b       	subi	r30, 0xBD	; 189
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a e7       	ldi	r20, 0x7A	; 122
    2800:	55 e4       	ldi	r21, 0x45	; 69
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	f8 01       	movw	r30, r16
    280c:	80 83       	st	Z, r24
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	a2 83       	std	Z+2, r26	; 0x02
    2812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2814:	fe 01       	movw	r30, r28
    2816:	ff 96       	adiw	r30, 0x3f	; 63
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <HLCD_voidLcdIntiate+0x22c>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9e af       	std	Y+62, r25	; 0x3e
    2836:	8d af       	std	Y+61, r24	; 0x3d
    2838:	46 c0       	rjmp	.+140    	; 0x28c6 <HLCD_voidLcdIntiate+0x2b8>
	else if (__tmp > 65535)
    283a:	fe 01       	movw	r30, r28
    283c:	ff 96       	adiw	r30, 0x3f	; 63
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	64 f5       	brge	.+88     	; 0x28ae <HLCD_voidLcdIntiate+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	fe 01       	movw	r30, r28
    2858:	ed 5b       	subi	r30, 0xBD	; 189
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9e af       	std	Y+62, r25	; 0x3e
    2882:	8d af       	std	Y+61, r24	; 0x3d
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <HLCD_voidLcdIntiate+0x296>
    2886:	80 e9       	ldi	r24, 0x90	; 144
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9c af       	std	Y+60, r25	; 0x3c
    288c:	8b af       	std	Y+59, r24	; 0x3b
    288e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2890:	9c ad       	ldd	r25, Y+60	; 0x3c
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <HLCD_voidLcdIntiate+0x284>
    2896:	9c af       	std	Y+60, r25	; 0x3c
    2898:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8d ad       	ldd	r24, Y+61	; 0x3d
    289c:	9e ad       	ldd	r25, Y+62	; 0x3e
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9e af       	std	Y+62, r25	; 0x3e
    28a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <HLCD_voidLcdIntiate+0x278>
    28ac:	16 c0       	rjmp	.+44     	; 0x28da <HLCD_voidLcdIntiate+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	fe 01       	movw	r30, r28
    28b0:	ff 96       	adiw	r30, 0x3f	; 63
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e af       	std	Y+62, r25	; 0x3e
    28c4:	8d af       	std	Y+61, r24	; 0x3d
    28c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ca:	9a af       	std	Y+58, r25	; 0x3a
    28cc:	89 af       	std	Y+57, r24	; 0x39
    28ce:	89 ad       	ldd	r24, Y+57	; 0x39
    28d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <HLCD_voidLcdIntiate+0x2c4>
    28d6:	9a af       	std	Y+58, r25	; 0x3a
    28d8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);
	HLCD_voidLcdcmd(BIT4_MODE_LCD);
    28da:	88 e2       	ldi	r24, 0x28	; 40
    28dc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e4       	ldi	r27, 0x40	; 64
    28e8:	8d ab       	std	Y+53, r24	; 0x35
    28ea:	9e ab       	std	Y+54, r25	; 0x36
    28ec:	af ab       	std	Y+55, r26	; 0x37
    28ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	6d a9       	ldd	r22, Y+53	; 0x35
    28f2:	7e a9       	ldd	r23, Y+54	; 0x36
    28f4:	8f a9       	ldd	r24, Y+55	; 0x37
    28f6:	98 ad       	ldd	r25, Y+56	; 0x38
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	55 e4       	ldi	r21, 0x45	; 69
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	89 ab       	std	Y+49, r24	; 0x31
    290a:	9a ab       	std	Y+50, r25	; 0x32
    290c:	ab ab       	std	Y+51, r26	; 0x33
    290e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <HLCD_voidLcdIntiate+0x324>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <HLCD_voidLcdIntiate+0x3a2>
	else if (__tmp > 65535)
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <HLCD_voidLcdIntiate+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	6d a9       	ldd	r22, Y+53	; 0x35
    294c:	7e a9       	ldd	r23, Y+54	; 0x36
    294e:	8f a9       	ldd	r24, Y+55	; 0x37
    2950:	98 ad       	ldd	r25, Y+56	; 0x38
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <HLCD_voidLcdIntiate+0x384>
    2974:	80 e9       	ldi	r24, 0x90	; 144
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	9e a7       	std	Y+46, r25	; 0x2e
    297a:	8d a7       	std	Y+45, r24	; 0x2d
    297c:	8d a5       	ldd	r24, Y+45	; 0x2d
    297e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <HLCD_voidLcdIntiate+0x372>
    2984:	9e a7       	std	Y+46, r25	; 0x2e
    2986:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8f a5       	ldd	r24, Y+47	; 0x2f
    298a:	98 a9       	ldd	r25, Y+48	; 0x30
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	98 ab       	std	Y+48, r25	; 0x30
    2990:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8f a5       	ldd	r24, Y+47	; 0x2f
    2994:	98 a9       	ldd	r25, Y+48	; 0x30
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <HLCD_voidLcdIntiate+0x366>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <HLCD_voidLcdIntiate+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	69 a9       	ldd	r22, Y+49	; 0x31
    299e:	7a a9       	ldd	r23, Y+50	; 0x32
    29a0:	8b a9       	ldd	r24, Y+51	; 0x33
    29a2:	9c a9       	ldd	r25, Y+52	; 0x34
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
    29b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b2:	98 a9       	ldd	r25, Y+48	; 0x30
    29b4:	9c a7       	std	Y+44, r25	; 0x2c
    29b6:	8b a7       	std	Y+43, r24	; 0x2b
    29b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <HLCD_voidLcdIntiate+0x3ae>
    29c0:	9c a7       	std	Y+44, r25	; 0x2c
    29c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HLCD_voidLcdcmd(DISPLAY_ON_LCD);
    29c4:	8c e0       	ldi	r24, 0x0C	; 12
    29c6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a0 e0       	ldi	r26, 0x00	; 0
    29d0:	b0 e4       	ldi	r27, 0x40	; 64
    29d2:	8f a3       	std	Y+39, r24	; 0x27
    29d4:	98 a7       	std	Y+40, r25	; 0x28
    29d6:	a9 a7       	std	Y+41, r26	; 0x29
    29d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	6f a1       	ldd	r22, Y+39	; 0x27
    29dc:	78 a5       	ldd	r23, Y+40	; 0x28
    29de:	89 a5       	ldd	r24, Y+41	; 0x29
    29e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a e7       	ldi	r20, 0x7A	; 122
    29e8:	55 e4       	ldi	r21, 0x45	; 69
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	8b a3       	std	Y+35, r24	; 0x23
    29f4:	9c a3       	std	Y+36, r25	; 0x24
    29f6:	ad a3       	std	Y+37, r26	; 0x25
    29f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29fa:	6b a1       	ldd	r22, Y+35	; 0x23
    29fc:	7c a1       	ldd	r23, Y+36	; 0x24
    29fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2a00:	9e a1       	ldd	r25, Y+38	; 0x26
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <HLCD_voidLcdIntiate+0x40e>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
    2a1a:	3f c0       	rjmp	.+126    	; 0x2a9a <HLCD_voidLcdIntiate+0x48c>
	else if (__tmp > 65535)
    2a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a20:	8d a1       	ldd	r24, Y+37	; 0x25
    2a22:	9e a1       	ldd	r25, Y+38	; 0x26
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	4c f5       	brge	.+82     	; 0x2a86 <HLCD_voidLcdIntiate+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a34:	6f a1       	ldd	r22, Y+39	; 0x27
    2a36:	78 a5       	ldd	r23, Y+40	; 0x28
    2a38:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <HLCD_voidLcdIntiate+0x46e>
    2a5e:	80 e9       	ldi	r24, 0x90	; 144
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	98 a3       	std	Y+32, r25	; 0x20
    2a64:	8f 8f       	std	Y+31, r24	; 0x1f
    2a66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a68:	98 a1       	ldd	r25, Y+32	; 0x20
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <HLCD_voidLcdIntiate+0x45c>
    2a6e:	98 a3       	std	Y+32, r25	; 0x20
    2a70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	89 a1       	ldd	r24, Y+33	; 0x21
    2a74:	9a a1       	ldd	r25, Y+34	; 0x22
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <HLCD_voidLcdIntiate+0x450>
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <HLCD_voidLcdIntiate+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	6b a1       	ldd	r22, Y+35	; 0x23
    2a88:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa0:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <HLCD_voidLcdIntiate+0x498>
    2aaa:	9e 8f       	std	Y+30, r25	; 0x1e
    2aac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HLCD_voidLcdcmd(CLEAR_LCD);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 e7       	ldi	r26, 0x70	; 112
    2aba:	b1 e4       	ldi	r27, 0x41	; 65
    2abc:	89 8f       	std	Y+25, r24	; 0x19
    2abe:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a e7       	ldi	r20, 0x7A	; 122
    2ad2:	55 e4       	ldi	r21, 0x45	; 69
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8d 8b       	std	Y+21, r24	; 0x15
    2ade:	9e 8b       	std	Y+22, r25	; 0x16
    2ae0:	af 8b       	std	Y+23, r26	; 0x17
    2ae2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <HLCD_voidLcdIntiate+0x4f8>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <HLCD_voidLcdIntiate+0x576>
	else if (__tmp > 65535)
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <HLCD_voidLcdIntiate+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <HLCD_voidLcdIntiate+0x558>
    2b48:	80 e9       	ldi	r24, 0x90	; 144
    2b4a:	91 e0       	ldi	r25, 0x01	; 1
    2b4c:	9a 8b       	std	Y+18, r25	; 0x12
    2b4e:	89 8b       	std	Y+17, r24	; 0x11
    2b50:	89 89       	ldd	r24, Y+17	; 0x11
    2b52:	9a 89       	ldd	r25, Y+18	; 0x12
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <HLCD_voidLcdIntiate+0x546>
    2b58:	9a 8b       	std	Y+18, r25	; 0x12
    2b5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <HLCD_voidLcdIntiate+0x53a>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <HLCD_voidLcdIntiate+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	98 8b       	std	Y+16, r25	; 0x10
    2b8a:	8f 87       	std	Y+15, r24	; 0x0f
    2b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8e:	98 89       	ldd	r25, Y+16	; 0x10
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <HLCD_voidLcdIntiate+0x582>
    2b94:	98 8b       	std	Y+16, r25	; 0x10
    2b96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);
	HLCD_voidLcdcmd(ENTRY_MODE_LCD);
    2b98:	86 e0       	ldi	r24, 0x06	; 6
    2b9a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e4       	ldi	r27, 0x40	; 64
    2ba6:	8b 87       	std	Y+11, r24	; 0x0b
    2ba8:	9c 87       	std	Y+12, r25	; 0x0c
    2baa:	ad 87       	std	Y+13, r26	; 0x0d
    2bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4a e7       	ldi	r20, 0x7A	; 122
    2bbc:	55 e4       	ldi	r21, 0x45	; 69
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	8f 83       	std	Y+7, r24	; 0x07
    2bc8:	98 87       	std	Y+8, r25	; 0x08
    2bca:	a9 87       	std	Y+9, r26	; 0x09
    2bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bce:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd0:	78 85       	ldd	r23, Y+8	; 0x08
    2bd2:	89 85       	ldd	r24, Y+9	; 0x09
    2bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e8       	ldi	r20, 0x80	; 128
    2bdc:	5f e3       	ldi	r21, 0x3F	; 63
    2bde:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2be2:	88 23       	and	r24, r24
    2be4:	2c f4       	brge	.+10     	; 0x2bf0 <HLCD_voidLcdIntiate+0x5e2>
		__ticks = 1;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9e 83       	std	Y+6, r25	; 0x06
    2bec:	8d 83       	std	Y+5, r24	; 0x05
    2bee:	3f c0       	rjmp	.+126    	; 0x2c6e <HLCD_voidLcdIntiate+0x660>
	else if (__tmp > 65535)
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	3f ef       	ldi	r19, 0xFF	; 255
    2bfc:	4f e7       	ldi	r20, 0x7F	; 127
    2bfe:	57 e4       	ldi	r21, 0x47	; 71
    2c00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c04:	18 16       	cp	r1, r24
    2c06:	4c f5       	brge	.+82     	; 0x2c5a <HLCD_voidLcdIntiate+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e2       	ldi	r20, 0x20	; 32
    2c16:	51 e4       	ldi	r21, 0x41	; 65
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
    2c30:	0f c0       	rjmp	.+30     	; 0x2c50 <HLCD_voidLcdIntiate+0x642>
    2c32:	80 e9       	ldi	r24, 0x90	; 144
    2c34:	91 e0       	ldi	r25, 0x01	; 1
    2c36:	9c 83       	std	Y+4, r25	; 0x04
    2c38:	8b 83       	std	Y+3, r24	; 0x03
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <HLCD_voidLcdIntiate+0x630>
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	69 f7       	brne	.-38     	; 0x2c32 <HLCD_voidLcdIntiate+0x624>
    2c58:	14 c0       	rjmp	.+40     	; 0x2c82 <HLCD_voidLcdIntiate+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9e 83       	std	Y+6, r25	; 0x06
    2c6c:	8d 83       	std	Y+5, r24	; 0x05
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <HLCD_voidLcdIntiate+0x66c>
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c82:	cc 5a       	subi	r28, 0xAC	; 172
    2c84:	df 4f       	sbci	r29, 0xFF	; 255
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	08 95       	ret

00002c9a <HLCD_voidLcdSetAddress>:
//to set address that user sent
void HLCD_voidLcdSetAddress(u8 u8copy_row,u8 u8copy_col)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <HLCD_voidLcdSetAddress+0x6>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <HLCD_voidLcdSetAddress+0x8>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8copy_row)
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	3c 83       	std	Y+4, r19	; 0x04
    2cb2:	2b 83       	std	Y+3, r18	; 0x03
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	82 30       	cpi	r24, 0x02	; 2
    2cba:	91 05       	cpc	r25, r1
    2cbc:	d9 f0       	breq	.+54     	; 0x2cf4 <HLCD_voidLcdSetAddress+0x5a>
    2cbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc2:	23 30       	cpi	r18, 0x03	; 3
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	34 f4       	brge	.+12     	; 0x2cd4 <HLCD_voidLcdSetAddress+0x3a>
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	91 05       	cpc	r25, r1
    2cd0:	61 f0       	breq	.+24     	; 0x2cea <HLCD_voidLcdSetAddress+0x50>
    2cd2:	1e c0       	rjmp	.+60     	; 0x2d10 <HLCD_voidLcdSetAddress+0x76>
    2cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd8:	23 30       	cpi	r18, 0x03	; 3
    2cda:	31 05       	cpc	r19, r1
    2cdc:	81 f0       	breq	.+32     	; 0x2cfe <HLCD_voidLcdSetAddress+0x64>
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	84 30       	cpi	r24, 0x04	; 4
    2ce4:	91 05       	cpc	r25, r1
    2ce6:	81 f0       	breq	.+32     	; 0x2d08 <HLCD_voidLcdSetAddress+0x6e>
    2ce8:	13 c0       	rjmp	.+38     	; 0x2d10 <HLCD_voidLcdSetAddress+0x76>
		{
		case ROW0:
			   HLCD_voidLcdcmd((FIRST_ROW+u8copy_col));
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	80 58       	subi	r24, 0x80	; 128
    2cee:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    2cf2:	0e c0       	rjmp	.+28     	; 0x2d10 <HLCD_voidLcdSetAddress+0x76>
			   break;
		case ROW1:
				HLCD_voidLcdcmd((SECOND_ROW+u8copy_col));
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	80 54       	subi	r24, 0x40	; 64
    2cf8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <HLCD_voidLcdSetAddress+0x76>
				 break;
		case ROW2:
				HLCD_voidLcdcmd((THIRD_ROW+u8copy_col));
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	8c 56       	subi	r24, 0x6C	; 108
    2d02:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <HLCD_voidLcdSetAddress+0x76>
				 break;
		case ROW3:
				HLCD_voidLcdcmd((FOURTH_ROW+u8copy_col));
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	8c 52       	subi	r24, 0x2C	; 44
    2d0c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
				 break;
		}
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <HLCD_voidLcdWriteChar>:
//write char in lcd
void HLCD_voidLcdWriteChar(u8 data)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	ac 97       	sbiw	r28, 0x2c	; 44
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
    2d32:	8c a7       	std	Y+44, r24	; 0x2c
	 u8 copy_data_decoded =data;
    2d34:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d36:	8b a7       	std	Y+43, r24	; 0x2b
	 voidWriteInBus(copy_data_decoded);
    2d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d3a:	0e 94 43 11 	call	0x2286	; 0x2286 <voidWriteInBus>
	 DIO_voidSetPinValue(RS,PIN_HIGH);  //TO WRITE DATA
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	63 e0       	ldi	r22, 0x03	; 3
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	 DIO_voidSetPinValue(EN,PIN_HIGH); //TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	62 e0       	ldi	r22, 0x02	; 2
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a0 e0       	ldi	r26, 0x00	; 0
    2d58:	b0 e4       	ldi	r27, 0x40	; 64
    2d5a:	8f a3       	std	Y+39, r24	; 0x27
    2d5c:	98 a7       	std	Y+40, r25	; 0x28
    2d5e:	a9 a7       	std	Y+41, r26	; 0x29
    2d60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d62:	6f a1       	ldd	r22, Y+39	; 0x27
    2d64:	78 a5       	ldd	r23, Y+40	; 0x28
    2d66:	89 a5       	ldd	r24, Y+41	; 0x29
    2d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	4a e7       	ldi	r20, 0x7A	; 122
    2d70:	55 e4       	ldi	r21, 0x45	; 69
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	8b a3       	std	Y+35, r24	; 0x23
    2d7c:	9c a3       	std	Y+36, r25	; 0x24
    2d7e:	ad a3       	std	Y+37, r26	; 0x25
    2d80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d82:	6b a1       	ldd	r22, Y+35	; 0x23
    2d84:	7c a1       	ldd	r23, Y+36	; 0x24
    2d86:	8d a1       	ldd	r24, Y+37	; 0x25
    2d88:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	2c f4       	brge	.+10     	; 0x2da4 <HLCD_voidLcdWriteChar+0x86>
		__ticks = 1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9a a3       	std	Y+34, r25	; 0x22
    2da0:	89 a3       	std	Y+33, r24	; 0x21
    2da2:	3f c0       	rjmp	.+126    	; 0x2e22 <HLCD_voidLcdWriteChar+0x104>
	else if (__tmp > 65535)
    2da4:	6b a1       	ldd	r22, Y+35	; 0x23
    2da6:	7c a1       	ldd	r23, Y+36	; 0x24
    2da8:	8d a1       	ldd	r24, Y+37	; 0x25
    2daa:	9e a1       	ldd	r25, Y+38	; 0x26
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	57 e4       	ldi	r21, 0x47	; 71
    2db4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	4c f5       	brge	.+82     	; 0x2e0e <HLCD_voidLcdWriteChar+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dbe:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc0:	89 a5       	ldd	r24, Y+41	; 0x29
    2dc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e2       	ldi	r20, 0x20	; 32
    2dca:	51 e4       	ldi	r21, 0x41	; 65
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	cd 01       	movw	r24, r26
    2dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9a a3       	std	Y+34, r25	; 0x22
    2de2:	89 a3       	std	Y+33, r24	; 0x21
    2de4:	0f c0       	rjmp	.+30     	; 0x2e04 <HLCD_voidLcdWriteChar+0xe6>
    2de6:	80 e9       	ldi	r24, 0x90	; 144
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	98 a3       	std	Y+32, r25	; 0x20
    2dec:	8f 8f       	std	Y+31, r24	; 0x1f
    2dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2df0:	98 a1       	ldd	r25, Y+32	; 0x20
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	f1 f7       	brne	.-4      	; 0x2df2 <HLCD_voidLcdWriteChar+0xd4>
    2df6:	98 a3       	std	Y+32, r25	; 0x20
    2df8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	9a a3       	std	Y+34, r25	; 0x22
    2e02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e04:	89 a1       	ldd	r24, Y+33	; 0x21
    2e06:	9a a1       	ldd	r25, Y+34	; 0x22
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	69 f7       	brne	.-38     	; 0x2de6 <HLCD_voidLcdWriteChar+0xc8>
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <HLCD_voidLcdWriteChar+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e10:	7c a1       	ldd	r23, Y+36	; 0x24
    2e12:	8d a1       	ldd	r24, Y+37	; 0x25
    2e14:	9e a1       	ldd	r25, Y+38	; 0x26
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9a a3       	std	Y+34, r25	; 0x22
    2e20:	89 a3       	std	Y+33, r24	; 0x21
    2e22:	89 a1       	ldd	r24, Y+33	; 0x21
    2e24:	9a a1       	ldd	r25, Y+34	; 0x22
    2e26:	9e 8f       	std	Y+30, r25	; 0x1e
    2e28:	8d 8f       	std	Y+29, r24	; 0x1d
    2e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <HLCD_voidLcdWriteChar+0x110>
    2e32:	9e 8f       	std	Y+30, r25	; 0x1e
    2e34:	8d 8f       	std	Y+29, r24	; 0x1d
     _delay_ms(2);
     DIO_voidSetPinValue(EN,PIN_LOW);	//TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	62 e0       	ldi	r22, 0x02	; 2
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	 copy_data_decoded=(data<<4);
    2e40:	8c a5       	ldd	r24, Y+44	; 0x2c
    2e42:	82 95       	swap	r24
    2e44:	80 7f       	andi	r24, 0xF0	; 240
    2e46:	8b a7       	std	Y+43, r24	; 0x2b
	 voidWriteInBus(copy_data_decoded);
    2e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e4a:	0e 94 43 11 	call	0x2286	; 0x2286 <voidWriteInBus>
	 DIO_voidSetPinValue(EN,PIN_HIGH); //TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	62 e0       	ldi	r22, 0x02	; 2
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e4       	ldi	r27, 0x40	; 64
    2e60:	89 8f       	std	Y+25, r24	; 0x19
    2e62:	9a 8f       	std	Y+26, r25	; 0x1a
    2e64:	ab 8f       	std	Y+27, r26	; 0x1b
    2e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	55 e4       	ldi	r21, 0x45	; 69
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8d 8b       	std	Y+21, r24	; 0x15
    2e82:	9e 8b       	std	Y+22, r25	; 0x16
    2e84:	af 8b       	std	Y+23, r26	; 0x17
    2e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <HLCD_voidLcdWriteChar+0x18c>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <HLCD_voidLcdWriteChar+0x20a>
	else if (__tmp > 65535)
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <HLCD_voidLcdWriteChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 8b       	std	Y+20, r25	; 0x14
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <HLCD_voidLcdWriteChar+0x1ec>
    2eec:	80 e9       	ldi	r24, 0x90	; 144
    2eee:	91 e0       	ldi	r25, 0x01	; 1
    2ef0:	9a 8b       	std	Y+18, r25	; 0x12
    2ef2:	89 8b       	std	Y+17, r24	; 0x11
    2ef4:	89 89       	ldd	r24, Y+17	; 0x11
    2ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <HLCD_voidLcdWriteChar+0x1da>
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <HLCD_voidLcdWriteChar+0x1ce>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <HLCD_voidLcdWriteChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6d 89       	ldd	r22, Y+21	; 0x15
    2f16:	7e 89       	ldd	r23, Y+22	; 0x16
    2f18:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9c 8b       	std	Y+20, r25	; 0x14
    2f26:	8b 8b       	std	Y+19, r24	; 0x13
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	98 8b       	std	Y+16, r25	; 0x10
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	98 89       	ldd	r25, Y+16	; 0x10
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <HLCD_voidLcdWriteChar+0x216>
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(2);
     DIO_voidSetPinValue(EN,PIN_LOW);	//TO MAKE PULSE FROM HIGH TO LOW TO TAKE THE COMMAND FROM BUS
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	62 e0       	ldi	r22, 0x02	; 2
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e0       	ldi	r26, 0x00	; 0
    2f4c:	b0 e4       	ldi	r27, 0x40	; 64
    2f4e:	8b 87       	std	Y+11, r24	; 0x0b
    2f50:	9c 87       	std	Y+12, r25	; 0x0c
    2f52:	ad 87       	std	Y+13, r26	; 0x0d
    2f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a e7       	ldi	r20, 0x7A	; 122
    2f64:	55 e4       	ldi	r21, 0x45	; 69
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
    2f70:	98 87       	std	Y+8, r25	; 0x08
    2f72:	a9 87       	std	Y+9, r26	; 0x09
    2f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <HLCD_voidLcdWriteChar+0x27a>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <HLCD_voidLcdWriteChar+0x2f8>
	else if (__tmp > 65535)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <HLCD_voidLcdWriteChar+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <HLCD_voidLcdWriteChar+0x2da>
    2fda:	80 e9       	ldi	r24, 0x90	; 144
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	9c 83       	std	Y+4, r25	; 0x04
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <HLCD_voidLcdWriteChar+0x2c8>
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <HLCD_voidLcdWriteChar+0x2bc>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <HLCD_voidLcdWriteChar+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <HLCD_voidLcdWriteChar+0x304>
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(2);
}
    302a:	ac 96       	adiw	r28, 0x2c	; 44
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <HLCD_voidLcdClear>:
//{
//
//}
//CLEAR lcd
void HLCD_voidLcdClear(void)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	cd b7       	in	r28, 0x3d	; 61
    3042:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidLcdcmd(CLEAR_LCD);
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
}
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <HLCD_voidLcdWriteString>:


void HLCD_voidLcdWriteString(u8* u8data,u8 u8copy_row,u8 u8copy_col)
{   u8 counter= u8copy_row*20+u8copy_col;
    3050:	0f 93       	push	r16
    3052:	1f 93       	push	r17
    3054:	df 93       	push	r29
    3056:	cf 93       	push	r28
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	cf 57       	subi	r28, 0x7F	; 127
    305e:	d0 40       	sbci	r29, 0x00	; 0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	fe 01       	movw	r30, r28
    306c:	e4 58       	subi	r30, 0x84	; 132
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
    3074:	fe 01       	movw	r30, r28
    3076:	e2 58       	subi	r30, 0x82	; 130
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	60 83       	st	Z, r22
    307c:	fe 01       	movw	r30, r28
    307e:	e1 58       	subi	r30, 0x81	; 129
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	40 83       	st	Z, r20
    3084:	fe 01       	movw	r30, r28
    3086:	e2 58       	subi	r30, 0x82	; 130
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9c 01       	movw	r18, r24
    3092:	22 0f       	add	r18, r18
    3094:	33 1f       	adc	r19, r19
    3096:	22 0f       	add	r18, r18
    3098:	33 1f       	adc	r19, r19
    309a:	c9 01       	movw	r24, r18
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	82 0f       	add	r24, r18
    30a6:	93 1f       	adc	r25, r19
    30a8:	98 2f       	mov	r25, r24
    30aa:	de 01       	movw	r26, r28
    30ac:	a5 58       	subi	r26, 0x85	; 133
    30ae:	bf 4f       	sbci	r27, 0xFF	; 255
    30b0:	fe 01       	movw	r30, r28
    30b2:	e1 58       	subi	r30, 0x81	; 129
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	89 0f       	add	r24, r25
    30ba:	8c 93       	st	X, r24
 	u8 * copy_of_data=u8data;
    30bc:	de 01       	movw	r26, r28
    30be:	a7 58       	subi	r26, 0x87	; 135
    30c0:	bf 4f       	sbci	r27, 0xFF	; 255
    30c2:	fe 01       	movw	r30, r28
    30c4:	e4 58       	subi	r30, 0x84	; 132
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	8d 93       	st	X+, r24
    30ce:	9c 93       	st	X, r25
	HLCD_voidLcdSetAddress(u8copy_row,u8copy_col);
    30d0:	fe 01       	movw	r30, r28
    30d2:	e2 58       	subi	r30, 0x82	; 130
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	de 01       	movw	r26, r28
    30d8:	a1 58       	subi	r26, 0x81	; 129
    30da:	bf 4f       	sbci	r27, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	6c 91       	ld	r22, X
    30e0:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <HLCD_voidLcdSetAddress>
    30e4:	fe 01       	movw	r30, r28
    30e6:	eb 58       	subi	r30, 0x8B	; 139
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e2       	ldi	r26, 0x20	; 32
    30f0:	b2 e4       	ldi	r27, 0x42	; 66
    30f2:	80 83       	st	Z, r24
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	a2 83       	std	Z+2, r26	; 0x02
    30f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30fa:	8e 01       	movw	r16, r28
    30fc:	0f 58       	subi	r16, 0x8F	; 143
    30fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3100:	fe 01       	movw	r30, r28
    3102:	eb 58       	subi	r30, 0x8B	; 139
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	60 81       	ld	r22, Z
    3108:	71 81       	ldd	r23, Z+1	; 0x01
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	93 81       	ldd	r25, Z+3	; 0x03
    310e:	2b ea       	ldi	r18, 0xAB	; 171
    3110:	3a ea       	ldi	r19, 0xAA	; 170
    3112:	4a ea       	ldi	r20, 0xAA	; 170
    3114:	50 e4       	ldi	r21, 0x40	; 64
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	f8 01       	movw	r30, r16
    3120:	80 83       	st	Z, r24
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	a2 83       	std	Z+2, r26	; 0x02
    3126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3128:	fe 01       	movw	r30, r28
    312a:	ef 58       	subi	r30, 0x8F	; 143
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	34 f4       	brge	.+12     	; 0x3152 <HLCD_voidLcdWriteString+0x102>
		__ticks = 1;
    3146:	fe 01       	movw	r30, r28
    3148:	e0 59       	subi	r30, 0x90	; 144
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	80 83       	st	Z, r24
    3150:	e0 c0       	rjmp	.+448    	; 0x3312 <HLCD_voidLcdWriteString+0x2c2>
	else if (__tmp > 255)
    3152:	fe 01       	movw	r30, r28
    3154:	ef 58       	subi	r30, 0x8F	; 143
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	53 e4       	ldi	r21, 0x43	; 67
    3168:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	0c f0       	brlt	.+2      	; 0x3172 <HLCD_voidLcdWriteString+0x122>
    3170:	c0 c0       	rjmp	.+384    	; 0x32f2 <HLCD_voidLcdWriteString+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    3172:	fe 01       	movw	r30, r28
    3174:	eb 58       	subi	r30, 0x8B	; 139
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a e7       	ldi	r20, 0x7A	; 122
    3186:	54 e4       	ldi	r21, 0x44	; 68
    3188:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	fe 01       	movw	r30, r28
    3192:	e4 59       	subi	r30, 0x94	; 148
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 83       	st	Z, r24
    3198:	91 83       	std	Z+1, r25	; 0x01
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319e:	8e 01       	movw	r16, r28
    31a0:	08 59       	subi	r16, 0x98	; 152
    31a2:	1f 4f       	sbci	r17, 0xFF	; 255
    31a4:	fe 01       	movw	r30, r28
    31a6:	e4 59       	subi	r30, 0x94	; 148
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a e7       	ldi	r20, 0x7A	; 122
    31b8:	55 e4       	ldi	r21, 0x45	; 69
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	f8 01       	movw	r30, r16
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31cc:	fe 01       	movw	r30, r28
    31ce:	e8 59       	subi	r30, 0x98	; 152
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	60 81       	ld	r22, Z
    31d4:	71 81       	ldd	r23, Z+1	; 0x01
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	93 81       	ldd	r25, Z+3	; 0x03
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e8       	ldi	r20, 0x80	; 128
    31e0:	5f e3       	ldi	r21, 0x3F	; 63
    31e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31e6:	88 23       	and	r24, r24
    31e8:	44 f4       	brge	.+16     	; 0x31fa <HLCD_voidLcdWriteString+0x1aa>
		__ticks = 1;
    31ea:	fe 01       	movw	r30, r28
    31ec:	ea 59       	subi	r30, 0x9A	; 154
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	80 83       	st	Z, r24
    31f8:	64 c0       	rjmp	.+200    	; 0x32c2 <HLCD_voidLcdWriteString+0x272>
	else if (__tmp > 65535)
    31fa:	fe 01       	movw	r30, r28
    31fc:	e8 59       	subi	r30, 0x98	; 152
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	0c f0       	brlt	.+2      	; 0x321a <HLCD_voidLcdWriteString+0x1ca>
    3218:	43 c0       	rjmp	.+134    	; 0x32a0 <HLCD_voidLcdWriteString+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	fe 01       	movw	r30, r28
    321c:	e4 59       	subi	r30, 0x94	; 148
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	8e 01       	movw	r16, r28
    323a:	0a 59       	subi	r16, 0x9A	; 154
    323c:	1f 4f       	sbci	r17, 0xFF	; 255
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	f8 01       	movw	r30, r16
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	1f c0       	rjmp	.+62     	; 0x3290 <HLCD_voidLcdWriteString+0x240>
    3252:	fe 01       	movw	r30, r28
    3254:	ec 59       	subi	r30, 0x9C	; 156
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 e9       	ldi	r24, 0x90	; 144
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	80 83       	st	Z, r24
    3260:	fe 01       	movw	r30, r28
    3262:	ec 59       	subi	r30, 0x9C	; 156
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	80 81       	ld	r24, Z
    3268:	91 81       	ldd	r25, Z+1	; 0x01
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <HLCD_voidLcdWriteString+0x21a>
    326e:	fe 01       	movw	r30, r28
    3270:	ec 59       	subi	r30, 0x9C	; 156
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	91 83       	std	Z+1, r25	; 0x01
    3276:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	de 01       	movw	r26, r28
    327a:	aa 59       	subi	r26, 0x9A	; 154
    327c:	bf 4f       	sbci	r27, 0xFF	; 255
    327e:	fe 01       	movw	r30, r28
    3280:	ea 59       	subi	r30, 0x9A	; 154
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	80 81       	ld	r24, Z
    3286:	91 81       	ldd	r25, Z+1	; 0x01
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	11 96       	adiw	r26, 0x01	; 1
    328c:	9c 93       	st	X, r25
    328e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3290:	fe 01       	movw	r30, r28
    3292:	ea 59       	subi	r30, 0x9A	; 154
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	d1 f6       	brne	.-76     	; 0x3252 <HLCD_voidLcdWriteString+0x202>
    329e:	16 c4       	rjmp	.+2092   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	8e 01       	movw	r16, r28
    32a2:	0a 59       	subi	r16, 0x9A	; 154
    32a4:	1f 4f       	sbci	r17, 0xFF	; 255
    32a6:	fe 01       	movw	r30, r28
    32a8:	e8 59       	subi	r30, 0x98	; 152
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	f8 01       	movw	r30, r16
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
    32c2:	de 01       	movw	r26, r28
    32c4:	ae 59       	subi	r26, 0x9E	; 158
    32c6:	bf 4f       	sbci	r27, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	ea 59       	subi	r30, 0x9A	; 154
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	11 96       	adiw	r26, 0x01	; 1
    32d4:	9c 93       	st	X, r25
    32d6:	8e 93       	st	-X, r24
    32d8:	fe 01       	movw	r30, r28
    32da:	ee 59       	subi	r30, 0x9E	; 158
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 81       	ld	r24, Z
    32e0:	91 81       	ldd	r25, Z+1	; 0x01
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <HLCD_voidLcdWriteString+0x292>
    32e6:	fe 01       	movw	r30, r28
    32e8:	ee 59       	subi	r30, 0x9E	; 158
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	ed c3       	rjmp	.+2010   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32f2:	8e 01       	movw	r16, r28
    32f4:	00 59       	subi	r16, 0x90	; 144
    32f6:	1f 4f       	sbci	r17, 0xFF	; 255
    32f8:	fe 01       	movw	r30, r28
    32fa:	ef 58       	subi	r30, 0x8F	; 143
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	60 81       	ld	r22, Z
    3300:	71 81       	ldd	r23, Z+1	; 0x01
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	93 81       	ldd	r25, Z+3	; 0x03
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	80 83       	st	Z, r24
    3312:	de 01       	movw	r26, r28
    3314:	af 59       	subi	r26, 0x9F	; 159
    3316:	bf 4f       	sbci	r27, 0xFF	; 255
    3318:	fe 01       	movw	r30, r28
    331a:	e0 59       	subi	r30, 0x90	; 144
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	80 81       	ld	r24, Z
    3320:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3322:	fe 01       	movw	r30, r28
    3324:	ef 59       	subi	r30, 0x9F	; 159
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 81       	ld	r24, Z
    332a:	8a 95       	dec	r24
    332c:	f1 f7       	brne	.-4      	; 0x332a <HLCD_voidLcdWriteString+0x2da>
    332e:	fe 01       	movw	r30, r28
    3330:	ef 59       	subi	r30, 0x9F	; 159
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 83       	st	Z, r24
    3336:	ca c3       	rjmp	.+1940   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	_delay_us(40);
	while((*copy_of_data)!='\0')
	{
		HLCD_voidLcdWriteChar(*copy_of_data);
    3338:	fe 01       	movw	r30, r28
    333a:	e7 58       	subi	r30, 0x87	; 135
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	01 90       	ld	r0, Z+
    3340:	f0 81       	ld	r31, Z
    3342:	e0 2d       	mov	r30, r0
    3344:	80 81       	ld	r24, Z
    3346:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		copy_of_data++;
    334a:	de 01       	movw	r26, r28
    334c:	a7 58       	subi	r26, 0x87	; 135
    334e:	bf 4f       	sbci	r27, 0xFF	; 255
    3350:	fe 01       	movw	r30, r28
    3352:	e7 58       	subi	r30, 0x87	; 135
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	8d 93       	st	X+, r24
    335e:	9c 93       	st	X, r25
		counter++;
    3360:	de 01       	movw	r26, r28
    3362:	a5 58       	subi	r26, 0x85	; 133
    3364:	bf 4f       	sbci	r27, 0xFF	; 255
    3366:	fe 01       	movw	r30, r28
    3368:	e5 58       	subi	r30, 0x85	; 133
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	80 81       	ld	r24, Z
    336e:	8f 5f       	subi	r24, 0xFF	; 255
    3370:	8c 93       	st	X, r24
		if(counter==20)
    3372:	fe 01       	movw	r30, r28
    3374:	e5 58       	subi	r30, 0x85	; 133
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	84 31       	cpi	r24, 0x14	; 20
    337c:	09 f0       	breq	.+2      	; 0x3380 <HLCD_voidLcdWriteString+0x330>
    337e:	2d c1       	rjmp	.+602    	; 0x35da <HLCD_voidLcdWriteString+0x58a>
		{HLCD_voidLcdcmd(0xC0);_delay_us(40);}
    3380:	80 ec       	ldi	r24, 0xC0	; 192
    3382:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    3386:	fe 01       	movw	r30, r28
    3388:	e3 5a       	subi	r30, 0xA3	; 163
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	a0 e2       	ldi	r26, 0x20	; 32
    3392:	b2 e4       	ldi	r27, 0x42	; 66
    3394:	80 83       	st	Z, r24
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	a2 83       	std	Z+2, r26	; 0x02
    339a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    339c:	8e 01       	movw	r16, r28
    339e:	07 5a       	subi	r16, 0xA7	; 167
    33a0:	1f 4f       	sbci	r17, 0xFF	; 255
    33a2:	fe 01       	movw	r30, r28
    33a4:	e3 5a       	subi	r30, 0xA3	; 163
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	2b ea       	ldi	r18, 0xAB	; 171
    33b2:	3a ea       	ldi	r19, 0xAA	; 170
    33b4:	4a ea       	ldi	r20, 0xAA	; 170
    33b6:	50 e4       	ldi	r21, 0x40	; 64
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	f8 01       	movw	r30, r16
    33c2:	80 83       	st	Z, r24
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	a2 83       	std	Z+2, r26	; 0x02
    33c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33ca:	fe 01       	movw	r30, r28
    33cc:	e7 5a       	subi	r30, 0xA7	; 167
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e8       	ldi	r20, 0x80	; 128
    33de:	5f e3       	ldi	r21, 0x3F	; 63
    33e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33e4:	88 23       	and	r24, r24
    33e6:	34 f4       	brge	.+12     	; 0x33f4 <HLCD_voidLcdWriteString+0x3a4>
		__ticks = 1;
    33e8:	fe 01       	movw	r30, r28
    33ea:	e8 5a       	subi	r30, 0xA8	; 168
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	80 83       	st	Z, r24
    33f2:	e0 c0       	rjmp	.+448    	; 0x35b4 <HLCD_voidLcdWriteString+0x564>
	else if (__tmp > 255)
    33f4:	fe 01       	movw	r30, r28
    33f6:	e7 5a       	subi	r30, 0xA7	; 167
    33f8:	ff 4f       	sbci	r31, 0xFF	; 255
    33fa:	60 81       	ld	r22, Z
    33fc:	71 81       	ldd	r23, Z+1	; 0x01
    33fe:	82 81       	ldd	r24, Z+2	; 0x02
    3400:	93 81       	ldd	r25, Z+3	; 0x03
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	53 e4       	ldi	r21, 0x43	; 67
    340a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	0c f0       	brlt	.+2      	; 0x3414 <HLCD_voidLcdWriteString+0x3c4>
    3412:	c0 c0       	rjmp	.+384    	; 0x3594 <HLCD_voidLcdWriteString+0x544>
	{
		_delay_ms(__us / 1000.0);
    3414:	fe 01       	movw	r30, r28
    3416:	e3 5a       	subi	r30, 0xA3	; 163
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	60 81       	ld	r22, Z
    341c:	71 81       	ldd	r23, Z+1	; 0x01
    341e:	82 81       	ldd	r24, Z+2	; 0x02
    3420:	93 81       	ldd	r25, Z+3	; 0x03
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a e7       	ldi	r20, 0x7A	; 122
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	fe 01       	movw	r30, r28
    3434:	ec 5a       	subi	r30, 0xAC	; 172
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 83       	st	Z, r24
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	a2 83       	std	Z+2, r26	; 0x02
    343e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3440:	8e 01       	movw	r16, r28
    3442:	00 5b       	subi	r16, 0xB0	; 176
    3444:	1f 4f       	sbci	r17, 0xFF	; 255
    3446:	fe 01       	movw	r30, r28
    3448:	ec 5a       	subi	r30, 0xAC	; 172
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a e7       	ldi	r20, 0x7A	; 122
    345a:	55 e4       	ldi	r21, 0x45	; 69
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	f8 01       	movw	r30, r16
    3466:	80 83       	st	Z, r24
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	a2 83       	std	Z+2, r26	; 0x02
    346c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    346e:	fe 01       	movw	r30, r28
    3470:	e0 5b       	subi	r30, 0xB0	; 176
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e8       	ldi	r20, 0x80	; 128
    3482:	5f e3       	ldi	r21, 0x3F	; 63
    3484:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3488:	88 23       	and	r24, r24
    348a:	44 f4       	brge	.+16     	; 0x349c <HLCD_voidLcdWriteString+0x44c>
		__ticks = 1;
    348c:	fe 01       	movw	r30, r28
    348e:	e2 5b       	subi	r30, 0xB2	; 178
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
    349a:	64 c0       	rjmp	.+200    	; 0x3564 <HLCD_voidLcdWriteString+0x514>
	else if (__tmp > 65535)
    349c:	fe 01       	movw	r30, r28
    349e:	e0 5b       	subi	r30, 0xB0	; 176
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	3f ef       	ldi	r19, 0xFF	; 255
    34ae:	4f e7       	ldi	r20, 0x7F	; 127
    34b0:	57 e4       	ldi	r21, 0x47	; 71
    34b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34b6:	18 16       	cp	r1, r24
    34b8:	0c f0       	brlt	.+2      	; 0x34bc <HLCD_voidLcdWriteString+0x46c>
    34ba:	43 c0       	rjmp	.+134    	; 0x3542 <HLCD_voidLcdWriteString+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34bc:	fe 01       	movw	r30, r28
    34be:	ec 5a       	subi	r30, 0xAC	; 172
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8e 01       	movw	r16, r28
    34dc:	02 5b       	subi	r16, 0xB2	; 178
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	f8 01       	movw	r30, r16
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	1f c0       	rjmp	.+62     	; 0x3532 <HLCD_voidLcdWriteString+0x4e2>
    34f4:	fe 01       	movw	r30, r28
    34f6:	e4 5b       	subi	r30, 0xB4	; 180
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 e9       	ldi	r24, 0x90	; 144
    34fc:	91 e0       	ldi	r25, 0x01	; 1
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3502:	fe 01       	movw	r30, r28
    3504:	e4 5b       	subi	r30, 0xB4	; 180
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <HLCD_voidLcdWriteString+0x4bc>
    3510:	fe 01       	movw	r30, r28
    3512:	e4 5b       	subi	r30, 0xB4	; 180
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	de 01       	movw	r26, r28
    351c:	a2 5b       	subi	r26, 0xB2	; 178
    351e:	bf 4f       	sbci	r27, 0xFF	; 255
    3520:	fe 01       	movw	r30, r28
    3522:	e2 5b       	subi	r30, 0xB2	; 178
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 81       	ld	r24, Z
    3528:	91 81       	ldd	r25, Z+1	; 0x01
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	11 96       	adiw	r26, 0x01	; 1
    352e:	9c 93       	st	X, r25
    3530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	fe 01       	movw	r30, r28
    3534:	e2 5b       	subi	r30, 0xB2	; 178
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	d1 f6       	brne	.-76     	; 0x34f4 <HLCD_voidLcdWriteString+0x4a4>
    3540:	c5 c2       	rjmp	.+1418   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3542:	8e 01       	movw	r16, r28
    3544:	02 5b       	subi	r16, 0xB2	; 178
    3546:	1f 4f       	sbci	r17, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	e0 5b       	subi	r30, 0xB0	; 176
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	f8 01       	movw	r30, r16
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	de 01       	movw	r26, r28
    3566:	a6 5b       	subi	r26, 0xB6	; 182
    3568:	bf 4f       	sbci	r27, 0xFF	; 255
    356a:	fe 01       	movw	r30, r28
    356c:	e2 5b       	subi	r30, 0xB2	; 178
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	11 96       	adiw	r26, 0x01	; 1
    3576:	9c 93       	st	X, r25
    3578:	8e 93       	st	-X, r24
    357a:	fe 01       	movw	r30, r28
    357c:	e6 5b       	subi	r30, 0xB6	; 182
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <HLCD_voidLcdWriteString+0x534>
    3588:	fe 01       	movw	r30, r28
    358a:	e6 5b       	subi	r30, 0xB6	; 182
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	9c c2       	rjmp	.+1336   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3594:	8e 01       	movw	r16, r28
    3596:	08 5a       	subi	r16, 0xA8	; 168
    3598:	1f 4f       	sbci	r17, 0xFF	; 255
    359a:	fe 01       	movw	r30, r28
    359c:	e7 5a       	subi	r30, 0xA7	; 167
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	60 81       	ld	r22, Z
    35a2:	71 81       	ldd	r23, Z+1	; 0x01
    35a4:	82 81       	ldd	r24, Z+2	; 0x02
    35a6:	93 81       	ldd	r25, Z+3	; 0x03
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	f8 01       	movw	r30, r16
    35b2:	80 83       	st	Z, r24
    35b4:	de 01       	movw	r26, r28
    35b6:	a7 5b       	subi	r26, 0xB7	; 183
    35b8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ba:	fe 01       	movw	r30, r28
    35bc:	e8 5a       	subi	r30, 0xA8	; 168
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	80 81       	ld	r24, Z
    35c2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35c4:	fe 01       	movw	r30, r28
    35c6:	e7 5b       	subi	r30, 0xB7	; 183
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	8a 95       	dec	r24
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <HLCD_voidLcdWriteString+0x57c>
    35d0:	fe 01       	movw	r30, r28
    35d2:	e7 5b       	subi	r30, 0xB7	; 183
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 83       	st	Z, r24
    35d8:	79 c2       	rjmp	.+1266   	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
		else if(counter==40)
    35da:	fe 01       	movw	r30, r28
    35dc:	e5 58       	subi	r30, 0x85	; 133
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	88 32       	cpi	r24, 0x28	; 40
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <HLCD_voidLcdWriteString+0x598>
    35e6:	e1 c0       	rjmp	.+450    	; 0x37aa <HLCD_voidLcdWriteString+0x75a>
				{HLCD_voidLcdcmd(0x94);_delay_us(40);}
    35e8:	84 e9       	ldi	r24, 0x94	; 148
    35ea:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    35ee:	fe 01       	movw	r30, r28
    35f0:	eb 5b       	subi	r30, 0xBB	; 187
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a0 e2       	ldi	r26, 0x20	; 32
    35fa:	b2 e4       	ldi	r27, 0x42	; 66
    35fc:	80 83       	st	Z, r24
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	a2 83       	std	Z+2, r26	; 0x02
    3602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3604:	8e 01       	movw	r16, r28
    3606:	0f 5b       	subi	r16, 0xBF	; 191
    3608:	1f 4f       	sbci	r17, 0xFF	; 255
    360a:	fe 01       	movw	r30, r28
    360c:	eb 5b       	subi	r30, 0xBB	; 187
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	2b ea       	ldi	r18, 0xAB	; 171
    361a:	3a ea       	ldi	r19, 0xAA	; 170
    361c:	4a ea       	ldi	r20, 0xAA	; 170
    361e:	50 e4       	ldi	r21, 0x40	; 64
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	f8 01       	movw	r30, r16
    362a:	80 83       	st	Z, r24
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	a2 83       	std	Z+2, r26	; 0x02
    3630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3632:	fe 01       	movw	r30, r28
    3634:	ef 5b       	subi	r30, 0xBF	; 191
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	60 81       	ld	r22, Z
    363a:	71 81       	ldd	r23, Z+1	; 0x01
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e8       	ldi	r20, 0x80	; 128
    3646:	5f e3       	ldi	r21, 0x3F	; 63
    3648:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    364c:	88 23       	and	r24, r24
    364e:	34 f4       	brge	.+12     	; 0x365c <HLCD_voidLcdWriteString+0x60c>
		__ticks = 1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	fe 01       	movw	r30, r28
    3654:	e0 5c       	subi	r30, 0xC0	; 192
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 83       	st	Z, r24
    365a:	9d c0       	rjmp	.+314    	; 0x3796 <HLCD_voidLcdWriteString+0x746>
	else if (__tmp > 255)
    365c:	fe 01       	movw	r30, r28
    365e:	ef 5b       	subi	r30, 0xBF	; 191
    3660:	ff 4f       	sbci	r31, 0xFF	; 255
    3662:	60 81       	ld	r22, Z
    3664:	71 81       	ldd	r23, Z+1	; 0x01
    3666:	82 81       	ldd	r24, Z+2	; 0x02
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4f e7       	ldi	r20, 0x7F	; 127
    3670:	53 e4       	ldi	r21, 0x43	; 67
    3672:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3676:	18 16       	cp	r1, r24
    3678:	0c f0       	brlt	.+2      	; 0x367c <HLCD_voidLcdWriteString+0x62c>
    367a:	7e c0       	rjmp	.+252    	; 0x3778 <HLCD_voidLcdWriteString+0x728>
	{
		_delay_ms(__us / 1000.0);
    367c:	fe 01       	movw	r30, r28
    367e:	eb 5b       	subi	r30, 0xBB	; 187
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	60 81       	ld	r22, Z
    3684:	71 81       	ldd	r23, Z+1	; 0x01
    3686:	82 81       	ldd	r24, Z+2	; 0x02
    3688:	93 81       	ldd	r25, Z+3	; 0x03
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	4a e7       	ldi	r20, 0x7A	; 122
    3690:	54 e4       	ldi	r21, 0x44	; 68
    3692:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8c af       	std	Y+60, r24	; 0x3c
    369c:	9d af       	std	Y+61, r25	; 0x3d
    369e:	ae af       	std	Y+62, r26	; 0x3e
    36a0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a2:	6c ad       	ldd	r22, Y+60	; 0x3c
    36a4:	7d ad       	ldd	r23, Y+61	; 0x3d
    36a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    36a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	4a e7       	ldi	r20, 0x7A	; 122
    36b0:	55 e4       	ldi	r21, 0x45	; 69
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	88 af       	std	Y+56, r24	; 0x38
    36bc:	99 af       	std	Y+57, r25	; 0x39
    36be:	aa af       	std	Y+58, r26	; 0x3a
    36c0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    36c2:	68 ad       	ldd	r22, Y+56	; 0x38
    36c4:	79 ad       	ldd	r23, Y+57	; 0x39
    36c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    36c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e8       	ldi	r20, 0x80	; 128
    36d0:	5f e3       	ldi	r21, 0x3F	; 63
    36d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	2c f4       	brge	.+10     	; 0x36e4 <HLCD_voidLcdWriteString+0x694>
		__ticks = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9f ab       	std	Y+55, r25	; 0x37
    36e0:	8e ab       	std	Y+54, r24	; 0x36
    36e2:	3f c0       	rjmp	.+126    	; 0x3762 <HLCD_voidLcdWriteString+0x712>
	else if (__tmp > 65535)
    36e4:	68 ad       	ldd	r22, Y+56	; 0x38
    36e6:	79 ad       	ldd	r23, Y+57	; 0x39
    36e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    36ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	4f e7       	ldi	r20, 0x7F	; 127
    36f2:	57 e4       	ldi	r21, 0x47	; 71
    36f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36f8:	18 16       	cp	r1, r24
    36fa:	4c f5       	brge	.+82     	; 0x374e <HLCD_voidLcdWriteString+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    36fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    3700:	8e ad       	ldd	r24, Y+62	; 0x3e
    3702:	9f ad       	ldd	r25, Y+63	; 0x3f
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e2       	ldi	r20, 0x20	; 32
    370a:	51 e4       	ldi	r21, 0x41	; 65
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9f ab       	std	Y+55, r25	; 0x37
    3722:	8e ab       	std	Y+54, r24	; 0x36
    3724:	0f c0       	rjmp	.+30     	; 0x3744 <HLCD_voidLcdWriteString+0x6f4>
    3726:	80 e9       	ldi	r24, 0x90	; 144
    3728:	91 e0       	ldi	r25, 0x01	; 1
    372a:	9d ab       	std	Y+53, r25	; 0x35
    372c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    372e:	8c a9       	ldd	r24, Y+52	; 0x34
    3730:	9d a9       	ldd	r25, Y+53	; 0x35
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <HLCD_voidLcdWriteString+0x6e2>
    3736:	9d ab       	std	Y+53, r25	; 0x35
    3738:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373a:	8e a9       	ldd	r24, Y+54	; 0x36
    373c:	9f a9       	ldd	r25, Y+55	; 0x37
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	9f ab       	std	Y+55, r25	; 0x37
    3742:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3744:	8e a9       	ldd	r24, Y+54	; 0x36
    3746:	9f a9       	ldd	r25, Y+55	; 0x37
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	69 f7       	brne	.-38     	; 0x3726 <HLCD_voidLcdWriteString+0x6d6>
    374c:	bf c1       	rjmp	.+894    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374e:	68 ad       	ldd	r22, Y+56	; 0x38
    3750:	79 ad       	ldd	r23, Y+57	; 0x39
    3752:	8a ad       	ldd	r24, Y+58	; 0x3a
    3754:	9b ad       	ldd	r25, Y+59	; 0x3b
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	9f ab       	std	Y+55, r25	; 0x37
    3760:	8e ab       	std	Y+54, r24	; 0x36
    3762:	8e a9       	ldd	r24, Y+54	; 0x36
    3764:	9f a9       	ldd	r25, Y+55	; 0x37
    3766:	9b ab       	std	Y+51, r25	; 0x33
    3768:	8a ab       	std	Y+50, r24	; 0x32
    376a:	8a a9       	ldd	r24, Y+50	; 0x32
    376c:	9b a9       	ldd	r25, Y+51	; 0x33
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <HLCD_voidLcdWriteString+0x71e>
    3772:	9b ab       	std	Y+51, r25	; 0x33
    3774:	8a ab       	std	Y+50, r24	; 0x32
    3776:	aa c1       	rjmp	.+852    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3778:	fe 01       	movw	r30, r28
    377a:	ef 5b       	subi	r30, 0xBF	; 191
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	60 81       	ld	r22, Z
    3780:	71 81       	ldd	r23, Z+1	; 0x01
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	93 81       	ldd	r25, Z+3	; 0x03
    3786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	fe 01       	movw	r30, r28
    3790:	e0 5c       	subi	r30, 0xC0	; 192
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 83       	st	Z, r24
    3796:	fe 01       	movw	r30, r28
    3798:	e0 5c       	subi	r30, 0xC0	; 192
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37a0:	89 a9       	ldd	r24, Y+49	; 0x31
    37a2:	8a 95       	dec	r24
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <HLCD_voidLcdWriteString+0x752>
    37a6:	89 ab       	std	Y+49, r24	; 0x31
    37a8:	91 c1       	rjmp	.+802    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
		else if(counter==60)
    37aa:	fe 01       	movw	r30, r28
    37ac:	e5 58       	subi	r30, 0x85	; 133
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 81       	ld	r24, Z
    37b2:	8c 33       	cpi	r24, 0x3C	; 60
    37b4:	09 f0       	breq	.+2      	; 0x37b8 <HLCD_voidLcdWriteString+0x768>
    37b6:	c2 c0       	rjmp	.+388    	; 0x393c <HLCD_voidLcdWriteString+0x8ec>
				{HLCD_voidLcdcmd(0xD4);_delay_us(40);}
    37b8:	84 ed       	ldi	r24, 0xD4	; 212
    37ba:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	a0 e2       	ldi	r26, 0x20	; 32
    37c4:	b2 e4       	ldi	r27, 0x42	; 66
    37c6:	8d a7       	std	Y+45, r24	; 0x2d
    37c8:	9e a7       	std	Y+46, r25	; 0x2e
    37ca:	af a7       	std	Y+47, r26	; 0x2f
    37cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    37d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    37d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    37d4:	98 a9       	ldd	r25, Y+48	; 0x30
    37d6:	2b ea       	ldi	r18, 0xAB	; 171
    37d8:	3a ea       	ldi	r19, 0xAA	; 170
    37da:	4a ea       	ldi	r20, 0xAA	; 170
    37dc:	50 e4       	ldi	r21, 0x40	; 64
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	89 a7       	std	Y+41, r24	; 0x29
    37e8:	9a a7       	std	Y+42, r25	; 0x2a
    37ea:	ab a7       	std	Y+43, r26	; 0x2b
    37ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    37ee:	69 a5       	ldd	r22, Y+41	; 0x29
    37f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    37f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e8       	ldi	r20, 0x80	; 128
    37fc:	5f e3       	ldi	r21, 0x3F	; 63
    37fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3802:	88 23       	and	r24, r24
    3804:	1c f4       	brge	.+6      	; 0x380c <HLCD_voidLcdWriteString+0x7bc>
		__ticks = 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	88 a7       	std	Y+40, r24	; 0x28
    380a:	91 c0       	rjmp	.+290    	; 0x392e <HLCD_voidLcdWriteString+0x8de>
	else if (__tmp > 255)
    380c:	69 a5       	ldd	r22, Y+41	; 0x29
    380e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3810:	8b a5       	ldd	r24, Y+43	; 0x2b
    3812:	9c a5       	ldd	r25, Y+44	; 0x2c
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4f e7       	ldi	r20, 0x7F	; 127
    381a:	53 e4       	ldi	r21, 0x43	; 67
    381c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3820:	18 16       	cp	r1, r24
    3822:	0c f0       	brlt	.+2      	; 0x3826 <HLCD_voidLcdWriteString+0x7d6>
    3824:	7b c0       	rjmp	.+246    	; 0x391c <HLCD_voidLcdWriteString+0x8cc>
	{
		_delay_ms(__us / 1000.0);
    3826:	6d a5       	ldd	r22, Y+45	; 0x2d
    3828:	7e a5       	ldd	r23, Y+46	; 0x2e
    382a:	8f a5       	ldd	r24, Y+47	; 0x2f
    382c:	98 a9       	ldd	r25, Y+48	; 0x30
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a e7       	ldi	r20, 0x7A	; 122
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8c a3       	std	Y+36, r24	; 0x24
    3840:	9d a3       	std	Y+37, r25	; 0x25
    3842:	ae a3       	std	Y+38, r26	; 0x26
    3844:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	6c a1       	ldd	r22, Y+36	; 0x24
    3848:	7d a1       	ldd	r23, Y+37	; 0x25
    384a:	8e a1       	ldd	r24, Y+38	; 0x26
    384c:	9f a1       	ldd	r25, Y+39	; 0x27
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4a e7       	ldi	r20, 0x7A	; 122
    3854:	55 e4       	ldi	r21, 0x45	; 69
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	88 a3       	std	Y+32, r24	; 0x20
    3860:	99 a3       	std	Y+33, r25	; 0x21
    3862:	aa a3       	std	Y+34, r26	; 0x22
    3864:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3866:	68 a1       	ldd	r22, Y+32	; 0x20
    3868:	79 a1       	ldd	r23, Y+33	; 0x21
    386a:	8a a1       	ldd	r24, Y+34	; 0x22
    386c:	9b a1       	ldd	r25, Y+35	; 0x23
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	2c f4       	brge	.+10     	; 0x3888 <HLCD_voidLcdWriteString+0x838>
		__ticks = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9f 8f       	std	Y+31, r25	; 0x1f
    3884:	8e 8f       	std	Y+30, r24	; 0x1e
    3886:	3f c0       	rjmp	.+126    	; 0x3906 <HLCD_voidLcdWriteString+0x8b6>
	else if (__tmp > 65535)
    3888:	68 a1       	ldd	r22, Y+32	; 0x20
    388a:	79 a1       	ldd	r23, Y+33	; 0x21
    388c:	8a a1       	ldd	r24, Y+34	; 0x22
    388e:	9b a1       	ldd	r25, Y+35	; 0x23
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	4c f5       	brge	.+82     	; 0x38f2 <HLCD_voidLcdWriteString+0x8a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	6c a1       	ldd	r22, Y+36	; 0x24
    38a2:	7d a1       	ldd	r23, Y+37	; 0x25
    38a4:	8e a1       	ldd	r24, Y+38	; 0x26
    38a6:	9f a1       	ldd	r25, Y+39	; 0x27
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9f 8f       	std	Y+31, r25	; 0x1f
    38c6:	8e 8f       	std	Y+30, r24	; 0x1e
    38c8:	0f c0       	rjmp	.+30     	; 0x38e8 <HLCD_voidLcdWriteString+0x898>
    38ca:	80 e9       	ldi	r24, 0x90	; 144
    38cc:	91 e0       	ldi	r25, 0x01	; 1
    38ce:	9d 8f       	std	Y+29, r25	; 0x1d
    38d0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <HLCD_voidLcdWriteString+0x886>
    38da:	9d 8f       	std	Y+29, r25	; 0x1d
    38dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	9f 8f       	std	Y+31, r25	; 0x1f
    38e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	69 f7       	brne	.-38     	; 0x38ca <HLCD_voidLcdWriteString+0x87a>
    38f0:	ed c0       	rjmp	.+474    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f2:	68 a1       	ldd	r22, Y+32	; 0x20
    38f4:	79 a1       	ldd	r23, Y+33	; 0x21
    38f6:	8a a1       	ldd	r24, Y+34	; 0x22
    38f8:	9b a1       	ldd	r25, Y+35	; 0x23
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9f 8f       	std	Y+31, r25	; 0x1f
    3904:	8e 8f       	std	Y+30, r24	; 0x1e
    3906:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3908:	9f 8d       	ldd	r25, Y+31	; 0x1f
    390a:	9b 8f       	std	Y+27, r25	; 0x1b
    390c:	8a 8f       	std	Y+26, r24	; 0x1a
    390e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3910:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <HLCD_voidLcdWriteString+0x8c2>
    3916:	9b 8f       	std	Y+27, r25	; 0x1b
    3918:	8a 8f       	std	Y+26, r24	; 0x1a
    391a:	d8 c0       	rjmp	.+432    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    391c:	69 a5       	ldd	r22, Y+41	; 0x29
    391e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3920:	8b a5       	ldd	r24, Y+43	; 0x2b
    3922:	9c a5       	ldd	r25, Y+44	; 0x2c
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	88 a7       	std	Y+40, r24	; 0x28
    392e:	88 a5       	ldd	r24, Y+40	; 0x28
    3930:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3932:	89 8d       	ldd	r24, Y+25	; 0x19
    3934:	8a 95       	dec	r24
    3936:	f1 f7       	brne	.-4      	; 0x3934 <HLCD_voidLcdWriteString+0x8e4>
    3938:	89 8f       	std	Y+25, r24	; 0x19
    393a:	c8 c0       	rjmp	.+400    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
		else if(counter==80)
    393c:	fe 01       	movw	r30, r28
    393e:	e5 58       	subi	r30, 0x85	; 133
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	80 81       	ld	r24, Z
    3944:	80 35       	cpi	r24, 0x50	; 80
    3946:	09 f0       	breq	.+2      	; 0x394a <HLCD_voidLcdWriteString+0x8fa>
    3948:	c1 c0       	rjmp	.+386    	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
						{HLCD_voidLcdcmd(0x80);_delay_us(40);}
    394a:	80 e8       	ldi	r24, 0x80	; 128
    394c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	a0 e2       	ldi	r26, 0x20	; 32
    3956:	b2 e4       	ldi	r27, 0x42	; 66
    3958:	8d 8b       	std	Y+21, r24	; 0x15
    395a:	9e 8b       	std	Y+22, r25	; 0x16
    395c:	af 8b       	std	Y+23, r26	; 0x17
    395e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3960:	6d 89       	ldd	r22, Y+21	; 0x15
    3962:	7e 89       	ldd	r23, Y+22	; 0x16
    3964:	8f 89       	ldd	r24, Y+23	; 0x17
    3966:	98 8d       	ldd	r25, Y+24	; 0x18
    3968:	2b ea       	ldi	r18, 0xAB	; 171
    396a:	3a ea       	ldi	r19, 0xAA	; 170
    396c:	4a ea       	ldi	r20, 0xAA	; 170
    396e:	50 e4       	ldi	r21, 0x40	; 64
    3970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	89 8b       	std	Y+17, r24	; 0x11
    397a:	9a 8b       	std	Y+18, r25	; 0x12
    397c:	ab 8b       	std	Y+19, r26	; 0x13
    397e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3980:	69 89       	ldd	r22, Y+17	; 0x11
    3982:	7a 89       	ldd	r23, Y+18	; 0x12
    3984:	8b 89       	ldd	r24, Y+19	; 0x13
    3986:	9c 89       	ldd	r25, Y+20	; 0x14
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e8       	ldi	r20, 0x80	; 128
    398e:	5f e3       	ldi	r21, 0x3F	; 63
    3990:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3994:	88 23       	and	r24, r24
    3996:	1c f4       	brge	.+6      	; 0x399e <HLCD_voidLcdWriteString+0x94e>
		__ticks = 1;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	88 8b       	std	Y+16, r24	; 0x10
    399c:	91 c0       	rjmp	.+290    	; 0x3ac0 <HLCD_voidLcdWriteString+0xa70>
	else if (__tmp > 255)
    399e:	69 89       	ldd	r22, Y+17	; 0x11
    39a0:	7a 89       	ldd	r23, Y+18	; 0x12
    39a2:	8b 89       	ldd	r24, Y+19	; 0x13
    39a4:	9c 89       	ldd	r25, Y+20	; 0x14
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	4f e7       	ldi	r20, 0x7F	; 127
    39ac:	53 e4       	ldi	r21, 0x43	; 67
    39ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39b2:	18 16       	cp	r1, r24
    39b4:	0c f0       	brlt	.+2      	; 0x39b8 <HLCD_voidLcdWriteString+0x968>
    39b6:	7b c0       	rjmp	.+246    	; 0x3aae <HLCD_voidLcdWriteString+0xa5e>
	{
		_delay_ms(__us / 1000.0);
    39b8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ba:	7e 89       	ldd	r23, Y+22	; 0x16
    39bc:	8f 89       	ldd	r24, Y+23	; 0x17
    39be:	98 8d       	ldd	r25, Y+24	; 0x18
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a e7       	ldi	r20, 0x7A	; 122
    39c6:	54 e4       	ldi	r21, 0x44	; 68
    39c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	8c 87       	std	Y+12, r24	; 0x0c
    39d2:	9d 87       	std	Y+13, r25	; 0x0d
    39d4:	ae 87       	std	Y+14, r26	; 0x0e
    39d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    39da:	7d 85       	ldd	r23, Y+13	; 0x0d
    39dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    39de:	9f 85       	ldd	r25, Y+15	; 0x0f
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a e7       	ldi	r20, 0x7A	; 122
    39e6:	55 e4       	ldi	r21, 0x45	; 69
    39e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	88 87       	std	Y+8, r24	; 0x08
    39f2:	99 87       	std	Y+9, r25	; 0x09
    39f4:	aa 87       	std	Y+10, r26	; 0x0a
    39f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39f8:	68 85       	ldd	r22, Y+8	; 0x08
    39fa:	79 85       	ldd	r23, Y+9	; 0x09
    39fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    39fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	2c f4       	brge	.+10     	; 0x3a1a <HLCD_voidLcdWriteString+0x9ca>
		__ticks = 1;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	9f 83       	std	Y+7, r25	; 0x07
    3a16:	8e 83       	std	Y+6, r24	; 0x06
    3a18:	3f c0       	rjmp	.+126    	; 0x3a98 <HLCD_voidLcdWriteString+0xa48>
	else if (__tmp > 65535)
    3a1a:	68 85       	ldd	r22, Y+8	; 0x08
    3a1c:	79 85       	ldd	r23, Y+9	; 0x09
    3a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	3f ef       	ldi	r19, 0xFF	; 255
    3a26:	4f e7       	ldi	r20, 0x7F	; 127
    3a28:	57 e4       	ldi	r21, 0x47	; 71
    3a2a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a2e:	18 16       	cp	r1, r24
    3a30:	4c f5       	brge	.+82     	; 0x3a84 <HLCD_voidLcdWriteString+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a32:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a34:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a36:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a38:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e2       	ldi	r20, 0x20	; 32
    3a40:	51 e4       	ldi	r21, 0x41	; 65
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9f 83       	std	Y+7, r25	; 0x07
    3a58:	8e 83       	std	Y+6, r24	; 0x06
    3a5a:	0f c0       	rjmp	.+30     	; 0x3a7a <HLCD_voidLcdWriteString+0xa2a>
    3a5c:	80 e9       	ldi	r24, 0x90	; 144
    3a5e:	91 e0       	ldi	r25, 0x01	; 1
    3a60:	9d 83       	std	Y+5, r25	; 0x05
    3a62:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a64:	8c 81       	ldd	r24, Y+4	; 0x04
    3a66:	9d 81       	ldd	r25, Y+5	; 0x05
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <HLCD_voidLcdWriteString+0xa18>
    3a6c:	9d 83       	std	Y+5, r25	; 0x05
    3a6e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a70:	8e 81       	ldd	r24, Y+6	; 0x06
    3a72:	9f 81       	ldd	r25, Y+7	; 0x07
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	9f 83       	std	Y+7, r25	; 0x07
    3a78:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	69 f7       	brne	.-38     	; 0x3a5c <HLCD_voidLcdWriteString+0xa0c>
    3a82:	24 c0       	rjmp	.+72     	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a84:	68 85       	ldd	r22, Y+8	; 0x08
    3a86:	79 85       	ldd	r23, Y+9	; 0x09
    3a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9f 83       	std	Y+7, r25	; 0x07
    3a96:	8e 83       	std	Y+6, r24	; 0x06
    3a98:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9c:	9b 83       	std	Y+3, r25	; 0x03
    3a9e:	8a 83       	std	Y+2, r24	; 0x02
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <HLCD_voidLcdWriteString+0xa54>
    3aa8:	9b 83       	std	Y+3, r25	; 0x03
    3aaa:	8a 83       	std	Y+2, r24	; 0x02
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <HLCD_voidLcdWriteString+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3aae:	69 89       	ldd	r22, Y+17	; 0x11
    3ab0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	88 8b       	std	Y+16, r24	; 0x10
    3ac0:	88 89       	ldd	r24, Y+16	; 0x10
    3ac2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	8a 95       	dec	r24
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <HLCD_voidLcdWriteString+0xa76>
    3aca:	89 83       	std	Y+1, r24	; 0x01
void HLCD_voidLcdWriteString(u8* u8data,u8 u8copy_row,u8 u8copy_col)
{   u8 counter= u8copy_row*20+u8copy_col;
 	u8 * copy_of_data=u8data;
	HLCD_voidLcdSetAddress(u8copy_row,u8copy_col);
	_delay_us(40);
	while((*copy_of_data)!='\0')
    3acc:	fe 01       	movw	r30, r28
    3ace:	e7 58       	subi	r30, 0x87	; 135
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	01 90       	ld	r0, Z+
    3ad4:	f0 81       	ld	r31, Z
    3ad6:	e0 2d       	mov	r30, r0
    3ad8:	80 81       	ld	r24, Z
    3ada:	88 23       	and	r24, r24
    3adc:	09 f0       	breq	.+2      	; 0x3ae0 <HLCD_voidLcdWriteString+0xa90>
    3ade:	2c cc       	rjmp	.-1960   	; 0x3338 <HLCD_voidLcdWriteString+0x2e8>
				{HLCD_voidLcdcmd(0xD4);_delay_us(40);}
		else if(counter==80)
						{HLCD_voidLcdcmd(0x80);_delay_us(40);}
	}

}
    3ae0:	c1 58       	subi	r28, 0x81	; 129
    3ae2:	df 4f       	sbci	r29, 0xFF	; 255
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <HLCD_voidLcdWriteIntiger>:
void HLCD_voidLcdWriteIntiger(u32 u32data,u8 u8copy_row,u8 u8copy_col)
{   u8 counter=0;
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	c8 55       	subi	r28, 0x58	; 88
    3b06:	d0 40       	sbci	r29, 0x00	; 0
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	fe 01       	movw	r30, r28
    3b14:	ed 5a       	subi	r30, 0xAD	; 173
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	60 83       	st	Z, r22
    3b1a:	71 83       	std	Z+1, r23	; 0x01
    3b1c:	82 83       	std	Z+2, r24	; 0x02
    3b1e:	93 83       	std	Z+3, r25	; 0x03
    3b20:	fe 01       	movw	r30, r28
    3b22:	e9 5a       	subi	r30, 0xA9	; 169
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	40 83       	st	Z, r20
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e8 5a       	subi	r30, 0xA8	; 168
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	20 83       	st	Z, r18
    3b30:	fe 01       	movw	r30, r28
    3b32:	ee 5a       	subi	r30, 0xAE	; 174
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	10 82       	st	Z, r1
	voidDecodeDigit(u32data,data_arr);
    3b38:	fe 01       	movw	r30, r28
    3b3a:	ed 5a       	subi	r30, 0xAD	; 173
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	80 81       	ld	r24, Z
    3b40:	91 81       	ldd	r25, Z+1	; 0x01
    3b42:	a2 81       	ldd	r26, Z+2	; 0x02
    3b44:	b3 81       	ldd	r27, Z+3	; 0x03
    3b46:	22 e9       	ldi	r18, 0x92	; 146
    3b48:	31 e0       	ldi	r19, 0x01	; 1
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	a9 01       	movw	r20, r18
    3b50:	0e 94 c8 10 	call	0x2190	; 0x2190 <voidDecodeDigit>
    3b54:	fe 01       	movw	r30, r28
    3b56:	e3 5b       	subi	r30, 0xB3	; 179
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	a0 e2       	ldi	r26, 0x20	; 32
    3b60:	b2 e4       	ldi	r27, 0x42	; 66
    3b62:	80 83       	st	Z, r24
    3b64:	91 83       	std	Z+1, r25	; 0x01
    3b66:	a2 83       	std	Z+2, r26	; 0x02
    3b68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b6a:	8e 01       	movw	r16, r28
    3b6c:	07 5b       	subi	r16, 0xB7	; 183
    3b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b70:	fe 01       	movw	r30, r28
    3b72:	e3 5b       	subi	r30, 0xB3	; 179
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	2b ea       	ldi	r18, 0xAB	; 171
    3b80:	3a ea       	ldi	r19, 0xAA	; 170
    3b82:	4a ea       	ldi	r20, 0xAA	; 170
    3b84:	50 e4       	ldi	r21, 0x40	; 64
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	f8 01       	movw	r30, r16
    3b90:	80 83       	st	Z, r24
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	a2 83       	std	Z+2, r26	; 0x02
    3b96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e7 5b       	subi	r30, 0xB7	; 183
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	60 81       	ld	r22, Z
    3ba0:	71 81       	ldd	r23, Z+1	; 0x01
    3ba2:	82 81       	ldd	r24, Z+2	; 0x02
    3ba4:	93 81       	ldd	r25, Z+3	; 0x03
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e8       	ldi	r20, 0x80	; 128
    3bac:	5f e3       	ldi	r21, 0x3F	; 63
    3bae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3bb2:	88 23       	and	r24, r24
    3bb4:	34 f4       	brge	.+12     	; 0x3bc2 <HLCD_voidLcdWriteIntiger+0xca>
		__ticks = 1;
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e8 5b       	subi	r30, 0xB8	; 184
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	80 83       	st	Z, r24
    3bc0:	b4 c0       	rjmp	.+360    	; 0x3d2a <HLCD_voidLcdWriteIntiger+0x232>
	else if (__tmp > 255)
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	e7 5b       	subi	r30, 0xB7	; 183
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	60 81       	ld	r22, Z
    3bca:	71 81       	ldd	r23, Z+1	; 0x01
    3bcc:	82 81       	ldd	r24, Z+2	; 0x02
    3bce:	93 81       	ldd	r25, Z+3	; 0x03
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	4f e7       	ldi	r20, 0x7F	; 127
    3bd6:	53 e4       	ldi	r21, 0x43	; 67
    3bd8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3bdc:	18 16       	cp	r1, r24
    3bde:	0c f0       	brlt	.+2      	; 0x3be2 <HLCD_voidLcdWriteIntiger+0xea>
    3be0:	94 c0       	rjmp	.+296    	; 0x3d0a <HLCD_voidLcdWriteIntiger+0x212>
	{
		_delay_ms(__us / 1000.0);
    3be2:	fe 01       	movw	r30, r28
    3be4:	e3 5b       	subi	r30, 0xB3	; 179
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	4a e7       	ldi	r20, 0x7A	; 122
    3bf6:	54 e4       	ldi	r21, 0x44	; 68
    3bf8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	fe 01       	movw	r30, r28
    3c02:	ec 5b       	subi	r30, 0xBC	; 188
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 83       	st	Z, r24
    3c08:	91 83       	std	Z+1, r25	; 0x01
    3c0a:	a2 83       	std	Z+2, r26	; 0x02
    3c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0e:	8e 01       	movw	r16, r28
    3c10:	00 5c       	subi	r16, 0xC0	; 192
    3c12:	1f 4f       	sbci	r17, 0xFF	; 255
    3c14:	fe 01       	movw	r30, r28
    3c16:	ec 5b       	subi	r30, 0xBC	; 188
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	60 81       	ld	r22, Z
    3c1c:	71 81       	ldd	r23, Z+1	; 0x01
    3c1e:	82 81       	ldd	r24, Z+2	; 0x02
    3c20:	93 81       	ldd	r25, Z+3	; 0x03
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	4a e7       	ldi	r20, 0x7A	; 122
    3c28:	55 e4       	ldi	r21, 0x45	; 69
    3c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	f8 01       	movw	r30, r16
    3c34:	80 83       	st	Z, r24
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	a2 83       	std	Z+2, r26	; 0x02
    3c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	e0 5c       	subi	r30, 0xC0	; 192
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	60 81       	ld	r22, Z
    3c44:	71 81       	ldd	r23, Z+1	; 0x01
    3c46:	82 81       	ldd	r24, Z+2	; 0x02
    3c48:	93 81       	ldd	r25, Z+3	; 0x03
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	40 e8       	ldi	r20, 0x80	; 128
    3c50:	5f e3       	ldi	r21, 0x3F	; 63
    3c52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c56:	88 23       	and	r24, r24
    3c58:	2c f4       	brge	.+10     	; 0x3c64 <HLCD_voidLcdWriteIntiger+0x16c>
		__ticks = 1;
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	9f af       	std	Y+63, r25	; 0x3f
    3c60:	8e af       	std	Y+62, r24	; 0x3e
    3c62:	48 c0       	rjmp	.+144    	; 0x3cf4 <HLCD_voidLcdWriteIntiger+0x1fc>
	else if (__tmp > 65535)
    3c64:	fe 01       	movw	r30, r28
    3c66:	e0 5c       	subi	r30, 0xC0	; 192
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	60 81       	ld	r22, Z
    3c6c:	71 81       	ldd	r23, Z+1	; 0x01
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	93 81       	ldd	r25, Z+3	; 0x03
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	3f ef       	ldi	r19, 0xFF	; 255
    3c76:	4f e7       	ldi	r20, 0x7F	; 127
    3c78:	57 e4       	ldi	r21, 0x47	; 71
    3c7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c7e:	18 16       	cp	r1, r24
    3c80:	64 f5       	brge	.+88     	; 0x3cda <HLCD_voidLcdWriteIntiger+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c82:	fe 01       	movw	r30, r28
    3c84:	ec 5b       	subi	r30, 0xBC	; 188
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e2       	ldi	r20, 0x20	; 32
    3c96:	51 e4       	ldi	r21, 0x41	; 65
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	bc 01       	movw	r22, r24
    3ca2:	cd 01       	movw	r24, r26
    3ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	9f af       	std	Y+63, r25	; 0x3f
    3cae:	8e af       	std	Y+62, r24	; 0x3e
    3cb0:	0f c0       	rjmp	.+30     	; 0x3cd0 <HLCD_voidLcdWriteIntiger+0x1d8>
    3cb2:	80 e9       	ldi	r24, 0x90	; 144
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	9d af       	std	Y+61, r25	; 0x3d
    3cb8:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cba:	8c ad       	ldd	r24, Y+60	; 0x3c
    3cbc:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <HLCD_voidLcdWriteIntiger+0x1c6>
    3cc2:	9d af       	std	Y+61, r25	; 0x3d
    3cc4:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	9f af       	std	Y+63, r25	; 0x3f
    3cce:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	69 f7       	brne	.-38     	; 0x3cb2 <HLCD_voidLcdWriteIntiger+0x1ba>
    3cd8:	31 c0       	rjmp	.+98     	; 0x3d3c <HLCD_voidLcdWriteIntiger+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e0 5c       	subi	r30, 0xC0	; 192
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	60 81       	ld	r22, Z
    3ce2:	71 81       	ldd	r23, Z+1	; 0x01
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	93 81       	ldd	r25, Z+3	; 0x03
    3ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	9f af       	std	Y+63, r25	; 0x3f
    3cf2:	8e af       	std	Y+62, r24	; 0x3e
    3cf4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cf8:	9b af       	std	Y+59, r25	; 0x3b
    3cfa:	8a af       	std	Y+58, r24	; 0x3a
    3cfc:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cfe:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <HLCD_voidLcdWriteIntiger+0x208>
    3d04:	9b af       	std	Y+59, r25	; 0x3b
    3d06:	8a af       	std	Y+58, r24	; 0x3a
    3d08:	19 c0       	rjmp	.+50     	; 0x3d3c <HLCD_voidLcdWriteIntiger+0x244>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d0a:	8e 01       	movw	r16, r28
    3d0c:	08 5b       	subi	r16, 0xB8	; 184
    3d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d10:	fe 01       	movw	r30, r28
    3d12:	e7 5b       	subi	r30, 0xB7	; 183
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	60 81       	ld	r22, Z
    3d18:	71 81       	ldd	r23, Z+1	; 0x01
    3d1a:	82 81       	ldd	r24, Z+2	; 0x02
    3d1c:	93 81       	ldd	r25, Z+3	; 0x03
    3d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	f8 01       	movw	r30, r16
    3d28:	80 83       	st	Z, r24
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e8 5b       	subi	r30, 0xB8	; 184
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	89 af       	std	Y+57, r24	; 0x39
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d34:	89 ad       	ldd	r24, Y+57	; 0x39
    3d36:	8a 95       	dec	r24
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <HLCD_voidLcdWriteIntiger+0x23e>
    3d3a:	89 af       	std	Y+57, r24	; 0x39
	_delay_us(40);
    if(u8copy_col<=20)
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e8 5a       	subi	r30, 0xA8	; 168
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 81       	ld	r24, Z
    3d44:	85 31       	cpi	r24, 0x15	; 21
    3d46:	30 f5       	brcc	.+76     	; 0x3d94 <HLCD_voidLcdWriteIntiger+0x29c>
    {
	 counter= u8copy_row*20+u8copy_col;
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e9 5a       	subi	r30, 0xA9	; 169
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	80 81       	ld	r24, Z
    3d50:	88 2f       	mov	r24, r24
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9c 01       	movw	r18, r24
    3d56:	22 0f       	add	r18, r18
    3d58:	33 1f       	adc	r19, r19
    3d5a:	22 0f       	add	r18, r18
    3d5c:	33 1f       	adc	r19, r19
    3d5e:	c9 01       	movw	r24, r18
    3d60:	88 0f       	add	r24, r24
    3d62:	99 1f       	adc	r25, r25
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	82 0f       	add	r24, r18
    3d6a:	93 1f       	adc	r25, r19
    3d6c:	98 2f       	mov	r25, r24
    3d6e:	de 01       	movw	r26, r28
    3d70:	ae 5a       	subi	r26, 0xAE	; 174
    3d72:	bf 4f       	sbci	r27, 0xFF	; 255
    3d74:	fe 01       	movw	r30, r28
    3d76:	e8 5a       	subi	r30, 0xA8	; 168
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 81       	ld	r24, Z
    3d7c:	89 0f       	add	r24, r25
    3d7e:	8c 93       	st	X, r24
	 HLCD_voidLcdSetAddress(u8copy_row,u8copy_col);}
    3d80:	fe 01       	movw	r30, r28
    3d82:	e9 5a       	subi	r30, 0xA9	; 169
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	de 01       	movw	r26, r28
    3d88:	a8 5a       	subi	r26, 0xA8	; 168
    3d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	6c 91       	ld	r22, X
    3d90:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <HLCD_voidLcdSetAddress>
     if( count_num!=0){
    3d94:	80 91 b2 01 	lds	r24, 0x01B2
    3d98:	88 23       	and	r24, r24
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <HLCD_voidLcdWriteIntiger+0x2a6>
    3d9c:	23 c2       	rjmp	.+1094   	; 0x41e4 <HLCD_voidLcdWriteIntiger+0x6ec>
		for(s8 i=count_num-1;i>=0;i--)
    3d9e:	80 91 b2 01 	lds	r24, 0x01B2
    3da2:	81 50       	subi	r24, 0x01	; 1
    3da4:	fe 01       	movw	r30, r28
    3da6:	ef 5a       	subi	r30, 0xAF	; 175
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 83       	st	Z, r24
    3dac:	13 c2       	rjmp	.+1062   	; 0x41d4 <HLCD_voidLcdWriteIntiger+0x6dc>
		{
			HLCD_voidLcdWriteChar(data_arr[i]+48);
    3dae:	fe 01       	movw	r30, r28
    3db0:	ef 5a       	subi	r30, 0xAF	; 175
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	80 81       	ld	r24, Z
    3db6:	99 27       	eor	r25, r25
    3db8:	87 fd       	sbrc	r24, 7
    3dba:	90 95       	com	r25
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	ee 56       	subi	r30, 0x6E	; 110
    3dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc2:	80 81       	ld	r24, Z
    3dc4:	80 5d       	subi	r24, 0xD0	; 208
    3dc6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
			counter++;
    3dca:	de 01       	movw	r26, r28
    3dcc:	ae 5a       	subi	r26, 0xAE	; 174
    3dce:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ee 5a       	subi	r30, 0xAE	; 174
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	80 81       	ld	r24, Z
    3dd8:	8f 5f       	subi	r24, 0xFF	; 255
    3dda:	8c 93       	st	X, r24
			if(counter==20)
    3ddc:	fe 01       	movw	r30, r28
    3dde:	ee 5a       	subi	r30, 0xAE	; 174
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	84 31       	cpi	r24, 0x14	; 20
    3de6:	09 f0       	breq	.+2      	; 0x3dea <HLCD_voidLcdWriteIntiger+0x2f2>
    3de8:	76 c0       	rjmp	.+236    	; 0x3ed6 <HLCD_voidLcdWriteIntiger+0x3de>
			{HLCD_voidLcdcmd(FIRST_ROW);_delay_ms(40);}
    3dea:	80 e8       	ldi	r24, 0x80	; 128
    3dec:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	a0 e2       	ldi	r26, 0x20	; 32
    3df6:	b2 e4       	ldi	r27, 0x42	; 66
    3df8:	8d ab       	std	Y+53, r24	; 0x35
    3dfa:	9e ab       	std	Y+54, r25	; 0x36
    3dfc:	af ab       	std	Y+55, r26	; 0x37
    3dfe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	6d a9       	ldd	r22, Y+53	; 0x35
    3e02:	7e a9       	ldd	r23, Y+54	; 0x36
    3e04:	8f a9       	ldd	r24, Y+55	; 0x37
    3e06:	98 ad       	ldd	r25, Y+56	; 0x38
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a e7       	ldi	r20, 0x7A	; 122
    3e0e:	55 e4       	ldi	r21, 0x45	; 69
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	89 ab       	std	Y+49, r24	; 0x31
    3e1a:	9a ab       	std	Y+50, r25	; 0x32
    3e1c:	ab ab       	std	Y+51, r26	; 0x33
    3e1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e20:	69 a9       	ldd	r22, Y+49	; 0x31
    3e22:	7a a9       	ldd	r23, Y+50	; 0x32
    3e24:	8b a9       	ldd	r24, Y+51	; 0x33
    3e26:	9c a9       	ldd	r25, Y+52	; 0x34
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <HLCD_voidLcdWriteIntiger+0x34a>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	98 ab       	std	Y+48, r25	; 0x30
    3e3e:	8f a7       	std	Y+47, r24	; 0x2f
    3e40:	3f c0       	rjmp	.+126    	; 0x3ec0 <HLCD_voidLcdWriteIntiger+0x3c8>
	else if (__tmp > 65535)
    3e42:	69 a9       	ldd	r22, Y+49	; 0x31
    3e44:	7a a9       	ldd	r23, Y+50	; 0x32
    3e46:	8b a9       	ldd	r24, Y+51	; 0x33
    3e48:	9c a9       	ldd	r25, Y+52	; 0x34
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	3f ef       	ldi	r19, 0xFF	; 255
    3e4e:	4f e7       	ldi	r20, 0x7F	; 127
    3e50:	57 e4       	ldi	r21, 0x47	; 71
    3e52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e56:	18 16       	cp	r1, r24
    3e58:	4c f5       	brge	.+82     	; 0x3eac <HLCD_voidLcdWriteIntiger+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	6d a9       	ldd	r22, Y+53	; 0x35
    3e5c:	7e a9       	ldd	r23, Y+54	; 0x36
    3e5e:	8f a9       	ldd	r24, Y+55	; 0x37
    3e60:	98 ad       	ldd	r25, Y+56	; 0x38
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	bc 01       	movw	r22, r24
    3e74:	cd 01       	movw	r24, r26
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	98 ab       	std	Y+48, r25	; 0x30
    3e80:	8f a7       	std	Y+47, r24	; 0x2f
    3e82:	0f c0       	rjmp	.+30     	; 0x3ea2 <HLCD_voidLcdWriteIntiger+0x3aa>
    3e84:	80 e9       	ldi	r24, 0x90	; 144
    3e86:	91 e0       	ldi	r25, 0x01	; 1
    3e88:	9e a7       	std	Y+46, r25	; 0x2e
    3e8a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <HLCD_voidLcdWriteIntiger+0x398>
    3e94:	9e a7       	std	Y+46, r25	; 0x2e
    3e96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	98 ab       	std	Y+48, r25	; 0x30
    3ea0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ea4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <HLCD_voidLcdWriteIntiger+0x38c>
    3eaa:	8b c1       	rjmp	.+790    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	69 a9       	ldd	r22, Y+49	; 0x31
    3eae:	7a a9       	ldd	r23, Y+50	; 0x32
    3eb0:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb2:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	98 ab       	std	Y+48, r25	; 0x30
    3ebe:	8f a7       	std	Y+47, r24	; 0x2f
    3ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ec4:	9c a7       	std	Y+44, r25	; 0x2c
    3ec6:	8b a7       	std	Y+43, r24	; 0x2b
    3ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3eca:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <HLCD_voidLcdWriteIntiger+0x3d4>
    3ed0:	9c a7       	std	Y+44, r25	; 0x2c
    3ed2:	8b a7       	std	Y+43, r24	; 0x2b
    3ed4:	76 c1       	rjmp	.+748    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			else if(counter==40)
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	ee 5a       	subi	r30, 0xAE	; 174
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 81       	ld	r24, Z
    3ede:	88 32       	cpi	r24, 0x28	; 40
    3ee0:	09 f0       	breq	.+2      	; 0x3ee4 <HLCD_voidLcdWriteIntiger+0x3ec>
    3ee2:	76 c0       	rjmp	.+236    	; 0x3fd0 <HLCD_voidLcdWriteIntiger+0x4d8>
					{HLCD_voidLcdcmd(SECOND_ROW);_delay_ms(40);}
    3ee4:	80 ec       	ldi	r24, 0xC0	; 192
    3ee6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	a0 e2       	ldi	r26, 0x20	; 32
    3ef0:	b2 e4       	ldi	r27, 0x42	; 66
    3ef2:	8f a3       	std	Y+39, r24	; 0x27
    3ef4:	98 a7       	std	Y+40, r25	; 0x28
    3ef6:	a9 a7       	std	Y+41, r26	; 0x29
    3ef8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3efa:	6f a1       	ldd	r22, Y+39	; 0x27
    3efc:	78 a5       	ldd	r23, Y+40	; 0x28
    3efe:	89 a5       	ldd	r24, Y+41	; 0x29
    3f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	4a e7       	ldi	r20, 0x7A	; 122
    3f08:	55 e4       	ldi	r21, 0x45	; 69
    3f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	8b a3       	std	Y+35, r24	; 0x23
    3f14:	9c a3       	std	Y+36, r25	; 0x24
    3f16:	ad a3       	std	Y+37, r26	; 0x25
    3f18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f20:	9e a1       	ldd	r25, Y+38	; 0x26
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	40 e8       	ldi	r20, 0x80	; 128
    3f28:	5f e3       	ldi	r21, 0x3F	; 63
    3f2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f2e:	88 23       	and	r24, r24
    3f30:	2c f4       	brge	.+10     	; 0x3f3c <HLCD_voidLcdWriteIntiger+0x444>
		__ticks = 1;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	9a a3       	std	Y+34, r25	; 0x22
    3f38:	89 a3       	std	Y+33, r24	; 0x21
    3f3a:	3f c0       	rjmp	.+126    	; 0x3fba <HLCD_voidLcdWriteIntiger+0x4c2>
	else if (__tmp > 65535)
    3f3c:	6b a1       	ldd	r22, Y+35	; 0x23
    3f3e:	7c a1       	ldd	r23, Y+36	; 0x24
    3f40:	8d a1       	ldd	r24, Y+37	; 0x25
    3f42:	9e a1       	ldd	r25, Y+38	; 0x26
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	3f ef       	ldi	r19, 0xFF	; 255
    3f48:	4f e7       	ldi	r20, 0x7F	; 127
    3f4a:	57 e4       	ldi	r21, 0x47	; 71
    3f4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f50:	18 16       	cp	r1, r24
    3f52:	4c f5       	brge	.+82     	; 0x3fa6 <HLCD_voidLcdWriteIntiger+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f54:	6f a1       	ldd	r22, Y+39	; 0x27
    3f56:	78 a5       	ldd	r23, Y+40	; 0x28
    3f58:	89 a5       	ldd	r24, Y+41	; 0x29
    3f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e2       	ldi	r20, 0x20	; 32
    3f62:	51 e4       	ldi	r21, 0x41	; 65
    3f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	9a a3       	std	Y+34, r25	; 0x22
    3f7a:	89 a3       	std	Y+33, r24	; 0x21
    3f7c:	0f c0       	rjmp	.+30     	; 0x3f9c <HLCD_voidLcdWriteIntiger+0x4a4>
    3f7e:	80 e9       	ldi	r24, 0x90	; 144
    3f80:	91 e0       	ldi	r25, 0x01	; 1
    3f82:	98 a3       	std	Y+32, r25	; 0x20
    3f84:	8f 8f       	std	Y+31, r24	; 0x1f
    3f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f88:	98 a1       	ldd	r25, Y+32	; 0x20
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	f1 f7       	brne	.-4      	; 0x3f8a <HLCD_voidLcdWriteIntiger+0x492>
    3f8e:	98 a3       	std	Y+32, r25	; 0x20
    3f90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f92:	89 a1       	ldd	r24, Y+33	; 0x21
    3f94:	9a a1       	ldd	r25, Y+34	; 0x22
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	9a a3       	std	Y+34, r25	; 0x22
    3f9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3f9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	69 f7       	brne	.-38     	; 0x3f7e <HLCD_voidLcdWriteIntiger+0x486>
    3fa4:	0e c1       	rjmp	.+540    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fa8:	7c a1       	ldd	r23, Y+36	; 0x24
    3faa:	8d a1       	ldd	r24, Y+37	; 0x25
    3fac:	9e a1       	ldd	r25, Y+38	; 0x26
    3fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	9a a3       	std	Y+34, r25	; 0x22
    3fb8:	89 a3       	std	Y+33, r24	; 0x21
    3fba:	89 a1       	ldd	r24, Y+33	; 0x21
    3fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    3fbe:	9e 8f       	std	Y+30, r25	; 0x1e
    3fc0:	8d 8f       	std	Y+29, r24	; 0x1d
    3fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	f1 f7       	brne	.-4      	; 0x3fc6 <HLCD_voidLcdWriteIntiger+0x4ce>
    3fca:	9e 8f       	std	Y+30, r25	; 0x1e
    3fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    3fce:	f9 c0       	rjmp	.+498    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			else if(counter==60)
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	ee 5a       	subi	r30, 0xAE	; 174
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	8c 33       	cpi	r24, 0x3C	; 60
    3fda:	09 f0       	breq	.+2      	; 0x3fde <HLCD_voidLcdWriteIntiger+0x4e6>
    3fdc:	76 c0       	rjmp	.+236    	; 0x40ca <HLCD_voidLcdWriteIntiger+0x5d2>
					{HLCD_voidLcdcmd(THIRD_ROW);_delay_ms(40);}
    3fde:	84 e9       	ldi	r24, 0x94	; 148
    3fe0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	a0 e2       	ldi	r26, 0x20	; 32
    3fea:	b2 e4       	ldi	r27, 0x42	; 66
    3fec:	89 8f       	std	Y+25, r24	; 0x19
    3fee:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff0:	ab 8f       	std	Y+27, r26	; 0x1b
    3ff2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ffa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4a e7       	ldi	r20, 0x7A	; 122
    4002:	55 e4       	ldi	r21, 0x45	; 69
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	8d 8b       	std	Y+21, r24	; 0x15
    400e:	9e 8b       	std	Y+22, r25	; 0x16
    4010:	af 8b       	std	Y+23, r26	; 0x17
    4012:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4014:	6d 89       	ldd	r22, Y+21	; 0x15
    4016:	7e 89       	ldd	r23, Y+22	; 0x16
    4018:	8f 89       	ldd	r24, Y+23	; 0x17
    401a:	98 8d       	ldd	r25, Y+24	; 0x18
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	2c f4       	brge	.+10     	; 0x4036 <HLCD_voidLcdWriteIntiger+0x53e>
		__ticks = 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9c 8b       	std	Y+20, r25	; 0x14
    4032:	8b 8b       	std	Y+19, r24	; 0x13
    4034:	3f c0       	rjmp	.+126    	; 0x40b4 <HLCD_voidLcdWriteIntiger+0x5bc>
	else if (__tmp > 65535)
    4036:	6d 89       	ldd	r22, Y+21	; 0x15
    4038:	7e 89       	ldd	r23, Y+22	; 0x16
    403a:	8f 89       	ldd	r24, Y+23	; 0x17
    403c:	98 8d       	ldd	r25, Y+24	; 0x18
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	3f ef       	ldi	r19, 0xFF	; 255
    4042:	4f e7       	ldi	r20, 0x7F	; 127
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    404a:	18 16       	cp	r1, r24
    404c:	4c f5       	brge	.+82     	; 0x40a0 <HLCD_voidLcdWriteIntiger+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404e:	69 8d       	ldd	r22, Y+25	; 0x19
    4050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e2       	ldi	r20, 0x20	; 32
    405c:	51 e4       	ldi	r21, 0x41	; 65
    405e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	9c 8b       	std	Y+20, r25	; 0x14
    4074:	8b 8b       	std	Y+19, r24	; 0x13
    4076:	0f c0       	rjmp	.+30     	; 0x4096 <HLCD_voidLcdWriteIntiger+0x59e>
    4078:	80 e9       	ldi	r24, 0x90	; 144
    407a:	91 e0       	ldi	r25, 0x01	; 1
    407c:	9a 8b       	std	Y+18, r25	; 0x12
    407e:	89 8b       	std	Y+17, r24	; 0x11
    4080:	89 89       	ldd	r24, Y+17	; 0x11
    4082:	9a 89       	ldd	r25, Y+18	; 0x12
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <HLCD_voidLcdWriteIntiger+0x58c>
    4088:	9a 8b       	std	Y+18, r25	; 0x12
    408a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408c:	8b 89       	ldd	r24, Y+19	; 0x13
    408e:	9c 89       	ldd	r25, Y+20	; 0x14
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	9c 8b       	std	Y+20, r25	; 0x14
    4094:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	8b 89       	ldd	r24, Y+19	; 0x13
    4098:	9c 89       	ldd	r25, Y+20	; 0x14
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	69 f7       	brne	.-38     	; 0x4078 <HLCD_voidLcdWriteIntiger+0x580>
    409e:	91 c0       	rjmp	.+290    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a0:	6d 89       	ldd	r22, Y+21	; 0x15
    40a2:	7e 89       	ldd	r23, Y+22	; 0x16
    40a4:	8f 89       	ldd	r24, Y+23	; 0x17
    40a6:	98 8d       	ldd	r25, Y+24	; 0x18
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9c 8b       	std	Y+20, r25	; 0x14
    40b2:	8b 8b       	std	Y+19, r24	; 0x13
    40b4:	8b 89       	ldd	r24, Y+19	; 0x13
    40b6:	9c 89       	ldd	r25, Y+20	; 0x14
    40b8:	98 8b       	std	Y+16, r25	; 0x10
    40ba:	8f 87       	std	Y+15, r24	; 0x0f
    40bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40be:	98 89       	ldd	r25, Y+16	; 0x10
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <HLCD_voidLcdWriteIntiger+0x5c8>
    40c4:	98 8b       	std	Y+16, r25	; 0x10
    40c6:	8f 87       	std	Y+15, r24	; 0x0f
    40c8:	7c c0       	rjmp	.+248    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			else if(counter==80)
    40ca:	fe 01       	movw	r30, r28
    40cc:	ee 5a       	subi	r30, 0xAE	; 174
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	80 35       	cpi	r24, 0x50	; 80
    40d4:	09 f0       	breq	.+2      	; 0x40d8 <HLCD_voidLcdWriteIntiger+0x5e0>
    40d6:	75 c0       	rjmp	.+234    	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
							{HLCD_voidLcdcmd(0x80);_delay_ms(40);}
    40d8:	80 e8       	ldi	r24, 0x80	; 128
    40da:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	a0 e2       	ldi	r26, 0x20	; 32
    40e4:	b2 e4       	ldi	r27, 0x42	; 66
    40e6:	8b 87       	std	Y+11, r24	; 0x0b
    40e8:	9c 87       	std	Y+12, r25	; 0x0c
    40ea:	ad 87       	std	Y+13, r26	; 0x0d
    40ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    40f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	4a e7       	ldi	r20, 0x7A	; 122
    40fc:	55 e4       	ldi	r21, 0x45	; 69
    40fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	8f 83       	std	Y+7, r24	; 0x07
    4108:	98 87       	std	Y+8, r25	; 0x08
    410a:	a9 87       	std	Y+9, r26	; 0x09
    410c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    410e:	6f 81       	ldd	r22, Y+7	; 0x07
    4110:	78 85       	ldd	r23, Y+8	; 0x08
    4112:	89 85       	ldd	r24, Y+9	; 0x09
    4114:	9a 85       	ldd	r25, Y+10	; 0x0a
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	40 e8       	ldi	r20, 0x80	; 128
    411c:	5f e3       	ldi	r21, 0x3F	; 63
    411e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4122:	88 23       	and	r24, r24
    4124:	2c f4       	brge	.+10     	; 0x4130 <HLCD_voidLcdWriteIntiger+0x638>
		__ticks = 1;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	9e 83       	std	Y+6, r25	; 0x06
    412c:	8d 83       	std	Y+5, r24	; 0x05
    412e:	3f c0       	rjmp	.+126    	; 0x41ae <HLCD_voidLcdWriteIntiger+0x6b6>
	else if (__tmp > 65535)
    4130:	6f 81       	ldd	r22, Y+7	; 0x07
    4132:	78 85       	ldd	r23, Y+8	; 0x08
    4134:	89 85       	ldd	r24, Y+9	; 0x09
    4136:	9a 85       	ldd	r25, Y+10	; 0x0a
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	3f ef       	ldi	r19, 0xFF	; 255
    413c:	4f e7       	ldi	r20, 0x7F	; 127
    413e:	57 e4       	ldi	r21, 0x47	; 71
    4140:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4144:	18 16       	cp	r1, r24
    4146:	4c f5       	brge	.+82     	; 0x419a <HLCD_voidLcdWriteIntiger+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4148:	6b 85       	ldd	r22, Y+11	; 0x0b
    414a:	7c 85       	ldd	r23, Y+12	; 0x0c
    414c:	8d 85       	ldd	r24, Y+13	; 0x0d
    414e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e2       	ldi	r20, 0x20	; 32
    4156:	51 e4       	ldi	r21, 0x41	; 65
    4158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	bc 01       	movw	r22, r24
    4162:	cd 01       	movw	r24, r26
    4164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	9e 83       	std	Y+6, r25	; 0x06
    416e:	8d 83       	std	Y+5, r24	; 0x05
    4170:	0f c0       	rjmp	.+30     	; 0x4190 <HLCD_voidLcdWriteIntiger+0x698>
    4172:	80 e9       	ldi	r24, 0x90	; 144
    4174:	91 e0       	ldi	r25, 0x01	; 1
    4176:	9c 83       	std	Y+4, r25	; 0x04
    4178:	8b 83       	std	Y+3, r24	; 0x03
    417a:	8b 81       	ldd	r24, Y+3	; 0x03
    417c:	9c 81       	ldd	r25, Y+4	; 0x04
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	f1 f7       	brne	.-4      	; 0x417e <HLCD_voidLcdWriteIntiger+0x686>
    4182:	9c 83       	std	Y+4, r25	; 0x04
    4184:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	9e 81       	ldd	r25, Y+6	; 0x06
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	9e 83       	std	Y+6, r25	; 0x06
    418e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4190:	8d 81       	ldd	r24, Y+5	; 0x05
    4192:	9e 81       	ldd	r25, Y+6	; 0x06
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	69 f7       	brne	.-38     	; 0x4172 <HLCD_voidLcdWriteIntiger+0x67a>
    4198:	14 c0       	rjmp	.+40     	; 0x41c2 <HLCD_voidLcdWriteIntiger+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    419a:	6f 81       	ldd	r22, Y+7	; 0x07
    419c:	78 85       	ldd	r23, Y+8	; 0x08
    419e:	89 85       	ldd	r24, Y+9	; 0x09
    41a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e 83       	std	Y+6, r25	; 0x06
    41ac:	8d 83       	std	Y+5, r24	; 0x05
    41ae:	8d 81       	ldd	r24, Y+5	; 0x05
    41b0:	9e 81       	ldd	r25, Y+6	; 0x06
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <HLCD_voidLcdWriteIntiger+0x6c2>
    41be:	9a 83       	std	Y+2, r25	; 0x02
    41c0:	89 83       	std	Y+1, r24	; 0x01
    if(u8copy_col<=20)
    {
	 counter= u8copy_row*20+u8copy_col;
	 HLCD_voidLcdSetAddress(u8copy_row,u8copy_col);}
     if( count_num!=0){
		for(s8 i=count_num-1;i>=0;i--)
    41c2:	de 01       	movw	r26, r28
    41c4:	af 5a       	subi	r26, 0xAF	; 175
    41c6:	bf 4f       	sbci	r27, 0xFF	; 255
    41c8:	fe 01       	movw	r30, r28
    41ca:	ef 5a       	subi	r30, 0xAF	; 175
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	81 50       	subi	r24, 0x01	; 1
    41d2:	8c 93       	st	X, r24
    41d4:	fe 01       	movw	r30, r28
    41d6:	ef 5a       	subi	r30, 0xAF	; 175
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	88 23       	and	r24, r24
    41de:	0c f0       	brlt	.+2      	; 0x41e2 <HLCD_voidLcdWriteIntiger+0x6ea>
    41e0:	e6 cd       	rjmp	.-1076   	; 0x3dae <HLCD_voidLcdWriteIntiger+0x2b6>
    41e2:	03 c0       	rjmp	.+6      	; 0x41ea <HLCD_voidLcdWriteIntiger+0x6f2>
					{HLCD_voidLcdcmd(THIRD_ROW);_delay_ms(40);}
			else if(counter==80)
							{HLCD_voidLcdcmd(0x80);_delay_ms(40);}

		}}
     else  HLCD_voidLcdWriteChar(48);
    41e4:	80 e3       	ldi	r24, 0x30	; 48
    41e6:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		count_num=0;
    41ea:	10 92 b2 01 	sts	0x01B2, r1
}
    41ee:	c8 5a       	subi	r28, 0xA8	; 168
    41f0:	df 4f       	sbci	r29, 0xFF	; 255
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	cf 91       	pop	r28
    41fe:	df 91       	pop	r29
    4200:	1f 91       	pop	r17
    4202:	0f 91       	pop	r16
    4204:	08 95       	ret

00004206 <HLCD_voidLcdWriteCGRAM>:
//write in CGRAM
 static void HLCD_voidLcdWriteCGRAM(u8* u8data,u8 u8copy_char)
{
    4206:	df 93       	push	r29
    4208:	cf 93       	push	r28
    420a:	00 d0       	rcall	.+0      	; 0x420c <HLCD_voidLcdWriteCGRAM+0x6>
    420c:	00 d0       	rcall	.+0      	; 0x420e <HLCD_voidLcdWriteCGRAM+0x8>
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	9b 83       	std	Y+3, r25	; 0x03
    4214:	8a 83       	std	Y+2, r24	; 0x02
    4216:	6c 83       	std	Y+4, r22	; 0x04
HLCD_voidLcdcmd(CGRAM_ADD+(u8copy_char*8));
    4218:	8c 81       	ldd	r24, Y+4	; 0x04
    421a:	88 2f       	mov	r24, r24
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	08 96       	adiw	r24, 0x08	; 8
    4220:	88 0f       	add	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	88 0f       	add	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
for(u8 i=0;i<8;i++)
    4230:	19 82       	std	Y+1, r1	; 0x01
    4232:	0e c0       	rjmp	.+28     	; 0x4250 <HLCD_voidLcdWriteCGRAM+0x4a>
{
HLCD_voidLcdWriteChar(u8data[i]);
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	28 2f       	mov	r18, r24
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	fc 01       	movw	r30, r24
    4240:	e2 0f       	add	r30, r18
    4242:	f3 1f       	adc	r31, r19
    4244:	80 81       	ld	r24, Z
    4246:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
}
//write in CGRAM
 static void HLCD_voidLcdWriteCGRAM(u8* u8data,u8 u8copy_char)
{
HLCD_voidLcdcmd(CGRAM_ADD+(u8copy_char*8));
for(u8 i=0;i<8;i++)
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	8f 5f       	subi	r24, 0xFF	; 255
    424e:	89 83       	std	Y+1, r24	; 0x01
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	88 30       	cpi	r24, 0x08	; 8
    4254:	78 f3       	brcs	.-34     	; 0x4234 <HLCD_voidLcdWriteCGRAM+0x2e>
{
HLCD_voidLcdWriteChar(u8data[i]);
}

}
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <HLCD_voidLcdDraw>:
//TO DRAW
void HLCD_voidLcdDraw(u8* u8data,u8 u8copy_char,u8 u8copy_row,u8 u8copy_col)
{
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	00 d0       	rcall	.+0      	; 0x426a <HLCD_voidLcdDraw+0x6>
    426a:	00 d0       	rcall	.+0      	; 0x426c <HLCD_voidLcdDraw+0x8>
    426c:	0f 92       	push	r0
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	9a 83       	std	Y+2, r25	; 0x02
    4274:	89 83       	std	Y+1, r24	; 0x01
    4276:	6b 83       	std	Y+3, r22	; 0x03
    4278:	4c 83       	std	Y+4, r20	; 0x04
    427a:	2d 83       	std	Y+5, r18	; 0x05
  HLCD_voidLcdWriteCGRAM(u8data,u8copy_char);
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	9a 81       	ldd	r25, Y+2	; 0x02
    4280:	6b 81       	ldd	r22, Y+3	; 0x03
    4282:	0e 94 03 21 	call	0x4206	; 0x4206 <HLCD_voidLcdWriteCGRAM>
  HLCD_voidLcdSetAddress(u8copy_row,u8copy_col);
    4286:	8c 81       	ldd	r24, Y+4	; 0x04
    4288:	6d 81       	ldd	r22, Y+5	; 0x05
    428a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <HLCD_voidLcdSetAddress>
  HLCD_voidLcdWriteChar(u8copy_char);
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
  HLCD_voidLcdcmd(FIRST_ROW);
    4294:	80 e8       	ldi	r24, 0x80	; 128
    4296:	0e 94 78 11 	call	0x22f0	; 0x22f0 <HLCD_voidLcdcmd>
}
    429a:	0f 90       	pop	r0
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	cf 91       	pop	r28
    42a6:	df 91       	pop	r29
    42a8:	08 95       	ret

000042aa <LCD_u8WriteNum>:

u8 LCD_u8WriteNum( f64 real_num )
{
    42aa:	df 93       	push	r29
    42ac:	cf 93       	push	r28
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	a2 97       	sbiw	r28, 0x22	; 34
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	6e 8b       	std	Y+22, r22	; 0x16
    42c0:	7f 8b       	std	Y+23, r23	; 0x17
    42c2:	88 8f       	std	Y+24, r24	; 0x18
    42c4:	99 8f       	std	Y+25, r25	; 0x19
	s32 int_num, int_num_cpy = 1;	// integer part
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	a0 e0       	ldi	r26, 0x00	; 0
    42cc:	b0 e0       	ldi	r27, 0x00	; 0
    42ce:	8e 87       	std	Y+14, r24	; 0x0e
    42d0:	9f 87       	std	Y+15, r25	; 0x0f
    42d2:	a8 8b       	std	Y+16, r26	; 0x10
    42d4:	b9 8b       	std	Y+17, r27	; 0x11
	u8 ch;
	u8 signFlag = FALSE;
    42d6:	1c 86       	std	Y+12, r1	; 0x0c
	u32 dec_num;				// decimal part
	u8 dec_places = 3;			// number of decimal places in dec_num
    42d8:	83 e0       	ldi	r24, 0x03	; 3
    42da:	8f 83       	std	Y+7, r24	; 0x07
	u8 r = 0;					// rounded place
    42dc:	1e 82       	std	Y+6, r1	; 0x06
	u8 count = 0;				// written chars
    42de:	1d 82       	std	Y+5, r1	; 0x05

	signFlag = ( real_num < 0)? TRUE : FALSE;		// detect minus sign
    42e0:	1c 86       	std	Y+12, r1	; 0x0c
    42e2:	6e 89       	ldd	r22, Y+22	; 0x16
    42e4:	7f 89       	ldd	r23, Y+23	; 0x17
    42e6:	88 8d       	ldd	r24, Y+24	; 0x18
    42e8:	99 8d       	ldd	r25, Y+25	; 0x19
    42ea:	20 e0       	ldi	r18, 0x00	; 0
    42ec:	30 e0       	ldi	r19, 0x00	; 0
    42ee:	40 e0       	ldi	r20, 0x00	; 0
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42f6:	88 23       	and	r24, r24
    42f8:	14 f4       	brge	.+4      	; 0x42fe <LCD_u8WriteNum+0x54>
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	8c 87       	std	Y+12, r24	; 0x0c
	real_num *= (f64) (signFlag)? -1.0 : 1.0 ;			// absolute value
    42fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4300:	88 23       	and	r24, r24
    4302:	49 f0       	breq	.+18     	; 0x4316 <LCD_u8WriteNum+0x6c>
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f eb       	ldi	r21, 0xBF	; 191
    430c:	2e 8f       	std	Y+30, r18	; 0x1e
    430e:	3f 8f       	std	Y+31, r19	; 0x1f
    4310:	48 a3       	std	Y+32, r20	; 0x20
    4312:	59 a3       	std	Y+33, r21	; 0x21
    4314:	08 c0       	rjmp	.+16     	; 0x4326 <LCD_u8WriteNum+0x7c>
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	a0 e8       	ldi	r26, 0x80	; 128
    431c:	bf e3       	ldi	r27, 0x3F	; 63
    431e:	8e 8f       	std	Y+30, r24	; 0x1e
    4320:	9f 8f       	std	Y+31, r25	; 0x1f
    4322:	a8 a3       	std	Y+32, r26	; 0x20
    4324:	b9 a3       	std	Y+33, r27	; 0x21
    4326:	6e 89       	ldd	r22, Y+22	; 0x16
    4328:	7f 89       	ldd	r23, Y+23	; 0x17
    432a:	88 8d       	ldd	r24, Y+24	; 0x18
    432c:	99 8d       	ldd	r25, Y+25	; 0x19
    432e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4330:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4332:	48 a1       	ldd	r20, Y+32	; 0x20
    4334:	59 a1       	ldd	r21, Y+33	; 0x21
    4336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433a:	dc 01       	movw	r26, r24
    433c:	cb 01       	movw	r24, r22
    433e:	8e 8b       	std	Y+22, r24	; 0x16
    4340:	9f 8b       	std	Y+23, r25	; 0x17
    4342:	a8 8f       	std	Y+24, r26	; 0x18
    4344:	b9 8f       	std	Y+25, r27	; 0x19
	int_num = (s32) real_num;						// store integer part
    4346:	6e 89       	ldd	r22, Y+22	; 0x16
    4348:	7f 89       	ldd	r23, Y+23	; 0x17
    434a:	88 8d       	ldd	r24, Y+24	; 0x18
    434c:	99 8d       	ldd	r25, Y+25	; 0x19
    434e:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	8a 8b       	std	Y+18, r24	; 0x12
    4358:	9b 8b       	std	Y+19, r25	; 0x13
    435a:	ac 8b       	std	Y+20, r26	; 0x14
    435c:	bd 8b       	std	Y+21, r27	; 0x15
	real_num -= (f32) int_num;							// delete integer part from real_num
    435e:	6a 89       	ldd	r22, Y+18	; 0x12
    4360:	7b 89       	ldd	r23, Y+19	; 0x13
    4362:	8c 89       	ldd	r24, Y+20	; 0x14
    4364:	9d 89       	ldd	r25, Y+21	; 0x15
    4366:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    436a:	9b 01       	movw	r18, r22
    436c:	ac 01       	movw	r20, r24
    436e:	6e 89       	ldd	r22, Y+22	; 0x16
    4370:	7f 89       	ldd	r23, Y+23	; 0x17
    4372:	88 8d       	ldd	r24, Y+24	; 0x18
    4374:	99 8d       	ldd	r25, Y+25	; 0x19
    4376:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	8e 8b       	std	Y+22, r24	; 0x16
    4380:	9f 8b       	std	Y+23, r25	; 0x17
    4382:	a8 8f       	std	Y+24, r26	; 0x18
    4384:	b9 8f       	std	Y+25, r27	; 0x19
    4386:	10 c0       	rjmp	.+32     	; 0x43a8 <LCD_u8WriteNum+0xfe>

	// store decimal part:
	while( dec_places-- > 0 )
	{ real_num *= 10.0 ; }
    4388:	6e 89       	ldd	r22, Y+22	; 0x16
    438a:	7f 89       	ldd	r23, Y+23	; 0x17
    438c:	88 8d       	ldd	r24, Y+24	; 0x18
    438e:	99 8d       	ldd	r25, Y+25	; 0x19
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e2       	ldi	r20, 0x20	; 32
    4396:	51 e4       	ldi	r21, 0x41	; 65
    4398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	8e 8b       	std	Y+22, r24	; 0x16
    43a2:	9f 8b       	std	Y+23, r25	; 0x17
    43a4:	a8 8f       	std	Y+24, r26	; 0x18
    43a6:	b9 8f       	std	Y+25, r27	; 0x19
	real_num *= (f64) (signFlag)? -1.0 : 1.0 ;			// absolute value
	int_num = (s32) real_num;						// store integer part
	real_num -= (f32) int_num;							// delete integer part from real_num

	// store decimal part:
	while( dec_places-- > 0 )
    43a8:	9f 81       	ldd	r25, Y+7	; 0x07
    43aa:	9a a3       	std	Y+34, r25	; 0x22
    43ac:	aa a1       	ldd	r26, Y+34	; 0x22
    43ae:	aa 23       	and	r26, r26
    43b0:	11 f0       	breq	.+4      	; 0x43b6 <LCD_u8WriteNum+0x10c>
    43b2:	b1 e0       	ldi	r27, 0x01	; 1
    43b4:	ba a3       	std	Y+34, r27	; 0x22
    43b6:	8a a1       	ldd	r24, Y+34	; 0x22
    43b8:	9f 81       	ldd	r25, Y+7	; 0x07
    43ba:	91 50       	subi	r25, 0x01	; 1
    43bc:	9f 83       	std	Y+7, r25	; 0x07
    43be:	88 23       	and	r24, r24
    43c0:	19 f7       	brne	.-58     	; 0x4388 <LCD_u8WriteNum+0xde>
	{ real_num *= 10.0 ; }
	dec_num = (u32) real_num;
    43c2:	6e 89       	ldd	r22, Y+22	; 0x16
    43c4:	7f 89       	ldd	r23, Y+23	; 0x17
    43c6:	88 8d       	ldd	r24, Y+24	; 0x18
    43c8:	99 8d       	ldd	r25, Y+25	; 0x19
    43ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	88 87       	std	Y+8, r24	; 0x08
    43d4:	99 87       	std	Y+9, r25	; 0x09
    43d6:	aa 87       	std	Y+10, r26	; 0x0a
    43d8:	bb 87       	std	Y+11, r27	; 0x0b
	real_num -= (s32) real_num;
    43da:	6e 89       	ldd	r22, Y+22	; 0x16
    43dc:	7f 89       	ldd	r23, Y+23	; 0x17
    43de:	88 8d       	ldd	r24, Y+24	; 0x18
    43e0:	99 8d       	ldd	r25, Y+25	; 0x19
    43e2:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    43f2:	9b 01       	movw	r18, r22
    43f4:	ac 01       	movw	r20, r24
    43f6:	6e 89       	ldd	r22, Y+22	; 0x16
    43f8:	7f 89       	ldd	r23, Y+23	; 0x17
    43fa:	88 8d       	ldd	r24, Y+24	; 0x18
    43fc:	99 8d       	ldd	r25, Y+25	; 0x19
    43fe:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	8e 8b       	std	Y+22, r24	; 0x16
    4408:	9f 8b       	std	Y+23, r25	; 0x17
    440a:	a8 8f       	std	Y+24, r26	; 0x18
    440c:	b9 8f       	std	Y+25, r27	; 0x19
	real_num *= 10.0;
    440e:	6e 89       	ldd	r22, Y+22	; 0x16
    4410:	7f 89       	ldd	r23, Y+23	; 0x17
    4412:	88 8d       	ldd	r24, Y+24	; 0x18
    4414:	99 8d       	ldd	r25, Y+25	; 0x19
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e2       	ldi	r20, 0x20	; 32
    441c:	51 e4       	ldi	r21, 0x41	; 65
    441e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	8e 8b       	std	Y+22, r24	; 0x16
    4428:	9f 8b       	std	Y+23, r25	; 0x17
    442a:	a8 8f       	std	Y+24, r26	; 0x18
    442c:	b9 8f       	std	Y+25, r27	; 0x19
	r = (u8) real_num;
    442e:	6e 89       	ldd	r22, Y+22	; 0x16
    4430:	7f 89       	ldd	r23, Y+23	; 0x17
    4432:	88 8d       	ldd	r24, Y+24	; 0x18
    4434:	99 8d       	ldd	r25, Y+25	; 0x19
    4436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	8e 83       	std	Y+6, r24	; 0x06
	dec_num += (r >= 5)? 1 : 0;
    4440:	1a 8e       	std	Y+26, r1	; 0x1a
    4442:	1b 8e       	std	Y+27, r1	; 0x1b
    4444:	1c 8e       	std	Y+28, r1	; 0x1c
    4446:	1d 8e       	std	Y+29, r1	; 0x1d
    4448:	8e 81       	ldd	r24, Y+6	; 0x06
    444a:	85 30       	cpi	r24, 0x05	; 5
    444c:	40 f0       	brcs	.+16     	; 0x445e <LCD_u8WriteNum+0x1b4>
    444e:	21 e0       	ldi	r18, 0x01	; 1
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	50 e0       	ldi	r21, 0x00	; 0
    4456:	2a 8f       	std	Y+26, r18	; 0x1a
    4458:	3b 8f       	std	Y+27, r19	; 0x1b
    445a:	4c 8f       	std	Y+28, r20	; 0x1c
    445c:	5d 8f       	std	Y+29, r21	; 0x1d
    445e:	88 85       	ldd	r24, Y+8	; 0x08
    4460:	99 85       	ldd	r25, Y+9	; 0x09
    4462:	aa 85       	ldd	r26, Y+10	; 0x0a
    4464:	bb 85       	ldd	r27, Y+11	; 0x0b
    4466:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4468:	3b 8d       	ldd	r19, Y+27	; 0x1b
    446a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    446c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    446e:	82 0f       	add	r24, r18
    4470:	93 1f       	adc	r25, r19
    4472:	a4 1f       	adc	r26, r20
    4474:	b5 1f       	adc	r27, r21
    4476:	88 87       	std	Y+8, r24	; 0x08
    4478:	99 87       	std	Y+9, r25	; 0x09
    447a:	aa 87       	std	Y+10, r26	; 0x0a
    447c:	bb 87       	std	Y+11, r27	; 0x0b

	if( signFlag )
    447e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4480:	88 23       	and	r24, r24
    4482:	31 f0       	breq	.+12     	; 0x4490 <LCD_u8WriteNum+0x1e6>
	{
		HLCD_voidLcdWriteChar( '-' );
    4484:	8d e2       	ldi	r24, 0x2D	; 45
    4486:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		count++;
    448a:	8d 81       	ldd	r24, Y+5	; 0x05
    448c:	8f 5f       	subi	r24, 0xFF	; 255
    448e:	8d 83       	std	Y+5, r24	; 0x05
	}

	if( !int_num )
    4490:	8a 89       	ldd	r24, Y+18	; 0x12
    4492:	9b 89       	ldd	r25, Y+19	; 0x13
    4494:	ac 89       	ldd	r26, Y+20	; 0x14
    4496:	bd 89       	ldd	r27, Y+21	; 0x15
    4498:	00 97       	sbiw	r24, 0x00	; 0
    449a:	a1 05       	cpc	r26, r1
    449c:	b1 05       	cpc	r27, r1
    449e:	09 f0       	breq	.+2      	; 0x44a2 <LCD_u8WriteNum+0x1f8>
    44a0:	47 c0       	rjmp	.+142    	; 0x4530 <LCD_u8WriteNum+0x286>
	{
		HLCD_voidLcdWriteChar( '0' );
    44a2:	80 e3       	ldi	r24, 0x30	; 48
    44a4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		count++;
    44a8:	8d 81       	ldd	r24, Y+5	; 0x05
    44aa:	8f 5f       	subi	r24, 0xFF	; 255
    44ac:	8d 83       	std	Y+5, r24	; 0x05
    44ae:	40 c0       	rjmp	.+128    	; 0x4530 <LCD_u8WriteNum+0x286>
	}
	// storing the integer part reversed:
	while( int_num != 0 )
	{
		int_num_cpy *= 10;
    44b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    44b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    44b4:	a8 89       	ldd	r26, Y+16	; 0x10
    44b6:	b9 89       	ldd	r27, Y+17	; 0x11
    44b8:	2a e0       	ldi	r18, 0x0A	; 10
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	bc 01       	movw	r22, r24
    44c2:	cd 01       	movw	r24, r26
    44c4:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    44c8:	dc 01       	movw	r26, r24
    44ca:	cb 01       	movw	r24, r22
    44cc:	8e 87       	std	Y+14, r24	; 0x0e
    44ce:	9f 87       	std	Y+15, r25	; 0x0f
    44d0:	a8 8b       	std	Y+16, r26	; 0x10
    44d2:	b9 8b       	std	Y+17, r27	; 0x11
		int_num_cpy += int_num % 10;
    44d4:	8a 89       	ldd	r24, Y+18	; 0x12
    44d6:	9b 89       	ldd	r25, Y+19	; 0x13
    44d8:	ac 89       	ldd	r26, Y+20	; 0x14
    44da:	bd 89       	ldd	r27, Y+21	; 0x15
    44dc:	2a e0       	ldi	r18, 0x0A	; 10
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	40 e0       	ldi	r20, 0x00	; 0
    44e2:	50 e0       	ldi	r21, 0x00	; 0
    44e4:	bc 01       	movw	r22, r24
    44e6:	cd 01       	movw	r24, r26
    44e8:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__divmodsi4>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	9c 01       	movw	r18, r24
    44f2:	ad 01       	movw	r20, r26
    44f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    44f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    44f8:	a8 89       	ldd	r26, Y+16	; 0x10
    44fa:	b9 89       	ldd	r27, Y+17	; 0x11
    44fc:	82 0f       	add	r24, r18
    44fe:	93 1f       	adc	r25, r19
    4500:	a4 1f       	adc	r26, r20
    4502:	b5 1f       	adc	r27, r21
    4504:	8e 87       	std	Y+14, r24	; 0x0e
    4506:	9f 87       	std	Y+15, r25	; 0x0f
    4508:	a8 8b       	std	Y+16, r26	; 0x10
    450a:	b9 8b       	std	Y+17, r27	; 0x11
		int_num /= 10;
    450c:	8a 89       	ldd	r24, Y+18	; 0x12
    450e:	9b 89       	ldd	r25, Y+19	; 0x13
    4510:	ac 89       	ldd	r26, Y+20	; 0x14
    4512:	bd 89       	ldd	r27, Y+21	; 0x15
    4514:	2a e0       	ldi	r18, 0x0A	; 10
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	50 e0       	ldi	r21, 0x00	; 0
    451c:	bc 01       	movw	r22, r24
    451e:	cd 01       	movw	r24, r26
    4520:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__divmodsi4>
    4524:	da 01       	movw	r26, r20
    4526:	c9 01       	movw	r24, r18
    4528:	8a 8b       	std	Y+18, r24	; 0x12
    452a:	9b 8b       	std	Y+19, r25	; 0x13
    452c:	ac 8b       	std	Y+20, r26	; 0x14
    452e:	bd 8b       	std	Y+21, r27	; 0x15
	{
		HLCD_voidLcdWriteChar( '0' );
		count++;
	}
	// storing the integer part reversed:
	while( int_num != 0 )
    4530:	8a 89       	ldd	r24, Y+18	; 0x12
    4532:	9b 89       	ldd	r25, Y+19	; 0x13
    4534:	ac 89       	ldd	r26, Y+20	; 0x14
    4536:	bd 89       	ldd	r27, Y+21	; 0x15
    4538:	00 97       	sbiw	r24, 0x00	; 0
    453a:	a1 05       	cpc	r26, r1
    453c:	b1 05       	cpc	r27, r1
    453e:	09 f0       	breq	.+2      	; 0x4542 <LCD_u8WriteNum+0x298>
    4540:	b7 cf       	rjmp	.-146    	; 0x44b0 <LCD_u8WriteNum+0x206>
    4542:	28 c0       	rjmp	.+80     	; 0x4594 <LCD_u8WriteNum+0x2ea>
		int_num /= 10;
	}
	// displaying the integer part:
	while( int_num_cpy != 1 )
	{
		ch = int_num_cpy % 10 + '0';
    4544:	8e 85       	ldd	r24, Y+14	; 0x0e
    4546:	9f 85       	ldd	r25, Y+15	; 0x0f
    4548:	a8 89       	ldd	r26, Y+16	; 0x10
    454a:	b9 89       	ldd	r27, Y+17	; 0x11
    454c:	2a e0       	ldi	r18, 0x0A	; 10
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e0       	ldi	r20, 0x00	; 0
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	bc 01       	movw	r22, r24
    4556:	cd 01       	movw	r24, r26
    4558:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__divmodsi4>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	80 5d       	subi	r24, 0xD0	; 208
    4562:	8d 87       	std	Y+13, r24	; 0x0d
		HLCD_voidLcdWriteChar( ch );
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		count++;
    456a:	8d 81       	ldd	r24, Y+5	; 0x05
    456c:	8f 5f       	subi	r24, 0xFF	; 255
    456e:	8d 83       	std	Y+5, r24	; 0x05
		int_num_cpy /= 10;
    4570:	8e 85       	ldd	r24, Y+14	; 0x0e
    4572:	9f 85       	ldd	r25, Y+15	; 0x0f
    4574:	a8 89       	ldd	r26, Y+16	; 0x10
    4576:	b9 89       	ldd	r27, Y+17	; 0x11
    4578:	2a e0       	ldi	r18, 0x0A	; 10
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e0       	ldi	r20, 0x00	; 0
    457e:	50 e0       	ldi	r21, 0x00	; 0
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 57 3b 	call	0x76ae	; 0x76ae <__divmodsi4>
    4588:	da 01       	movw	r26, r20
    458a:	c9 01       	movw	r24, r18
    458c:	8e 87       	std	Y+14, r24	; 0x0e
    458e:	9f 87       	std	Y+15, r25	; 0x0f
    4590:	a8 8b       	std	Y+16, r26	; 0x10
    4592:	b9 8b       	std	Y+17, r27	; 0x11
		int_num_cpy *= 10;
		int_num_cpy += int_num % 10;
		int_num /= 10;
	}
	// displaying the integer part:
	while( int_num_cpy != 1 )
    4594:	8e 85       	ldd	r24, Y+14	; 0x0e
    4596:	9f 85       	ldd	r25, Y+15	; 0x0f
    4598:	a8 89       	ldd	r26, Y+16	; 0x10
    459a:	b9 89       	ldd	r27, Y+17	; 0x11
    459c:	81 30       	cpi	r24, 0x01	; 1
    459e:	91 05       	cpc	r25, r1
    45a0:	a1 05       	cpc	r26, r1
    45a2:	b1 05       	cpc	r27, r1
    45a4:	79 f6       	brne	.-98     	; 0x4544 <LCD_u8WriteNum+0x29a>
		HLCD_voidLcdWriteChar( ch );
		count++;
		int_num_cpy /= 10;
	}
	// displaying the decimal part:
	if( dec_num )
    45a6:	88 85       	ldd	r24, Y+8	; 0x08
    45a8:	99 85       	ldd	r25, Y+9	; 0x09
    45aa:	aa 85       	ldd	r26, Y+10	; 0x0a
    45ac:	bb 85       	ldd	r27, Y+11	; 0x0b
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	a1 05       	cpc	r26, r1
    45b2:	b1 05       	cpc	r27, r1
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <LCD_u8WriteNum+0x30e>
    45b6:	85 c0       	rjmp	.+266    	; 0x46c2 <LCD_u8WriteNum+0x418>
	{
		u32 dec_num_cpy = 0;
    45b8:	19 82       	std	Y+1, r1	; 0x01
    45ba:	1a 82       	std	Y+2, r1	; 0x02
    45bc:	1b 82       	std	Y+3, r1	; 0x03
    45be:	1c 82       	std	Y+4, r1	; 0x04
    45c0:	40 c0       	rjmp	.+128    	; 0x4642 <LCD_u8WriteNum+0x398>
		while( dec_num != 0 )
		{
			dec_num_cpy *= 10;
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	9a 81       	ldd	r25, Y+2	; 0x02
    45c6:	ab 81       	ldd	r26, Y+3	; 0x03
    45c8:	bc 81       	ldd	r27, Y+4	; 0x04
    45ca:	2a e0       	ldi	r18, 0x0A	; 10
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	40 e0       	ldi	r20, 0x00	; 0
    45d0:	50 e0       	ldi	r21, 0x00	; 0
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	89 83       	std	Y+1, r24	; 0x01
    45e0:	9a 83       	std	Y+2, r25	; 0x02
    45e2:	ab 83       	std	Y+3, r26	; 0x03
    45e4:	bc 83       	std	Y+4, r27	; 0x04
			dec_num_cpy += dec_num % 10;
    45e6:	88 85       	ldd	r24, Y+8	; 0x08
    45e8:	99 85       	ldd	r25, Y+9	; 0x09
    45ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    45ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    45ee:	2a e0       	ldi	r18, 0x0A	; 10
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e0       	ldi	r20, 0x00	; 0
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	bc 01       	movw	r22, r24
    45f8:	cd 01       	movw	r24, r26
    45fa:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	9c 01       	movw	r18, r24
    4604:	ad 01       	movw	r20, r26
    4606:	89 81       	ldd	r24, Y+1	; 0x01
    4608:	9a 81       	ldd	r25, Y+2	; 0x02
    460a:	ab 81       	ldd	r26, Y+3	; 0x03
    460c:	bc 81       	ldd	r27, Y+4	; 0x04
    460e:	82 0f       	add	r24, r18
    4610:	93 1f       	adc	r25, r19
    4612:	a4 1f       	adc	r26, r20
    4614:	b5 1f       	adc	r27, r21
    4616:	89 83       	std	Y+1, r24	; 0x01
    4618:	9a 83       	std	Y+2, r25	; 0x02
    461a:	ab 83       	std	Y+3, r26	; 0x03
    461c:	bc 83       	std	Y+4, r27	; 0x04
			dec_num /= 10;
    461e:	88 85       	ldd	r24, Y+8	; 0x08
    4620:	99 85       	ldd	r25, Y+9	; 0x09
    4622:	aa 85       	ldd	r26, Y+10	; 0x0a
    4624:	bb 85       	ldd	r27, Y+11	; 0x0b
    4626:	2a e0       	ldi	r18, 0x0A	; 10
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	bc 01       	movw	r22, r24
    4630:	cd 01       	movw	r24, r26
    4632:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    4636:	da 01       	movw	r26, r20
    4638:	c9 01       	movw	r24, r18
    463a:	88 87       	std	Y+8, r24	; 0x08
    463c:	99 87       	std	Y+9, r25	; 0x09
    463e:	aa 87       	std	Y+10, r26	; 0x0a
    4640:	bb 87       	std	Y+11, r27	; 0x0b
	}
	// displaying the decimal part:
	if( dec_num )
	{
		u32 dec_num_cpy = 0;
		while( dec_num != 0 )
    4642:	88 85       	ldd	r24, Y+8	; 0x08
    4644:	99 85       	ldd	r25, Y+9	; 0x09
    4646:	aa 85       	ldd	r26, Y+10	; 0x0a
    4648:	bb 85       	ldd	r27, Y+11	; 0x0b
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	a1 05       	cpc	r26, r1
    464e:	b1 05       	cpc	r27, r1
    4650:	09 f0       	breq	.+2      	; 0x4654 <LCD_u8WriteNum+0x3aa>
    4652:	b7 cf       	rjmp	.-146    	; 0x45c2 <LCD_u8WriteNum+0x318>
		{
			dec_num_cpy *= 10;
			dec_num_cpy += dec_num % 10;
			dec_num /= 10;
		}
		HLCD_voidLcdWriteChar( '.' );
    4654:	8e e2       	ldi	r24, 0x2E	; 46
    4656:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
		count++;
    465a:	8d 81       	ldd	r24, Y+5	; 0x05
    465c:	8f 5f       	subi	r24, 0xFF	; 255
    465e:	8d 83       	std	Y+5, r24	; 0x05
    4660:	28 c0       	rjmp	.+80     	; 0x46b2 <LCD_u8WriteNum+0x408>
		while( dec_num_cpy != 0 )
		{
			ch = dec_num_cpy % 10 + '0';
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
    4666:	ab 81       	ldd	r26, Y+3	; 0x03
    4668:	bc 81       	ldd	r27, Y+4	; 0x04
    466a:	2a e0       	ldi	r18, 0x0A	; 10
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e0       	ldi	r20, 0x00	; 0
    4670:	50 e0       	ldi	r21, 0x00	; 0
    4672:	bc 01       	movw	r22, r24
    4674:	cd 01       	movw	r24, r26
    4676:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	80 5d       	subi	r24, 0xD0	; 208
    4680:	8d 87       	std	Y+13, r24	; 0x0d
			HLCD_voidLcdWriteChar( ch );
    4682:	8d 85       	ldd	r24, Y+13	; 0x0d
    4684:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <HLCD_voidLcdWriteChar>
			count++;
    4688:	8d 81       	ldd	r24, Y+5	; 0x05
    468a:	8f 5f       	subi	r24, 0xFF	; 255
    468c:	8d 83       	std	Y+5, r24	; 0x05
			dec_num_cpy /= 10;
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	9a 81       	ldd	r25, Y+2	; 0x02
    4692:	ab 81       	ldd	r26, Y+3	; 0x03
    4694:	bc 81       	ldd	r27, Y+4	; 0x04
    4696:	2a e0       	ldi	r18, 0x0A	; 10
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	40 e0       	ldi	r20, 0x00	; 0
    469c:	50 e0       	ldi	r21, 0x00	; 0
    469e:	bc 01       	movw	r22, r24
    46a0:	cd 01       	movw	r24, r26
    46a2:	0e 94 35 3b 	call	0x766a	; 0x766a <__udivmodsi4>
    46a6:	da 01       	movw	r26, r20
    46a8:	c9 01       	movw	r24, r18
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	9a 83       	std	Y+2, r25	; 0x02
    46ae:	ab 83       	std	Y+3, r26	; 0x03
    46b0:	bc 83       	std	Y+4, r27	; 0x04
			dec_num_cpy += dec_num % 10;
			dec_num /= 10;
		}
		HLCD_voidLcdWriteChar( '.' );
		count++;
		while( dec_num_cpy != 0 )
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	9a 81       	ldd	r25, Y+2	; 0x02
    46b6:	ab 81       	ldd	r26, Y+3	; 0x03
    46b8:	bc 81       	ldd	r27, Y+4	; 0x04
    46ba:	00 97       	sbiw	r24, 0x00	; 0
    46bc:	a1 05       	cpc	r26, r1
    46be:	b1 05       	cpc	r27, r1
    46c0:	81 f6       	brne	.-96     	; 0x4662 <LCD_u8WriteNum+0x3b8>
			HLCD_voidLcdWriteChar( ch );
			count++;
			dec_num_cpy /= 10;
		}
	}
	return count;
    46c2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    46c4:	a2 96       	adiw	r28, 0x22	; 34
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	f8 94       	cli
    46ca:	de bf       	out	0x3e, r29	; 62
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	cd bf       	out	0x3d, r28	; 61
    46d0:	cf 91       	pop	r28
    46d2:	df 91       	pop	r29
    46d4:	08 95       	ret

000046d6 <PWM_voidPWM_run>:
#include "PWM_Private.h"
#include "DIO_interface.h"


void PWM_voidPWM_run(u8 frequency,u8 channel )
{
    46d6:	df 93       	push	r29
    46d8:	cf 93       	push	r28
    46da:	00 d0       	rcall	.+0      	; 0x46dc <PWM_voidPWM_run+0x6>
    46dc:	00 d0       	rcall	.+0      	; 0x46de <PWM_voidPWM_run+0x8>
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	6a 83       	std	Y+2, r22	; 0x02
        /*setting timer 1 mode-->14 */
    	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    46e6:	af e4       	ldi	r26, 0x4F	; 79
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	ef e4       	ldi	r30, 0x4F	; 79
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	80 81       	ld	r24, Z
    46f0:	8e 7f       	andi	r24, 0xFE	; 254
    46f2:	8c 93       	st	X, r24
    	SET_BIT(TCCR1A,TCCR1A_WGM11);
    46f4:	af e4       	ldi	r26, 0x4F	; 79
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	ef e4       	ldi	r30, 0x4F	; 79
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	80 81       	ld	r24, Z
    46fe:	82 60       	ori	r24, 0x02	; 2
    4700:	8c 93       	st	X, r24
    	SET_BIT(TCCR1B,TCCR1B_WGM12);
    4702:	ae e4       	ldi	r26, 0x4E	; 78
    4704:	b0 e0       	ldi	r27, 0x00	; 0
    4706:	ee e4       	ldi	r30, 0x4E	; 78
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	80 81       	ld	r24, Z
    470c:	88 60       	ori	r24, 0x08	; 8
    470e:	8c 93       	st	X, r24
	   	SET_BIT(TCCR1B,TCCR1B_WGM13);
    4710:	ae e4       	ldi	r26, 0x4E	; 78
    4712:	b0 e0       	ldi	r27, 0x00	; 0
    4714:	ee e4       	ldi	r30, 0x4E	; 78
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	80 81       	ld	r24, Z
    471a:	80 61       	ori	r24, 0x10	; 16
    471c:	8c 93       	st	X, r24

        /*****************************/
         /*setting the compare mode*/
        if(channel == PWM_CHANNEL_1)
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	81 30       	cpi	r24, 0x01	; 1
    4722:	71 f4       	brne	.+28     	; 0x4740 <PWM_voidPWM_run+0x6a>
        {
			CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    4724:	af e4       	ldi	r26, 0x4F	; 79
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	ef e4       	ldi	r30, 0x4F	; 79
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	80 81       	ld	r24, Z
    472e:	8f 7b       	andi	r24, 0xBF	; 191
    4730:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_COM1A1);
    4732:	af e4       	ldi	r26, 0x4F	; 79
    4734:	b0 e0       	ldi	r27, 0x00	; 0
    4736:	ef e4       	ldi	r30, 0x4F	; 79
    4738:	f0 e0       	ldi	r31, 0x00	; 0
    473a:	80 81       	ld	r24, Z
    473c:	80 68       	ori	r24, 0x80	; 128
    473e:	8c 93       	st	X, r24
        }
         if(channel == PWM_CHANNEL_2)
    4740:	8a 81       	ldd	r24, Y+2	; 0x02
    4742:	82 30       	cpi	r24, 0x02	; 2
    4744:	71 f4       	brne	.+28     	; 0x4762 <PWM_voidPWM_run+0x8c>
        {
			CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    4746:	af e4       	ldi	r26, 0x4F	; 79
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	ef e4       	ldi	r30, 0x4F	; 79
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	80 81       	ld	r24, Z
    4750:	8f 7d       	andi	r24, 0xDF	; 223
    4752:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,TCCR1A_COM1B1);
    4754:	af e4       	ldi	r26, 0x4F	; 79
    4756:	b0 e0       	ldi	r27, 0x00	; 0
    4758:	ef e4       	ldi	r30, 0x4F	; 79
    475a:	f0 e0       	ldi	r31, 0x00	; 0
    475c:	80 81       	ld	r24, Z
    475e:	80 61       	ori	r24, 0x10	; 16
    4760:	8c 93       	st	X, r24
        }
        switch (frequency)
    4762:	89 81       	ldd	r24, Y+1	; 0x01
    4764:	28 2f       	mov	r18, r24
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	3c 83       	std	Y+4, r19	; 0x04
    476a:	2b 83       	std	Y+3, r18	; 0x03
    476c:	8b 81       	ldd	r24, Y+3	; 0x03
    476e:	9c 81       	ldd	r25, Y+4	; 0x04
    4770:	8a 30       	cpi	r24, 0x0A	; 10
    4772:	91 05       	cpc	r25, r1
    4774:	09 f4       	brne	.+2      	; 0x4778 <PWM_voidPWM_run+0xa2>
    4776:	d1 c0       	rjmp	.+418    	; 0x491a <PWM_voidPWM_run+0x244>
    4778:	2b 81       	ldd	r18, Y+3	; 0x03
    477a:	3c 81       	ldd	r19, Y+4	; 0x04
    477c:	2b 30       	cpi	r18, 0x0B	; 11
    477e:	31 05       	cpc	r19, r1
    4780:	0c f0       	brlt	.+2      	; 0x4784 <PWM_voidPWM_run+0xae>
    4782:	43 c0       	rjmp	.+134    	; 0x480a <PWM_voidPWM_run+0x134>
    4784:	8b 81       	ldd	r24, Y+3	; 0x03
    4786:	9c 81       	ldd	r25, Y+4	; 0x04
    4788:	85 30       	cpi	r24, 0x05	; 5
    478a:	91 05       	cpc	r25, r1
    478c:	09 f4       	brne	.+2      	; 0x4790 <PWM_voidPWM_run+0xba>
    478e:	a2 c0       	rjmp	.+324    	; 0x48d4 <PWM_voidPWM_run+0x1fe>
    4790:	2b 81       	ldd	r18, Y+3	; 0x03
    4792:	3c 81       	ldd	r19, Y+4	; 0x04
    4794:	26 30       	cpi	r18, 0x06	; 6
    4796:	31 05       	cpc	r19, r1
    4798:	fc f4       	brge	.+62     	; 0x47d8 <PWM_voidPWM_run+0x102>
    479a:	8b 81       	ldd	r24, Y+3	; 0x03
    479c:	9c 81       	ldd	r25, Y+4	; 0x04
    479e:	82 30       	cpi	r24, 0x02	; 2
    47a0:	91 05       	cpc	r25, r1
    47a2:	09 f4       	brne	.+2      	; 0x47a6 <PWM_voidPWM_run+0xd0>
    47a4:	82 c0       	rjmp	.+260    	; 0x48aa <PWM_voidPWM_run+0x1d4>
    47a6:	2b 81       	ldd	r18, Y+3	; 0x03
    47a8:	3c 81       	ldd	r19, Y+4	; 0x04
    47aa:	23 30       	cpi	r18, 0x03	; 3
    47ac:	31 05       	cpc	r19, r1
    47ae:	3c f4       	brge	.+14     	; 0x47be <PWM_voidPWM_run+0xe8>
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	9c 81       	ldd	r25, Y+4	; 0x04
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	91 05       	cpc	r25, r1
    47b8:	09 f4       	brne	.+2      	; 0x47bc <PWM_voidPWM_run+0xe6>
    47ba:	70 c0       	rjmp	.+224    	; 0x489c <PWM_voidPWM_run+0x1c6>
    47bc:	fa c0       	rjmp	.+500    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
    47be:	2b 81       	ldd	r18, Y+3	; 0x03
    47c0:	3c 81       	ldd	r19, Y+4	; 0x04
    47c2:	23 30       	cpi	r18, 0x03	; 3
    47c4:	31 05       	cpc	r19, r1
    47c6:	09 f4       	brne	.+2      	; 0x47ca <PWM_voidPWM_run+0xf4>
    47c8:	77 c0       	rjmp	.+238    	; 0x48b8 <PWM_voidPWM_run+0x1e2>
    47ca:	8b 81       	ldd	r24, Y+3	; 0x03
    47cc:	9c 81       	ldd	r25, Y+4	; 0x04
    47ce:	84 30       	cpi	r24, 0x04	; 4
    47d0:	91 05       	cpc	r25, r1
    47d2:	09 f4       	brne	.+2      	; 0x47d6 <PWM_voidPWM_run+0x100>
    47d4:	78 c0       	rjmp	.+240    	; 0x48c6 <PWM_voidPWM_run+0x1f0>
    47d6:	ed c0       	rjmp	.+474    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
    47d8:	2b 81       	ldd	r18, Y+3	; 0x03
    47da:	3c 81       	ldd	r19, Y+4	; 0x04
    47dc:	27 30       	cpi	r18, 0x07	; 7
    47de:	31 05       	cpc	r19, r1
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <PWM_voidPWM_run+0x10e>
    47e2:	86 c0       	rjmp	.+268    	; 0x48f0 <PWM_voidPWM_run+0x21a>
    47e4:	8b 81       	ldd	r24, Y+3	; 0x03
    47e6:	9c 81       	ldd	r25, Y+4	; 0x04
    47e8:	87 30       	cpi	r24, 0x07	; 7
    47ea:	91 05       	cpc	r25, r1
    47ec:	0c f4       	brge	.+2      	; 0x47f0 <PWM_voidPWM_run+0x11a>
    47ee:	79 c0       	rjmp	.+242    	; 0x48e2 <PWM_voidPWM_run+0x20c>
    47f0:	2b 81       	ldd	r18, Y+3	; 0x03
    47f2:	3c 81       	ldd	r19, Y+4	; 0x04
    47f4:	28 30       	cpi	r18, 0x08	; 8
    47f6:	31 05       	cpc	r19, r1
    47f8:	09 f4       	brne	.+2      	; 0x47fc <PWM_voidPWM_run+0x126>
    47fa:	81 c0       	rjmp	.+258    	; 0x48fe <PWM_voidPWM_run+0x228>
    47fc:	8b 81       	ldd	r24, Y+3	; 0x03
    47fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4800:	89 30       	cpi	r24, 0x09	; 9
    4802:	91 05       	cpc	r25, r1
    4804:	09 f4       	brne	.+2      	; 0x4808 <PWM_voidPWM_run+0x132>
    4806:	82 c0       	rjmp	.+260    	; 0x490c <PWM_voidPWM_run+0x236>
    4808:	d4 c0       	rjmp	.+424    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
    480a:	2b 81       	ldd	r18, Y+3	; 0x03
    480c:	3c 81       	ldd	r19, Y+4	; 0x04
    480e:	2f 30       	cpi	r18, 0x0F	; 15
    4810:	31 05       	cpc	r19, r1
    4812:	09 f4       	brne	.+2      	; 0x4816 <PWM_voidPWM_run+0x140>
    4814:	a5 c0       	rjmp	.+330    	; 0x4960 <PWM_voidPWM_run+0x28a>
    4816:	8b 81       	ldd	r24, Y+3	; 0x03
    4818:	9c 81       	ldd	r25, Y+4	; 0x04
    481a:	80 31       	cpi	r24, 0x10	; 16
    481c:	91 05       	cpc	r25, r1
    481e:	cc f4       	brge	.+50     	; 0x4852 <PWM_voidPWM_run+0x17c>
    4820:	2b 81       	ldd	r18, Y+3	; 0x03
    4822:	3c 81       	ldd	r19, Y+4	; 0x04
    4824:	2c 30       	cpi	r18, 0x0C	; 12
    4826:	31 05       	cpc	r19, r1
    4828:	09 f4       	brne	.+2      	; 0x482c <PWM_voidPWM_run+0x156>
    482a:	85 c0       	rjmp	.+266    	; 0x4936 <PWM_voidPWM_run+0x260>
    482c:	8b 81       	ldd	r24, Y+3	; 0x03
    482e:	9c 81       	ldd	r25, Y+4	; 0x04
    4830:	8c 30       	cpi	r24, 0x0C	; 12
    4832:	91 05       	cpc	r25, r1
    4834:	0c f4       	brge	.+2      	; 0x4838 <PWM_voidPWM_run+0x162>
    4836:	78 c0       	rjmp	.+240    	; 0x4928 <PWM_voidPWM_run+0x252>
    4838:	2b 81       	ldd	r18, Y+3	; 0x03
    483a:	3c 81       	ldd	r19, Y+4	; 0x04
    483c:	2d 30       	cpi	r18, 0x0D	; 13
    483e:	31 05       	cpc	r19, r1
    4840:	09 f4       	brne	.+2      	; 0x4844 <PWM_voidPWM_run+0x16e>
    4842:	80 c0       	rjmp	.+256    	; 0x4944 <PWM_voidPWM_run+0x26e>
    4844:	8b 81       	ldd	r24, Y+3	; 0x03
    4846:	9c 81       	ldd	r25, Y+4	; 0x04
    4848:	8e 30       	cpi	r24, 0x0E	; 14
    484a:	91 05       	cpc	r25, r1
    484c:	09 f4       	brne	.+2      	; 0x4850 <PWM_voidPWM_run+0x17a>
    484e:	81 c0       	rjmp	.+258    	; 0x4952 <PWM_voidPWM_run+0x27c>
    4850:	b0 c0       	rjmp	.+352    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
    4852:	2b 81       	ldd	r18, Y+3	; 0x03
    4854:	3c 81       	ldd	r19, Y+4	; 0x04
    4856:	22 31       	cpi	r18, 0x12	; 18
    4858:	31 05       	cpc	r19, r1
    485a:	09 f4       	brne	.+2      	; 0x485e <PWM_voidPWM_run+0x188>
    485c:	96 c0       	rjmp	.+300    	; 0x498a <PWM_voidPWM_run+0x2b4>
    485e:	8b 81       	ldd	r24, Y+3	; 0x03
    4860:	9c 81       	ldd	r25, Y+4	; 0x04
    4862:	83 31       	cpi	r24, 0x13	; 19
    4864:	91 05       	cpc	r25, r1
    4866:	6c f4       	brge	.+26     	; 0x4882 <PWM_voidPWM_run+0x1ac>
    4868:	2b 81       	ldd	r18, Y+3	; 0x03
    486a:	3c 81       	ldd	r19, Y+4	; 0x04
    486c:	20 31       	cpi	r18, 0x10	; 16
    486e:	31 05       	cpc	r19, r1
    4870:	09 f4       	brne	.+2      	; 0x4874 <PWM_voidPWM_run+0x19e>
    4872:	7d c0       	rjmp	.+250    	; 0x496e <PWM_voidPWM_run+0x298>
    4874:	8b 81       	ldd	r24, Y+3	; 0x03
    4876:	9c 81       	ldd	r25, Y+4	; 0x04
    4878:	81 31       	cpi	r24, 0x11	; 17
    487a:	91 05       	cpc	r25, r1
    487c:	09 f4       	brne	.+2      	; 0x4880 <PWM_voidPWM_run+0x1aa>
    487e:	7e c0       	rjmp	.+252    	; 0x497c <PWM_voidPWM_run+0x2a6>
    4880:	98 c0       	rjmp	.+304    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
    4882:	2b 81       	ldd	r18, Y+3	; 0x03
    4884:	3c 81       	ldd	r19, Y+4	; 0x04
    4886:	23 31       	cpi	r18, 0x13	; 19
    4888:	31 05       	cpc	r19, r1
    488a:	09 f4       	brne	.+2      	; 0x488e <PWM_voidPWM_run+0x1b8>
    488c:	85 c0       	rjmp	.+266    	; 0x4998 <PWM_voidPWM_run+0x2c2>
    488e:	8b 81       	ldd	r24, Y+3	; 0x03
    4890:	9c 81       	ldd	r25, Y+4	; 0x04
    4892:	84 31       	cpi	r24, 0x14	; 20
    4894:	91 05       	cpc	r25, r1
    4896:	09 f4       	brne	.+2      	; 0x489a <PWM_voidPWM_run+0x1c4>
    4898:	86 c0       	rjmp	.+268    	; 0x49a6 <PWM_voidPWM_run+0x2d0>
    489a:	8b c0       	rjmp	.+278    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
        {
		   	case FREQ_20_HZ  :
			PWM_ICR1L = 50000;
    489c:	e6 e4       	ldi	r30, 0x46	; 70
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	80 e5       	ldi	r24, 0x50	; 80
    48a2:	93 ec       	ldi	r25, 0xC3	; 195
    48a4:	91 83       	std	Z+1, r25	; 0x01
    48a6:	80 83       	st	Z, r24
    48a8:	84 c0       	rjmp	.+264    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			 break;
			case FREQ_25_HZ  :
			PWM_ICR1L = 40000;
    48aa:	e6 e4       	ldi	r30, 0x46	; 70
    48ac:	f0 e0       	ldi	r31, 0x00	; 0
    48ae:	80 e4       	ldi	r24, 0x40	; 64
    48b0:	9c e9       	ldi	r25, 0x9C	; 156
    48b2:	91 83       	std	Z+1, r25	; 0x01
    48b4:	80 83       	st	Z, r24
    48b6:	7d c0       	rjmp	.+250    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			 break;
			case FREQ_40_HZ  :
			PWM_ICR1L = 25000;
    48b8:	e6 e4       	ldi	r30, 0x46	; 70
    48ba:	f0 e0       	ldi	r31, 0x00	; 0
    48bc:	88 ea       	ldi	r24, 0xA8	; 168
    48be:	91 e6       	ldi	r25, 0x61	; 97
    48c0:	91 83       	std	Z+1, r25	; 0x01
    48c2:	80 83       	st	Z, r24
    48c4:	76 c0       	rjmp	.+236    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			  break;
			case FREQ_50_HZ  :
			PWM_ICR1L = 20000;
    48c6:	e6 e4       	ldi	r30, 0x46	; 70
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	80 e2       	ldi	r24, 0x20	; 32
    48cc:	9e e4       	ldi	r25, 0x4E	; 78
    48ce:	91 83       	std	Z+1, r25	; 0x01
    48d0:	80 83       	st	Z, r24
    48d2:	6f c0       	rjmp	.+222    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			 break;
			case FREQ_80_HZ  :
			PWM_ICR1L = 20000;
    48d4:	e6 e4       	ldi	r30, 0x46	; 70
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	80 e2       	ldi	r24, 0x20	; 32
    48da:	9e e4       	ldi	r25, 0x4E	; 78
    48dc:	91 83       	std	Z+1, r25	; 0x01
    48de:	80 83       	st	Z, r24
    48e0:	68 c0       	rjmp	.+208    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_100_HZ  :
			PWM_ICR1L = 20000;
    48e2:	e6 e4       	ldi	r30, 0x46	; 70
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 e2       	ldi	r24, 0x20	; 32
    48e8:	9e e4       	ldi	r25, 0x4E	; 78
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	80 83       	st	Z, r24
    48ee:	61 c0       	rjmp	.+194    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_125_HZ  :
			PWM_ICR1L = 8000;
    48f0:	e6 e4       	ldi	r30, 0x46	; 70
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 e4       	ldi	r24, 0x40	; 64
    48f6:	9f e1       	ldi	r25, 0x1F	; 31
    48f8:	91 83       	std	Z+1, r25	; 0x01
    48fa:	80 83       	st	Z, r24
    48fc:	5a c0       	rjmp	.+180    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_200_HZ  :
			PWM_ICR1L = 5000;
    48fe:	e6 e4       	ldi	r30, 0x46	; 70
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	88 e8       	ldi	r24, 0x88	; 136
    4904:	93 e1       	ldi	r25, 0x13	; 19
    4906:	91 83       	std	Z+1, r25	; 0x01
    4908:	80 83       	st	Z, r24
    490a:	53 c0       	rjmp	.+166    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_250_HZ  :
			PWM_ICR1L = 4000;
    490c:	e6 e4       	ldi	r30, 0x46	; 70
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 ea       	ldi	r24, 0xA0	; 160
    4912:	9f e0       	ldi	r25, 0x0F	; 15
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	80 83       	st	Z, r24
    4918:	4c c0       	rjmp	.+152    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_400_HZ  :
			PWM_ICR1L = 2500;
    491a:	e6 e4       	ldi	r30, 0x46	; 70
    491c:	f0 e0       	ldi	r31, 0x00	; 0
    491e:	84 ec       	ldi	r24, 0xC4	; 196
    4920:	99 e0       	ldi	r25, 0x09	; 9
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
    4926:	45 c0       	rjmp	.+138    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_500_HZ  :
			PWM_ICR1L = 2000;
    4928:	e6 e4       	ldi	r30, 0x46	; 70
    492a:	f0 e0       	ldi	r31, 0x00	; 0
    492c:	80 ed       	ldi	r24, 0xD0	; 208
    492e:	97 e0       	ldi	r25, 0x07	; 7
    4930:	91 83       	std	Z+1, r25	; 0x01
    4932:	80 83       	st	Z, r24
    4934:	3e c0       	rjmp	.+124    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_1000_HZ  :
			PWM_ICR1L = 1000;
    4936:	e6 e4       	ldi	r30, 0x46	; 70
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	88 ee       	ldi	r24, 0xE8	; 232
    493c:	93 e0       	ldi	r25, 0x03	; 3
    493e:	91 83       	std	Z+1, r25	; 0x01
    4940:	80 83       	st	Z, r24
    4942:	37 c0       	rjmp	.+110    	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_1250_HZ  :
			PWM_ICR1L = 800;
    4944:	e6 e4       	ldi	r30, 0x46	; 70
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	80 e2       	ldi	r24, 0x20	; 32
    494a:	93 e0       	ldi	r25, 0x03	; 3
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	80 83       	st	Z, r24
    4950:	30 c0       	rjmp	.+96     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_2000_HZ  :
			PWM_ICR1L = 500;
    4952:	e6 e4       	ldi	r30, 0x46	; 70
    4954:	f0 e0       	ldi	r31, 0x00	; 0
    4956:	84 ef       	ldi	r24, 0xF4	; 244
    4958:	91 e0       	ldi	r25, 0x01	; 1
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	80 83       	st	Z, r24
    495e:	29 c0       	rjmp	.+82     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_2500_HZ  :
			PWM_ICR1L = 400;
    4960:	e6 e4       	ldi	r30, 0x46	; 70
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 e9       	ldi	r24, 0x90	; 144
    4966:	91 e0       	ldi	r25, 0x01	; 1
    4968:	91 83       	std	Z+1, r25	; 0x01
    496a:	80 83       	st	Z, r24
    496c:	22 c0       	rjmp	.+68     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_4000_HZ  :
			PWM_ICR1L = 250;
    496e:	e6 e4       	ldi	r30, 0x46	; 70
    4970:	f0 e0       	ldi	r31, 0x00	; 0
    4972:	8a ef       	ldi	r24, 0xFA	; 250
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	91 83       	std	Z+1, r25	; 0x01
    4978:	80 83       	st	Z, r24
    497a:	1b c0       	rjmp	.+54     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_5000_HZ  :
			PWM_ICR1L = 200;
    497c:	e6 e4       	ldi	r30, 0x46	; 70
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	88 ec       	ldi	r24, 0xC8	; 200
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	80 83       	st	Z, r24
    4988:	14 c0       	rjmp	.+40     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_10000_HZ  :
			PWM_ICR1L = 100;
    498a:	e6 e4       	ldi	r30, 0x46	; 70
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	84 e6       	ldi	r24, 0x64	; 100
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
    4996:	0d c0       	rjmp	.+26     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_25000_HZ  :
			PWM_ICR1L = 40;
    4998:	e6 e4       	ldi	r30, 0x46	; 70
    499a:	f0 e0       	ldi	r31, 0x00	; 0
    499c:	88 e2       	ldi	r24, 0x28	; 40
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	80 83       	st	Z, r24
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <PWM_voidPWM_run+0x2dc>
			break;
			case FREQ_50000_HZ  :
			PWM_ICR1L = 20;
    49a6:	e6 e4       	ldi	r30, 0x46	; 70
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	84 e1       	ldi	r24, 0x14	; 20
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	91 83       	std	Z+1, r25	; 0x01
    49b0:	80 83       	st	Z, r24
			break;
         }
 		/*choosing pre-scaler -->8*/

 		CLR_BIT(TCCR1B,TCCR1B_CS10);
    49b2:	ae e4       	ldi	r26, 0x4E	; 78
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	ee e4       	ldi	r30, 0x4E	; 78
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 81       	ld	r24, Z
    49bc:	8e 7f       	andi	r24, 0xFE	; 254
    49be:	8c 93       	st	X, r24
 		SET_BIT(TCCR1B,TCCR1B_CS11);
    49c0:	ae e4       	ldi	r26, 0x4E	; 78
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	ee e4       	ldi	r30, 0x4E	; 78
    49c6:	f0 e0       	ldi	r31, 0x00	; 0
    49c8:	80 81       	ld	r24, Z
    49ca:	82 60       	ori	r24, 0x02	; 2
    49cc:	8c 93       	st	X, r24
 		CLR_BIT(TCCR1B,TCCR1B_CS12);
    49ce:	ae e4       	ldi	r26, 0x4E	; 78
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	ee e4       	ldi	r30, 0x4E	; 78
    49d4:	f0 e0       	ldi	r31, 0x00	; 0
    49d6:	80 81       	ld	r24, Z
    49d8:	8b 7f       	andi	r24, 0xFB	; 251
    49da:	8c 93       	st	X, r24
}
    49dc:	0f 90       	pop	r0
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	08 95       	ret

000049ea <PWM_voidPWM_DutyCycle>:
void PWM_voidPWM_DutyCycle(u8 percentage,u8 channel,u8 frequency)
{
    49ea:	0f 93       	push	r16
    49ec:	1f 93       	push	r17
    49ee:	df 93       	push	r29
    49f0:	cf 93       	push	r28
    49f2:	cd b7       	in	r28, 0x3d	; 61
    49f4:	de b7       	in	r29, 0x3e	; 62
    49f6:	27 97       	sbiw	r28, 0x07	; 7
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	89 83       	std	Y+1, r24	; 0x01
    4a04:	6a 83       	std	Y+2, r22	; 0x02
    4a06:	4b 83       	std	Y+3, r20	; 0x03
	if (channel == PWM_CHANNEL_1)
    4a08:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0a:	81 30       	cpi	r24, 0x01	; 1
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <PWM_voidPWM_DutyCycle+0x26>
    4a0e:	d2 c1       	rjmp	.+932    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    {
		switch (frequency)
    4a10:	8b 81       	ldd	r24, Y+3	; 0x03
    4a12:	28 2f       	mov	r18, r24
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	3f 83       	std	Y+7, r19	; 0x07
    4a18:	2e 83       	std	Y+6, r18	; 0x06
    4a1a:	4e 81       	ldd	r20, Y+6	; 0x06
    4a1c:	5f 81       	ldd	r21, Y+7	; 0x07
    4a1e:	4a 30       	cpi	r20, 0x0A	; 10
    4a20:	51 05       	cpc	r21, r1
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <PWM_voidPWM_DutyCycle+0x3c>
    4a24:	3e c1       	rjmp	.+636    	; 0x4ca2 <PWM_voidPWM_DutyCycle+0x2b8>
    4a26:	8e 81       	ldd	r24, Y+6	; 0x06
    4a28:	9f 81       	ldd	r25, Y+7	; 0x07
    4a2a:	8b 30       	cpi	r24, 0x0B	; 11
    4a2c:	91 05       	cpc	r25, r1
    4a2e:	0c f0       	brlt	.+2      	; 0x4a32 <PWM_voidPWM_DutyCycle+0x48>
    4a30:	43 c0       	rjmp	.+134    	; 0x4ab8 <PWM_voidPWM_DutyCycle+0xce>
    4a32:	ee 81       	ldd	r30, Y+6	; 0x06
    4a34:	ff 81       	ldd	r31, Y+7	; 0x07
    4a36:	e5 30       	cpi	r30, 0x05	; 5
    4a38:	f1 05       	cpc	r31, r1
    4a3a:	09 f4       	brne	.+2      	; 0x4a3e <PWM_voidPWM_DutyCycle+0x54>
    4a3c:	d4 c0       	rjmp	.+424    	; 0x4be6 <PWM_voidPWM_DutyCycle+0x1fc>
    4a3e:	2e 81       	ldd	r18, Y+6	; 0x06
    4a40:	3f 81       	ldd	r19, Y+7	; 0x07
    4a42:	26 30       	cpi	r18, 0x06	; 6
    4a44:	31 05       	cpc	r19, r1
    4a46:	fc f4       	brge	.+62     	; 0x4a86 <PWM_voidPWM_DutyCycle+0x9c>
    4a48:	4e 81       	ldd	r20, Y+6	; 0x06
    4a4a:	5f 81       	ldd	r21, Y+7	; 0x07
    4a4c:	42 30       	cpi	r20, 0x02	; 2
    4a4e:	51 05       	cpc	r21, r1
    4a50:	09 f4       	brne	.+2      	; 0x4a54 <PWM_voidPWM_DutyCycle+0x6a>
    4a52:	90 c0       	rjmp	.+288    	; 0x4b74 <PWM_voidPWM_DutyCycle+0x18a>
    4a54:	8e 81       	ldd	r24, Y+6	; 0x06
    4a56:	9f 81       	ldd	r25, Y+7	; 0x07
    4a58:	83 30       	cpi	r24, 0x03	; 3
    4a5a:	91 05       	cpc	r25, r1
    4a5c:	3c f4       	brge	.+14     	; 0x4a6c <PWM_voidPWM_DutyCycle+0x82>
    4a5e:	ee 81       	ldd	r30, Y+6	; 0x06
    4a60:	ff 81       	ldd	r31, Y+7	; 0x07
    4a62:	e1 30       	cpi	r30, 0x01	; 1
    4a64:	f1 05       	cpc	r31, r1
    4a66:	09 f4       	brne	.+2      	; 0x4a6a <PWM_voidPWM_DutyCycle+0x80>
    4a68:	70 c0       	rjmp	.+224    	; 0x4b4a <PWM_voidPWM_DutyCycle+0x160>
    4a6a:	a4 c1       	rjmp	.+840    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    4a6c:	2e 81       	ldd	r18, Y+6	; 0x06
    4a6e:	3f 81       	ldd	r19, Y+7	; 0x07
    4a70:	23 30       	cpi	r18, 0x03	; 3
    4a72:	31 05       	cpc	r19, r1
    4a74:	09 f4       	brne	.+2      	; 0x4a78 <PWM_voidPWM_DutyCycle+0x8e>
    4a76:	93 c0       	rjmp	.+294    	; 0x4b9e <PWM_voidPWM_DutyCycle+0x1b4>
    4a78:	4e 81       	ldd	r20, Y+6	; 0x06
    4a7a:	5f 81       	ldd	r21, Y+7	; 0x07
    4a7c:	44 30       	cpi	r20, 0x04	; 4
    4a7e:	51 05       	cpc	r21, r1
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <PWM_voidPWM_DutyCycle+0x9a>
    4a82:	9f c0       	rjmp	.+318    	; 0x4bc2 <PWM_voidPWM_DutyCycle+0x1d8>
    4a84:	97 c1       	rjmp	.+814    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    4a86:	8e 81       	ldd	r24, Y+6	; 0x06
    4a88:	9f 81       	ldd	r25, Y+7	; 0x07
    4a8a:	87 30       	cpi	r24, 0x07	; 7
    4a8c:	91 05       	cpc	r25, r1
    4a8e:	09 f4       	brne	.+2      	; 0x4a92 <PWM_voidPWM_DutyCycle+0xa8>
    4a90:	ce c0       	rjmp	.+412    	; 0x4c2e <PWM_voidPWM_DutyCycle+0x244>
    4a92:	ee 81       	ldd	r30, Y+6	; 0x06
    4a94:	ff 81       	ldd	r31, Y+7	; 0x07
    4a96:	e7 30       	cpi	r30, 0x07	; 7
    4a98:	f1 05       	cpc	r31, r1
    4a9a:	0c f4       	brge	.+2      	; 0x4a9e <PWM_voidPWM_DutyCycle+0xb4>
    4a9c:	b6 c0       	rjmp	.+364    	; 0x4c0a <PWM_voidPWM_DutyCycle+0x220>
    4a9e:	2e 81       	ldd	r18, Y+6	; 0x06
    4aa0:	3f 81       	ldd	r19, Y+7	; 0x07
    4aa2:	28 30       	cpi	r18, 0x08	; 8
    4aa4:	31 05       	cpc	r19, r1
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <PWM_voidPWM_DutyCycle+0xc0>
    4aa8:	d4 c0       	rjmp	.+424    	; 0x4c52 <PWM_voidPWM_DutyCycle+0x268>
    4aaa:	4e 81       	ldd	r20, Y+6	; 0x06
    4aac:	5f 81       	ldd	r21, Y+7	; 0x07
    4aae:	49 30       	cpi	r20, 0x09	; 9
    4ab0:	51 05       	cpc	r21, r1
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <PWM_voidPWM_DutyCycle+0xcc>
    4ab4:	e0 c0       	rjmp	.+448    	; 0x4c76 <PWM_voidPWM_DutyCycle+0x28c>
    4ab6:	7e c1       	rjmp	.+764    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    4ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    4aba:	9f 81       	ldd	r25, Y+7	; 0x07
    4abc:	8f 30       	cpi	r24, 0x0F	; 15
    4abe:	91 05       	cpc	r25, r1
    4ac0:	09 f4       	brne	.+2      	; 0x4ac4 <PWM_voidPWM_DutyCycle+0xda>
    4ac2:	47 c1       	rjmp	.+654    	; 0x4d52 <PWM_voidPWM_DutyCycle+0x368>
    4ac4:	ee 81       	ldd	r30, Y+6	; 0x06
    4ac6:	ff 81       	ldd	r31, Y+7	; 0x07
    4ac8:	e0 31       	cpi	r30, 0x10	; 16
    4aca:	f1 05       	cpc	r31, r1
    4acc:	cc f4       	brge	.+50     	; 0x4b00 <PWM_voidPWM_DutyCycle+0x116>
    4ace:	2e 81       	ldd	r18, Y+6	; 0x06
    4ad0:	3f 81       	ldd	r19, Y+7	; 0x07
    4ad2:	2c 30       	cpi	r18, 0x0C	; 12
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	09 f4       	brne	.+2      	; 0x4ada <PWM_voidPWM_DutyCycle+0xf0>
    4ad8:	0d c1       	rjmp	.+538    	; 0x4cf4 <PWM_voidPWM_DutyCycle+0x30a>
    4ada:	4e 81       	ldd	r20, Y+6	; 0x06
    4adc:	5f 81       	ldd	r21, Y+7	; 0x07
    4ade:	4c 30       	cpi	r20, 0x0C	; 12
    4ae0:	51 05       	cpc	r21, r1
    4ae2:	0c f4       	brge	.+2      	; 0x4ae6 <PWM_voidPWM_DutyCycle+0xfc>
    4ae4:	f3 c0       	rjmp	.+486    	; 0x4ccc <PWM_voidPWM_DutyCycle+0x2e2>
    4ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    4aea:	8d 30       	cpi	r24, 0x0D	; 13
    4aec:	91 05       	cpc	r25, r1
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <PWM_voidPWM_DutyCycle+0x108>
    4af0:	13 c1       	rjmp	.+550    	; 0x4d18 <PWM_voidPWM_DutyCycle+0x32e>
    4af2:	ee 81       	ldd	r30, Y+6	; 0x06
    4af4:	ff 81       	ldd	r31, Y+7	; 0x07
    4af6:	ee 30       	cpi	r30, 0x0E	; 14
    4af8:	f1 05       	cpc	r31, r1
    4afa:	09 f4       	brne	.+2      	; 0x4afe <PWM_voidPWM_DutyCycle+0x114>
    4afc:	1b c1       	rjmp	.+566    	; 0x4d34 <PWM_voidPWM_DutyCycle+0x34a>
    4afe:	5a c1       	rjmp	.+692    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    4b00:	2e 81       	ldd	r18, Y+6	; 0x06
    4b02:	3f 81       	ldd	r19, Y+7	; 0x07
    4b04:	22 31       	cpi	r18, 0x12	; 18
    4b06:	31 05       	cpc	r19, r1
    4b08:	09 f4       	brne	.+2      	; 0x4b0c <PWM_voidPWM_DutyCycle+0x122>
    4b0a:	43 c1       	rjmp	.+646    	; 0x4d92 <PWM_voidPWM_DutyCycle+0x3a8>
    4b0c:	4e 81       	ldd	r20, Y+6	; 0x06
    4b0e:	5f 81       	ldd	r21, Y+7	; 0x07
    4b10:	43 31       	cpi	r20, 0x13	; 19
    4b12:	51 05       	cpc	r21, r1
    4b14:	6c f4       	brge	.+26     	; 0x4b30 <PWM_voidPWM_DutyCycle+0x146>
    4b16:	8e 81       	ldd	r24, Y+6	; 0x06
    4b18:	9f 81       	ldd	r25, Y+7	; 0x07
    4b1a:	80 31       	cpi	r24, 0x10	; 16
    4b1c:	91 05       	cpc	r25, r1
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <PWM_voidPWM_DutyCycle+0x138>
    4b20:	24 c1       	rjmp	.+584    	; 0x4d6a <PWM_voidPWM_DutyCycle+0x380>
    4b22:	ee 81       	ldd	r30, Y+6	; 0x06
    4b24:	ff 81       	ldd	r31, Y+7	; 0x07
    4b26:	e1 31       	cpi	r30, 0x11	; 17
    4b28:	f1 05       	cpc	r31, r1
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <PWM_voidPWM_DutyCycle+0x144>
    4b2c:	28 c1       	rjmp	.+592    	; 0x4d7e <PWM_voidPWM_DutyCycle+0x394>
    4b2e:	42 c1       	rjmp	.+644    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
    4b30:	2e 81       	ldd	r18, Y+6	; 0x06
    4b32:	3f 81       	ldd	r19, Y+7	; 0x07
    4b34:	23 31       	cpi	r18, 0x13	; 19
    4b36:	31 05       	cpc	r19, r1
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <PWM_voidPWM_DutyCycle+0x152>
    4b3a:	33 c1       	rjmp	.+614    	; 0x4da2 <PWM_voidPWM_DutyCycle+0x3b8>
    4b3c:	4e 81       	ldd	r20, Y+6	; 0x06
    4b3e:	5f 81       	ldd	r21, Y+7	; 0x07
    4b40:	44 31       	cpi	r20, 0x14	; 20
    4b42:	51 05       	cpc	r21, r1
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <PWM_voidPWM_DutyCycle+0x15e>
    4b46:	32 c1       	rjmp	.+612    	; 0x4dac <PWM_voidPWM_DutyCycle+0x3c2>
    4b48:	35 c1       	rjmp	.+618    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
        {
			case FREQ_20_HZ  :
			PWM_OCR1AL = ((50000/100)*percentage) ;
    4b4a:	0a e4       	ldi	r16, 0x4A	; 74
    4b4c:	10 e0       	ldi	r17, 0x00	; 0
    4b4e:	89 81       	ldd	r24, Y+1	; 0x01
    4b50:	88 2f       	mov	r24, r24
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	a0 e0       	ldi	r26, 0x00	; 0
    4b56:	b0 e0       	ldi	r27, 0x00	; 0
    4b58:	24 ef       	ldi	r18, 0xF4	; 244
    4b5a:	31 e0       	ldi	r19, 0x01	; 1
    4b5c:	40 e0       	ldi	r20, 0x00	; 0
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	f8 01       	movw	r30, r16
    4b6e:	91 83       	std	Z+1, r25	; 0x01
    4b70:	80 83       	st	Z, r24
    4b72:	20 c1       	rjmp	.+576    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_25_HZ  :
			PWM_OCR1AL = ((40000/100)*percentage);
    4b74:	0a e4       	ldi	r16, 0x4A	; 74
    4b76:	10 e0       	ldi	r17, 0x00	; 0
    4b78:	89 81       	ldd	r24, Y+1	; 0x01
    4b7a:	88 2f       	mov	r24, r24
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	a0 e0       	ldi	r26, 0x00	; 0
    4b80:	b0 e0       	ldi	r27, 0x00	; 0
    4b82:	20 e9       	ldi	r18, 0x90	; 144
    4b84:	31 e0       	ldi	r19, 0x01	; 1
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	bc 01       	movw	r22, r24
    4b8c:	cd 01       	movw	r24, r26
    4b8e:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	f8 01       	movw	r30, r16
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	80 83       	st	Z, r24
    4b9c:	0b c1       	rjmp	.+534    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			 break;
			case FREQ_40_HZ  :
			PWM_OCR1AL= ((25000/100)*percentage);
    4b9e:	ea e4       	ldi	r30, 0x4A	; 74
    4ba0:	f0 e0       	ldi	r31, 0x00	; 0
    4ba2:	89 81       	ldd	r24, Y+1	; 0x01
    4ba4:	28 2f       	mov	r18, r24
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	8a ef       	ldi	r24, 0xFA	; 250
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	ac 01       	movw	r20, r24
    4bae:	24 9f       	mul	r18, r20
    4bb0:	c0 01       	movw	r24, r0
    4bb2:	25 9f       	mul	r18, r21
    4bb4:	90 0d       	add	r25, r0
    4bb6:	34 9f       	mul	r19, r20
    4bb8:	90 0d       	add	r25, r0
    4bba:	11 24       	eor	r1, r1
    4bbc:	91 83       	std	Z+1, r25	; 0x01
    4bbe:	80 83       	st	Z, r24
    4bc0:	f9 c0       	rjmp	.+498    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			  break;
			case FREQ_50_HZ  :
			PWM_OCR1AL= ((20000/100)*percentage);
    4bc2:	ea e4       	ldi	r30, 0x4A	; 74
    4bc4:	f0 e0       	ldi	r31, 0x00	; 0
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	28 2f       	mov	r18, r24
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	88 ec       	ldi	r24, 0xC8	; 200
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	ac 01       	movw	r20, r24
    4bd2:	24 9f       	mul	r18, r20
    4bd4:	c0 01       	movw	r24, r0
    4bd6:	25 9f       	mul	r18, r21
    4bd8:	90 0d       	add	r25, r0
    4bda:	34 9f       	mul	r19, r20
    4bdc:	90 0d       	add	r25, r0
    4bde:	11 24       	eor	r1, r1
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	80 83       	st	Z, r24
    4be4:	e7 c0       	rjmp	.+462    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			 break;
			case FREQ_80_HZ  :
			PWM_OCR1AL= ((12500/100)*percentage);
    4be6:	ea e4       	ldi	r30, 0x4A	; 74
    4be8:	f0 e0       	ldi	r31, 0x00	; 0
    4bea:	89 81       	ldd	r24, Y+1	; 0x01
    4bec:	28 2f       	mov	r18, r24
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	8d e7       	ldi	r24, 0x7D	; 125
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	ac 01       	movw	r20, r24
    4bf6:	24 9f       	mul	r18, r20
    4bf8:	c0 01       	movw	r24, r0
    4bfa:	25 9f       	mul	r18, r21
    4bfc:	90 0d       	add	r25, r0
    4bfe:	34 9f       	mul	r19, r20
    4c00:	90 0d       	add	r25, r0
    4c02:	11 24       	eor	r1, r1
    4c04:	91 83       	std	Z+1, r25	; 0x01
    4c06:	80 83       	st	Z, r24
    4c08:	d5 c0       	rjmp	.+426    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_100_HZ  :
			PWM_OCR1AL= ((10000/100)*percentage);
    4c0a:	ea e4       	ldi	r30, 0x4A	; 74
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	28 2f       	mov	r18, r24
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	84 e6       	ldi	r24, 0x64	; 100
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	ac 01       	movw	r20, r24
    4c1a:	24 9f       	mul	r18, r20
    4c1c:	c0 01       	movw	r24, r0
    4c1e:	25 9f       	mul	r18, r21
    4c20:	90 0d       	add	r25, r0
    4c22:	34 9f       	mul	r19, r20
    4c24:	90 0d       	add	r25, r0
    4c26:	11 24       	eor	r1, r1
    4c28:	91 83       	std	Z+1, r25	; 0x01
    4c2a:	80 83       	st	Z, r24
    4c2c:	c3 c0       	rjmp	.+390    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_125_HZ  :
			PWM_OCR1AL= ((8000/100)*percentage);
    4c2e:	ea e4       	ldi	r30, 0x4A	; 74
    4c30:	f0 e0       	ldi	r31, 0x00	; 0
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	28 2f       	mov	r18, r24
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	80 e5       	ldi	r24, 0x50	; 80
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	ac 01       	movw	r20, r24
    4c3e:	24 9f       	mul	r18, r20
    4c40:	c0 01       	movw	r24, r0
    4c42:	25 9f       	mul	r18, r21
    4c44:	90 0d       	add	r25, r0
    4c46:	34 9f       	mul	r19, r20
    4c48:	90 0d       	add	r25, r0
    4c4a:	11 24       	eor	r1, r1
    4c4c:	91 83       	std	Z+1, r25	; 0x01
    4c4e:	80 83       	st	Z, r24
    4c50:	b1 c0       	rjmp	.+354    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_200_HZ  :
			PWM_OCR1AL= ((5000/100)*percentage);
    4c52:	ea e4       	ldi	r30, 0x4A	; 74
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	28 2f       	mov	r18, r24
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	82 e3       	ldi	r24, 0x32	; 50
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	ac 01       	movw	r20, r24
    4c62:	24 9f       	mul	r18, r20
    4c64:	c0 01       	movw	r24, r0
    4c66:	25 9f       	mul	r18, r21
    4c68:	90 0d       	add	r25, r0
    4c6a:	34 9f       	mul	r19, r20
    4c6c:	90 0d       	add	r25, r0
    4c6e:	11 24       	eor	r1, r1
    4c70:	91 83       	std	Z+1, r25	; 0x01
    4c72:	80 83       	st	Z, r24
    4c74:	9f c0       	rjmp	.+318    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_250_HZ  :
			PWM_OCR1AL= ((4000/100)*percentage);
    4c76:	ea e4       	ldi	r30, 0x4A	; 74
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	89 81       	ldd	r24, Y+1	; 0x01
    4c7c:	88 2f       	mov	r24, r24
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	9c 01       	movw	r18, r24
    4c82:	22 0f       	add	r18, r18
    4c84:	33 1f       	adc	r19, r19
    4c86:	22 0f       	add	r18, r18
    4c88:	33 1f       	adc	r19, r19
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	c9 01       	movw	r24, r18
    4c90:	88 0f       	add	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	88 0f       	add	r24, r24
    4c96:	99 1f       	adc	r25, r25
    4c98:	82 0f       	add	r24, r18
    4c9a:	93 1f       	adc	r25, r19
    4c9c:	91 83       	std	Z+1, r25	; 0x01
    4c9e:	80 83       	st	Z, r24
    4ca0:	89 c0       	rjmp	.+274    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_400_HZ  :
			PWM_OCR1AL = ((2500/100)*percentage);
    4ca2:	ea e4       	ldi	r30, 0x4A	; 74
    4ca4:	f0 e0       	ldi	r31, 0x00	; 0
    4ca6:	89 81       	ldd	r24, Y+1	; 0x01
    4ca8:	28 2f       	mov	r18, r24
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	c9 01       	movw	r24, r18
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	82 0f       	add	r24, r18
    4cb4:	93 1f       	adc	r25, r19
    4cb6:	88 0f       	add	r24, r24
    4cb8:	99 1f       	adc	r25, r25
    4cba:	88 0f       	add	r24, r24
    4cbc:	99 1f       	adc	r25, r25
    4cbe:	88 0f       	add	r24, r24
    4cc0:	99 1f       	adc	r25, r25
    4cc2:	82 0f       	add	r24, r18
    4cc4:	93 1f       	adc	r25, r19
    4cc6:	91 83       	std	Z+1, r25	; 0x01
    4cc8:	80 83       	st	Z, r24
    4cca:	74 c0       	rjmp	.+232    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_500_HZ  :
			PWM_OCR1AL= ((2000/100)*percentage);
    4ccc:	ea e4       	ldi	r30, 0x4A	; 74
    4cce:	f0 e0       	ldi	r31, 0x00	; 0
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	88 2f       	mov	r24, r24
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	9c 01       	movw	r18, r24
    4cd8:	22 0f       	add	r18, r18
    4cda:	33 1f       	adc	r19, r19
    4cdc:	22 0f       	add	r18, r18
    4cde:	33 1f       	adc	r19, r19
    4ce0:	c9 01       	movw	r24, r18
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	88 0f       	add	r24, r24
    4ce8:	99 1f       	adc	r25, r25
    4cea:	82 0f       	add	r24, r18
    4cec:	93 1f       	adc	r25, r19
    4cee:	91 83       	std	Z+1, r25	; 0x01
    4cf0:	80 83       	st	Z, r24
    4cf2:	60 c0       	rjmp	.+192    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_1000_HZ  :
			PWM_OCR1AL= ((1000/100)*percentage);
    4cf4:	ea e4       	ldi	r30, 0x4A	; 74
    4cf6:	f0 e0       	ldi	r31, 0x00	; 0
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	88 2f       	mov	r24, r24
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	9c 01       	movw	r18, r24
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	c9 01       	movw	r24, r18
    4d06:	88 0f       	add	r24, r24
    4d08:	99 1f       	adc	r25, r25
    4d0a:	88 0f       	add	r24, r24
    4d0c:	99 1f       	adc	r25, r25
    4d0e:	82 0f       	add	r24, r18
    4d10:	93 1f       	adc	r25, r19
    4d12:	91 83       	std	Z+1, r25	; 0x01
    4d14:	80 83       	st	Z, r24
    4d16:	4e c0       	rjmp	.+156    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_1250_HZ  :
			PWM_OCR1AL= ((800/100)*percentage);
    4d18:	ea e4       	ldi	r30, 0x4A	; 74
    4d1a:	f0 e0       	ldi	r31, 0x00	; 0
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	88 2f       	mov	r24, r24
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	88 0f       	add	r24, r24
    4d24:	99 1f       	adc	r25, r25
    4d26:	88 0f       	add	r24, r24
    4d28:	99 1f       	adc	r25, r25
    4d2a:	88 0f       	add	r24, r24
    4d2c:	99 1f       	adc	r25, r25
    4d2e:	91 83       	std	Z+1, r25	; 0x01
    4d30:	80 83       	st	Z, r24
    4d32:	40 c0       	rjmp	.+128    	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_2000_HZ  :
			PWM_OCR1AL= ((500/100)*percentage);
    4d34:	ea e4       	ldi	r30, 0x4A	; 74
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	28 2f       	mov	r18, r24
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	c9 01       	movw	r24, r18
    4d40:	88 0f       	add	r24, r24
    4d42:	99 1f       	adc	r25, r25
    4d44:	88 0f       	add	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	82 0f       	add	r24, r18
    4d4a:	93 1f       	adc	r25, r19
    4d4c:	91 83       	std	Z+1, r25	; 0x01
    4d4e:	80 83       	st	Z, r24
    4d50:	31 c0       	rjmp	.+98     	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_2500_HZ  :
			PWM_OCR1AL= ((400/100)*percentage);
    4d52:	ea e4       	ldi	r30, 0x4A	; 74
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	89 81       	ldd	r24, Y+1	; 0x01
    4d58:	88 2f       	mov	r24, r24
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	88 0f       	add	r24, r24
    4d5e:	99 1f       	adc	r25, r25
    4d60:	88 0f       	add	r24, r24
    4d62:	99 1f       	adc	r25, r25
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	80 83       	st	Z, r24
    4d68:	25 c0       	rjmp	.+74     	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_4000_HZ  :
			PWM_OCR1AL= ((250/100)*percentage);
    4d6a:	ea e4       	ldi	r30, 0x4A	; 74
    4d6c:	f0 e0       	ldi	r31, 0x00	; 0
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
    4d70:	88 2f       	mov	r24, r24
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	88 0f       	add	r24, r24
    4d76:	99 1f       	adc	r25, r25
    4d78:	91 83       	std	Z+1, r25	; 0x01
    4d7a:	80 83       	st	Z, r24
    4d7c:	1b c0       	rjmp	.+54     	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_5000_HZ  :
			PWM_OCR1AL=((200/100)*percentage);
    4d7e:	ea e4       	ldi	r30, 0x4A	; 74
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	89 81       	ldd	r24, Y+1	; 0x01
    4d84:	88 2f       	mov	r24, r24
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	91 83       	std	Z+1, r25	; 0x01
    4d8e:	80 83       	st	Z, r24
    4d90:	11 c0       	rjmp	.+34     	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_10000_HZ  :
			PWM_OCR1AL= ((100/100)*percentage);
    4d92:	ea e4       	ldi	r30, 0x4A	; 74
    4d94:	f0 e0       	ldi	r31, 0x00	; 0
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	88 2f       	mov	r24, r24
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	91 83       	std	Z+1, r25	; 0x01
    4d9e:	80 83       	st	Z, r24
    4da0:	09 c0       	rjmp	.+18     	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_25000_HZ  :
			PWM_OCR1AL= ((40/100)*percentage);
    4da2:	ea e4       	ldi	r30, 0x4A	; 74
    4da4:	f0 e0       	ldi	r31, 0x00	; 0
    4da6:	11 82       	std	Z+1, r1	; 0x01
    4da8:	10 82       	st	Z, r1
    4daa:	04 c0       	rjmp	.+8      	; 0x4db4 <PWM_voidPWM_DutyCycle+0x3ca>
			break;
			case FREQ_50000_HZ  :
			PWM_OCR1AL= ((20/100)*percentage);
    4dac:	ea e4       	ldi	r30, 0x4A	; 74
    4dae:	f0 e0       	ldi	r31, 0x00	; 0
    4db0:	11 82       	std	Z+1, r1	; 0x01
    4db2:	10 82       	st	Z, r1
			break;
        }
    }
	if (channel == PWM_CHANNEL_2)
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	82 30       	cpi	r24, 0x02	; 2
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <PWM_voidPWM_DutyCycle+0x3d2>
    4dba:	d2 c1       	rjmp	.+932    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
	{
		switch (frequency)
    4dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbe:	e8 2f       	mov	r30, r24
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	fd 83       	std	Y+5, r31	; 0x05
    4dc4:	ec 83       	std	Y+4, r30	; 0x04
    4dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    4dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    4dca:	2a 30       	cpi	r18, 0x0A	; 10
    4dcc:	31 05       	cpc	r19, r1
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <PWM_voidPWM_DutyCycle+0x3e8>
    4dd0:	3e c1       	rjmp	.+636    	; 0x504e <PWM_voidPWM_DutyCycle+0x664>
    4dd2:	4c 81       	ldd	r20, Y+4	; 0x04
    4dd4:	5d 81       	ldd	r21, Y+5	; 0x05
    4dd6:	4b 30       	cpi	r20, 0x0B	; 11
    4dd8:	51 05       	cpc	r21, r1
    4dda:	0c f0       	brlt	.+2      	; 0x4dde <PWM_voidPWM_DutyCycle+0x3f4>
    4ddc:	43 c0       	rjmp	.+134    	; 0x4e64 <PWM_voidPWM_DutyCycle+0x47a>
    4dde:	8c 81       	ldd	r24, Y+4	; 0x04
    4de0:	9d 81       	ldd	r25, Y+5	; 0x05
    4de2:	85 30       	cpi	r24, 0x05	; 5
    4de4:	91 05       	cpc	r25, r1
    4de6:	09 f4       	brne	.+2      	; 0x4dea <PWM_voidPWM_DutyCycle+0x400>
    4de8:	d4 c0       	rjmp	.+424    	; 0x4f92 <PWM_voidPWM_DutyCycle+0x5a8>
    4dea:	ec 81       	ldd	r30, Y+4	; 0x04
    4dec:	fd 81       	ldd	r31, Y+5	; 0x05
    4dee:	e6 30       	cpi	r30, 0x06	; 6
    4df0:	f1 05       	cpc	r31, r1
    4df2:	fc f4       	brge	.+62     	; 0x4e32 <PWM_voidPWM_DutyCycle+0x448>
    4df4:	2c 81       	ldd	r18, Y+4	; 0x04
    4df6:	3d 81       	ldd	r19, Y+5	; 0x05
    4df8:	22 30       	cpi	r18, 0x02	; 2
    4dfa:	31 05       	cpc	r19, r1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <PWM_voidPWM_DutyCycle+0x416>
    4dfe:	90 c0       	rjmp	.+288    	; 0x4f20 <PWM_voidPWM_DutyCycle+0x536>
    4e00:	4c 81       	ldd	r20, Y+4	; 0x04
    4e02:	5d 81       	ldd	r21, Y+5	; 0x05
    4e04:	43 30       	cpi	r20, 0x03	; 3
    4e06:	51 05       	cpc	r21, r1
    4e08:	3c f4       	brge	.+14     	; 0x4e18 <PWM_voidPWM_DutyCycle+0x42e>
    4e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0e:	81 30       	cpi	r24, 0x01	; 1
    4e10:	91 05       	cpc	r25, r1
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <PWM_voidPWM_DutyCycle+0x42c>
    4e14:	70 c0       	rjmp	.+224    	; 0x4ef6 <PWM_voidPWM_DutyCycle+0x50c>
    4e16:	a4 c1       	rjmp	.+840    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
    4e18:	ec 81       	ldd	r30, Y+4	; 0x04
    4e1a:	fd 81       	ldd	r31, Y+5	; 0x05
    4e1c:	e3 30       	cpi	r30, 0x03	; 3
    4e1e:	f1 05       	cpc	r31, r1
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <PWM_voidPWM_DutyCycle+0x43a>
    4e22:	93 c0       	rjmp	.+294    	; 0x4f4a <PWM_voidPWM_DutyCycle+0x560>
    4e24:	2c 81       	ldd	r18, Y+4	; 0x04
    4e26:	3d 81       	ldd	r19, Y+5	; 0x05
    4e28:	24 30       	cpi	r18, 0x04	; 4
    4e2a:	31 05       	cpc	r19, r1
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <PWM_voidPWM_DutyCycle+0x446>
    4e2e:	9f c0       	rjmp	.+318    	; 0x4f6e <PWM_voidPWM_DutyCycle+0x584>
    4e30:	97 c1       	rjmp	.+814    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
    4e32:	4c 81       	ldd	r20, Y+4	; 0x04
    4e34:	5d 81       	ldd	r21, Y+5	; 0x05
    4e36:	47 30       	cpi	r20, 0x07	; 7
    4e38:	51 05       	cpc	r21, r1
    4e3a:	09 f4       	brne	.+2      	; 0x4e3e <PWM_voidPWM_DutyCycle+0x454>
    4e3c:	ce c0       	rjmp	.+412    	; 0x4fda <PWM_voidPWM_DutyCycle+0x5f0>
    4e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e40:	9d 81       	ldd	r25, Y+5	; 0x05
    4e42:	87 30       	cpi	r24, 0x07	; 7
    4e44:	91 05       	cpc	r25, r1
    4e46:	0c f4       	brge	.+2      	; 0x4e4a <PWM_voidPWM_DutyCycle+0x460>
    4e48:	b6 c0       	rjmp	.+364    	; 0x4fb6 <PWM_voidPWM_DutyCycle+0x5cc>
    4e4a:	ec 81       	ldd	r30, Y+4	; 0x04
    4e4c:	fd 81       	ldd	r31, Y+5	; 0x05
    4e4e:	e8 30       	cpi	r30, 0x08	; 8
    4e50:	f1 05       	cpc	r31, r1
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <PWM_voidPWM_DutyCycle+0x46c>
    4e54:	d4 c0       	rjmp	.+424    	; 0x4ffe <PWM_voidPWM_DutyCycle+0x614>
    4e56:	2c 81       	ldd	r18, Y+4	; 0x04
    4e58:	3d 81       	ldd	r19, Y+5	; 0x05
    4e5a:	29 30       	cpi	r18, 0x09	; 9
    4e5c:	31 05       	cpc	r19, r1
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <PWM_voidPWM_DutyCycle+0x478>
    4e60:	e0 c0       	rjmp	.+448    	; 0x5022 <PWM_voidPWM_DutyCycle+0x638>
    4e62:	7e c1       	rjmp	.+764    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
    4e64:	4c 81       	ldd	r20, Y+4	; 0x04
    4e66:	5d 81       	ldd	r21, Y+5	; 0x05
    4e68:	4f 30       	cpi	r20, 0x0F	; 15
    4e6a:	51 05       	cpc	r21, r1
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <PWM_voidPWM_DutyCycle+0x486>
    4e6e:	47 c1       	rjmp	.+654    	; 0x50fe <PWM_voidPWM_DutyCycle+0x714>
    4e70:	8c 81       	ldd	r24, Y+4	; 0x04
    4e72:	9d 81       	ldd	r25, Y+5	; 0x05
    4e74:	80 31       	cpi	r24, 0x10	; 16
    4e76:	91 05       	cpc	r25, r1
    4e78:	cc f4       	brge	.+50     	; 0x4eac <PWM_voidPWM_DutyCycle+0x4c2>
    4e7a:	ec 81       	ldd	r30, Y+4	; 0x04
    4e7c:	fd 81       	ldd	r31, Y+5	; 0x05
    4e7e:	ec 30       	cpi	r30, 0x0C	; 12
    4e80:	f1 05       	cpc	r31, r1
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <PWM_voidPWM_DutyCycle+0x49c>
    4e84:	0d c1       	rjmp	.+538    	; 0x50a0 <PWM_voidPWM_DutyCycle+0x6b6>
    4e86:	2c 81       	ldd	r18, Y+4	; 0x04
    4e88:	3d 81       	ldd	r19, Y+5	; 0x05
    4e8a:	2c 30       	cpi	r18, 0x0C	; 12
    4e8c:	31 05       	cpc	r19, r1
    4e8e:	0c f4       	brge	.+2      	; 0x4e92 <PWM_voidPWM_DutyCycle+0x4a8>
    4e90:	f3 c0       	rjmp	.+486    	; 0x5078 <PWM_voidPWM_DutyCycle+0x68e>
    4e92:	4c 81       	ldd	r20, Y+4	; 0x04
    4e94:	5d 81       	ldd	r21, Y+5	; 0x05
    4e96:	4d 30       	cpi	r20, 0x0D	; 13
    4e98:	51 05       	cpc	r21, r1
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <PWM_voidPWM_DutyCycle+0x4b4>
    4e9c:	13 c1       	rjmp	.+550    	; 0x50c4 <PWM_voidPWM_DutyCycle+0x6da>
    4e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ea2:	8e 30       	cpi	r24, 0x0E	; 14
    4ea4:	91 05       	cpc	r25, r1
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <PWM_voidPWM_DutyCycle+0x4c0>
    4ea8:	1b c1       	rjmp	.+566    	; 0x50e0 <PWM_voidPWM_DutyCycle+0x6f6>
    4eaa:	5a c1       	rjmp	.+692    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
    4eac:	ec 81       	ldd	r30, Y+4	; 0x04
    4eae:	fd 81       	ldd	r31, Y+5	; 0x05
    4eb0:	e2 31       	cpi	r30, 0x12	; 18
    4eb2:	f1 05       	cpc	r31, r1
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <PWM_voidPWM_DutyCycle+0x4ce>
    4eb6:	43 c1       	rjmp	.+646    	; 0x513e <PWM_voidPWM_DutyCycle+0x754>
    4eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    4eba:	3d 81       	ldd	r19, Y+5	; 0x05
    4ebc:	23 31       	cpi	r18, 0x13	; 19
    4ebe:	31 05       	cpc	r19, r1
    4ec0:	6c f4       	brge	.+26     	; 0x4edc <PWM_voidPWM_DutyCycle+0x4f2>
    4ec2:	4c 81       	ldd	r20, Y+4	; 0x04
    4ec4:	5d 81       	ldd	r21, Y+5	; 0x05
    4ec6:	40 31       	cpi	r20, 0x10	; 16
    4ec8:	51 05       	cpc	r21, r1
    4eca:	09 f4       	brne	.+2      	; 0x4ece <PWM_voidPWM_DutyCycle+0x4e4>
    4ecc:	24 c1       	rjmp	.+584    	; 0x5116 <PWM_voidPWM_DutyCycle+0x72c>
    4ece:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ed2:	81 31       	cpi	r24, 0x11	; 17
    4ed4:	91 05       	cpc	r25, r1
    4ed6:	09 f4       	brne	.+2      	; 0x4eda <PWM_voidPWM_DutyCycle+0x4f0>
    4ed8:	28 c1       	rjmp	.+592    	; 0x512a <PWM_voidPWM_DutyCycle+0x740>
    4eda:	42 c1       	rjmp	.+644    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
    4edc:	ec 81       	ldd	r30, Y+4	; 0x04
    4ede:	fd 81       	ldd	r31, Y+5	; 0x05
    4ee0:	e3 31       	cpi	r30, 0x13	; 19
    4ee2:	f1 05       	cpc	r31, r1
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <PWM_voidPWM_DutyCycle+0x4fe>
    4ee6:	33 c1       	rjmp	.+614    	; 0x514e <PWM_voidPWM_DutyCycle+0x764>
    4ee8:	2c 81       	ldd	r18, Y+4	; 0x04
    4eea:	3d 81       	ldd	r19, Y+5	; 0x05
    4eec:	24 31       	cpi	r18, 0x14	; 20
    4eee:	31 05       	cpc	r19, r1
    4ef0:	09 f4       	brne	.+2      	; 0x4ef4 <PWM_voidPWM_DutyCycle+0x50a>
    4ef2:	32 c1       	rjmp	.+612    	; 0x5158 <PWM_voidPWM_DutyCycle+0x76e>
    4ef4:	35 c1       	rjmp	.+618    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
        {
			case FREQ_20_HZ  :
			PWM_OCR1BL = ((50000/100)*percentage) ;
    4ef6:	08 e4       	ldi	r16, 0x48	; 72
    4ef8:	10 e0       	ldi	r17, 0x00	; 0
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	88 2f       	mov	r24, r24
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	a0 e0       	ldi	r26, 0x00	; 0
    4f02:	b0 e0       	ldi	r27, 0x00	; 0
    4f04:	24 ef       	ldi	r18, 0xF4	; 244
    4f06:	31 e0       	ldi	r19, 0x01	; 1
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	50 e0       	ldi	r21, 0x00	; 0
    4f0c:	bc 01       	movw	r22, r24
    4f0e:	cd 01       	movw	r24, r26
    4f10:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	f8 01       	movw	r30, r16
    4f1a:	91 83       	std	Z+1, r25	; 0x01
    4f1c:	80 83       	st	Z, r24
    4f1e:	20 c1       	rjmp	.+576    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_25_HZ  :
			PWM_OCR1BL = ((40000/100)*percentage);
    4f20:	08 e4       	ldi	r16, 0x48	; 72
    4f22:	10 e0       	ldi	r17, 0x00	; 0
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	88 2f       	mov	r24, r24
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	a0 e0       	ldi	r26, 0x00	; 0
    4f2c:	b0 e0       	ldi	r27, 0x00	; 0
    4f2e:	20 e9       	ldi	r18, 0x90	; 144
    4f30:	31 e0       	ldi	r19, 0x01	; 1
    4f32:	40 e0       	ldi	r20, 0x00	; 0
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	bc 01       	movw	r22, r24
    4f38:	cd 01       	movw	r24, r26
    4f3a:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulsi3>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	cb 01       	movw	r24, r22
    4f42:	f8 01       	movw	r30, r16
    4f44:	91 83       	std	Z+1, r25	; 0x01
    4f46:	80 83       	st	Z, r24
    4f48:	0b c1       	rjmp	.+534    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			 break;
			case FREQ_40_HZ  :
			PWM_OCR1BL= ((25000/100)*percentage);
    4f4a:	e8 e4       	ldi	r30, 0x48	; 72
    4f4c:	f0 e0       	ldi	r31, 0x00	; 0
    4f4e:	89 81       	ldd	r24, Y+1	; 0x01
    4f50:	28 2f       	mov	r18, r24
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	8a ef       	ldi	r24, 0xFA	; 250
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	ac 01       	movw	r20, r24
    4f5a:	24 9f       	mul	r18, r20
    4f5c:	c0 01       	movw	r24, r0
    4f5e:	25 9f       	mul	r18, r21
    4f60:	90 0d       	add	r25, r0
    4f62:	34 9f       	mul	r19, r20
    4f64:	90 0d       	add	r25, r0
    4f66:	11 24       	eor	r1, r1
    4f68:	91 83       	std	Z+1, r25	; 0x01
    4f6a:	80 83       	st	Z, r24
    4f6c:	f9 c0       	rjmp	.+498    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			  break;
			case FREQ_50_HZ  :
			PWM_OCR1BL= ((20000/100)*percentage);
    4f6e:	e8 e4       	ldi	r30, 0x48	; 72
    4f70:	f0 e0       	ldi	r31, 0x00	; 0
    4f72:	89 81       	ldd	r24, Y+1	; 0x01
    4f74:	28 2f       	mov	r18, r24
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	88 ec       	ldi	r24, 0xC8	; 200
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	ac 01       	movw	r20, r24
    4f7e:	24 9f       	mul	r18, r20
    4f80:	c0 01       	movw	r24, r0
    4f82:	25 9f       	mul	r18, r21
    4f84:	90 0d       	add	r25, r0
    4f86:	34 9f       	mul	r19, r20
    4f88:	90 0d       	add	r25, r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	91 83       	std	Z+1, r25	; 0x01
    4f8e:	80 83       	st	Z, r24
    4f90:	e7 c0       	rjmp	.+462    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			 break;
			case FREQ_80_HZ  :
			PWM_OCR1BL= ((12500/100)*percentage);
    4f92:	e8 e4       	ldi	r30, 0x48	; 72
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	8d e7       	ldi	r24, 0x7D	; 125
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	24 9f       	mul	r18, r20
    4fa4:	c0 01       	movw	r24, r0
    4fa6:	25 9f       	mul	r18, r21
    4fa8:	90 0d       	add	r25, r0
    4faa:	34 9f       	mul	r19, r20
    4fac:	90 0d       	add	r25, r0
    4fae:	11 24       	eor	r1, r1
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	80 83       	st	Z, r24
    4fb4:	d5 c0       	rjmp	.+426    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_100_HZ  :
			PWM_OCR1BL= ((10000/100)*percentage);
    4fb6:	e8 e4       	ldi	r30, 0x48	; 72
    4fb8:	f0 e0       	ldi	r31, 0x00	; 0
    4fba:	89 81       	ldd	r24, Y+1	; 0x01
    4fbc:	28 2f       	mov	r18, r24
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	84 e6       	ldi	r24, 0x64	; 100
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	ac 01       	movw	r20, r24
    4fc6:	24 9f       	mul	r18, r20
    4fc8:	c0 01       	movw	r24, r0
    4fca:	25 9f       	mul	r18, r21
    4fcc:	90 0d       	add	r25, r0
    4fce:	34 9f       	mul	r19, r20
    4fd0:	90 0d       	add	r25, r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	91 83       	std	Z+1, r25	; 0x01
    4fd6:	80 83       	st	Z, r24
    4fd8:	c3 c0       	rjmp	.+390    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_125_HZ  :
			PWM_OCR1BL= ((8000/100)*percentage);
    4fda:	e8 e4       	ldi	r30, 0x48	; 72
    4fdc:	f0 e0       	ldi	r31, 0x00	; 0
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	80 e5       	ldi	r24, 0x50	; 80
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	ac 01       	movw	r20, r24
    4fea:	24 9f       	mul	r18, r20
    4fec:	c0 01       	movw	r24, r0
    4fee:	25 9f       	mul	r18, r21
    4ff0:	90 0d       	add	r25, r0
    4ff2:	34 9f       	mul	r19, r20
    4ff4:	90 0d       	add	r25, r0
    4ff6:	11 24       	eor	r1, r1
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	80 83       	st	Z, r24
    4ffc:	b1 c0       	rjmp	.+354    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_200_HZ  :
			PWM_OCR1BL= ((5000/100)*percentage);
    4ffe:	e8 e4       	ldi	r30, 0x48	; 72
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	89 81       	ldd	r24, Y+1	; 0x01
    5004:	28 2f       	mov	r18, r24
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	82 e3       	ldi	r24, 0x32	; 50
    500a:	90 e0       	ldi	r25, 0x00	; 0
    500c:	ac 01       	movw	r20, r24
    500e:	24 9f       	mul	r18, r20
    5010:	c0 01       	movw	r24, r0
    5012:	25 9f       	mul	r18, r21
    5014:	90 0d       	add	r25, r0
    5016:	34 9f       	mul	r19, r20
    5018:	90 0d       	add	r25, r0
    501a:	11 24       	eor	r1, r1
    501c:	91 83       	std	Z+1, r25	; 0x01
    501e:	80 83       	st	Z, r24
    5020:	9f c0       	rjmp	.+318    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_250_HZ  :
			PWM_OCR1BL= ((4000/100)*percentage);
    5022:	e8 e4       	ldi	r30, 0x48	; 72
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	89 81       	ldd	r24, Y+1	; 0x01
    5028:	88 2f       	mov	r24, r24
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	9c 01       	movw	r18, r24
    502e:	22 0f       	add	r18, r18
    5030:	33 1f       	adc	r19, r19
    5032:	22 0f       	add	r18, r18
    5034:	33 1f       	adc	r19, r19
    5036:	22 0f       	add	r18, r18
    5038:	33 1f       	adc	r19, r19
    503a:	c9 01       	movw	r24, r18
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	82 0f       	add	r24, r18
    5046:	93 1f       	adc	r25, r19
    5048:	91 83       	std	Z+1, r25	; 0x01
    504a:	80 83       	st	Z, r24
    504c:	89 c0       	rjmp	.+274    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_400_HZ  :
			PWM_OCR1BL = ((2500/100)*percentage);
    504e:	e8 e4       	ldi	r30, 0x48	; 72
    5050:	f0 e0       	ldi	r31, 0x00	; 0
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	28 2f       	mov	r18, r24
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	c9 01       	movw	r24, r18
    505a:	88 0f       	add	r24, r24
    505c:	99 1f       	adc	r25, r25
    505e:	82 0f       	add	r24, r18
    5060:	93 1f       	adc	r25, r19
    5062:	88 0f       	add	r24, r24
    5064:	99 1f       	adc	r25, r25
    5066:	88 0f       	add	r24, r24
    5068:	99 1f       	adc	r25, r25
    506a:	88 0f       	add	r24, r24
    506c:	99 1f       	adc	r25, r25
    506e:	82 0f       	add	r24, r18
    5070:	93 1f       	adc	r25, r19
    5072:	91 83       	std	Z+1, r25	; 0x01
    5074:	80 83       	st	Z, r24
    5076:	74 c0       	rjmp	.+232    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_500_HZ  :
			PWM_OCR1BL= ((2000/100)*percentage);
    5078:	e8 e4       	ldi	r30, 0x48	; 72
    507a:	f0 e0       	ldi	r31, 0x00	; 0
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	88 2f       	mov	r24, r24
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	9c 01       	movw	r18, r24
    5084:	22 0f       	add	r18, r18
    5086:	33 1f       	adc	r19, r19
    5088:	22 0f       	add	r18, r18
    508a:	33 1f       	adc	r19, r19
    508c:	c9 01       	movw	r24, r18
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	88 0f       	add	r24, r24
    5094:	99 1f       	adc	r25, r25
    5096:	82 0f       	add	r24, r18
    5098:	93 1f       	adc	r25, r19
    509a:	91 83       	std	Z+1, r25	; 0x01
    509c:	80 83       	st	Z, r24
    509e:	60 c0       	rjmp	.+192    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_1000_HZ  :
			PWM_OCR1BL= ((1000/100)*percentage);
    50a0:	e8 e4       	ldi	r30, 0x48	; 72
    50a2:	f0 e0       	ldi	r31, 0x00	; 0
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	88 2f       	mov	r24, r24
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	9c 01       	movw	r18, r24
    50ac:	22 0f       	add	r18, r18
    50ae:	33 1f       	adc	r19, r19
    50b0:	c9 01       	movw	r24, r18
    50b2:	88 0f       	add	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	88 0f       	add	r24, r24
    50b8:	99 1f       	adc	r25, r25
    50ba:	82 0f       	add	r24, r18
    50bc:	93 1f       	adc	r25, r19
    50be:	91 83       	std	Z+1, r25	; 0x01
    50c0:	80 83       	st	Z, r24
    50c2:	4e c0       	rjmp	.+156    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_1250_HZ  :
			PWM_OCR1BL= ((800/100)*percentage);
    50c4:	e8 e4       	ldi	r30, 0x48	; 72
    50c6:	f0 e0       	ldi	r31, 0x00	; 0
    50c8:	89 81       	ldd	r24, Y+1	; 0x01
    50ca:	88 2f       	mov	r24, r24
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	88 0f       	add	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	88 0f       	add	r24, r24
    50d4:	99 1f       	adc	r25, r25
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	91 83       	std	Z+1, r25	; 0x01
    50dc:	80 83       	st	Z, r24
    50de:	40 c0       	rjmp	.+128    	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_2000_HZ  :
			PWM_OCR1BL= ((500/100)*percentage);
    50e0:	e8 e4       	ldi	r30, 0x48	; 72
    50e2:	f0 e0       	ldi	r31, 0x00	; 0
    50e4:	89 81       	ldd	r24, Y+1	; 0x01
    50e6:	28 2f       	mov	r18, r24
    50e8:	30 e0       	ldi	r19, 0x00	; 0
    50ea:	c9 01       	movw	r24, r18
    50ec:	88 0f       	add	r24, r24
    50ee:	99 1f       	adc	r25, r25
    50f0:	88 0f       	add	r24, r24
    50f2:	99 1f       	adc	r25, r25
    50f4:	82 0f       	add	r24, r18
    50f6:	93 1f       	adc	r25, r19
    50f8:	91 83       	std	Z+1, r25	; 0x01
    50fa:	80 83       	st	Z, r24
    50fc:	31 c0       	rjmp	.+98     	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_2500_HZ  :
			PWM_OCR1BL= ((400/100)*percentage);
    50fe:	e8 e4       	ldi	r30, 0x48	; 72
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	89 81       	ldd	r24, Y+1	; 0x01
    5104:	88 2f       	mov	r24, r24
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	88 0f       	add	r24, r24
    510a:	99 1f       	adc	r25, r25
    510c:	88 0f       	add	r24, r24
    510e:	99 1f       	adc	r25, r25
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
    5114:	25 c0       	rjmp	.+74     	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_4000_HZ  :
			PWM_OCR1BL= ((250/100)*percentage);
    5116:	e8 e4       	ldi	r30, 0x48	; 72
    5118:	f0 e0       	ldi	r31, 0x00	; 0
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	88 2f       	mov	r24, r24
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	88 0f       	add	r24, r24
    5122:	99 1f       	adc	r25, r25
    5124:	91 83       	std	Z+1, r25	; 0x01
    5126:	80 83       	st	Z, r24
    5128:	1b c0       	rjmp	.+54     	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_5000_HZ  :
			PWM_OCR1BL=((200/100)*percentage);
    512a:	e8 e4       	ldi	r30, 0x48	; 72
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	89 81       	ldd	r24, Y+1	; 0x01
    5130:	88 2f       	mov	r24, r24
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	88 0f       	add	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	91 83       	std	Z+1, r25	; 0x01
    513a:	80 83       	st	Z, r24
    513c:	11 c0       	rjmp	.+34     	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_10000_HZ  :
			PWM_OCR1BL= ((100/100)*percentage);
    513e:	e8 e4       	ldi	r30, 0x48	; 72
    5140:	f0 e0       	ldi	r31, 0x00	; 0
    5142:	89 81       	ldd	r24, Y+1	; 0x01
    5144:	88 2f       	mov	r24, r24
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	91 83       	std	Z+1, r25	; 0x01
    514a:	80 83       	st	Z, r24
    514c:	09 c0       	rjmp	.+18     	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_25000_HZ  :
			PWM_OCR1BL= ((40/100)*percentage);
    514e:	e8 e4       	ldi	r30, 0x48	; 72
    5150:	f0 e0       	ldi	r31, 0x00	; 0
    5152:	11 82       	std	Z+1, r1	; 0x01
    5154:	10 82       	st	Z, r1
    5156:	04 c0       	rjmp	.+8      	; 0x5160 <PWM_voidPWM_DutyCycle+0x776>
			break;
			case FREQ_50000_HZ  :
			PWM_OCR1BL= ((20/100)*percentage);
    5158:	e8 e4       	ldi	r30, 0x48	; 72
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	11 82       	std	Z+1, r1	; 0x01
    515e:	10 82       	st	Z, r1
			break;
        }
	}
}
    5160:	27 96       	adiw	r28, 0x07	; 7
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	cf 91       	pop	r28
    516e:	df 91       	pop	r29
    5170:	1f 91       	pop	r17
    5172:	0f 91       	pop	r16
    5174:	08 95       	ret

00005176 <PWM_voidPWM_OCR_Value>:
void PWM_voidPWM_OCR_Value(u16 value,u8 channel,u8 frequency)
{
    5176:	df 93       	push	r29
    5178:	cf 93       	push	r28
    517a:	cd b7       	in	r28, 0x3d	; 61
    517c:	de b7       	in	r29, 0x3e	; 62
    517e:	28 97       	sbiw	r28, 0x08	; 8
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	de bf       	out	0x3e, r29	; 62
    5186:	0f be       	out	0x3f, r0	; 63
    5188:	cd bf       	out	0x3d, r28	; 61
    518a:	9a 83       	std	Y+2, r25	; 0x02
    518c:	89 83       	std	Y+1, r24	; 0x01
    518e:	6b 83       	std	Y+3, r22	; 0x03
    5190:	4c 83       	std	Y+4, r20	; 0x04
	if (channel == PWM_CHANNEL_1)
    5192:	8b 81       	ldd	r24, Y+3	; 0x03
    5194:	81 30       	cpi	r24, 0x01	; 1
    5196:	09 f0       	breq	.+2      	; 0x519a <PWM_voidPWM_OCR_Value+0x24>
    5198:	28 c1       	rjmp	.+592    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
	{
		switch (frequency)
    519a:	8c 81       	ldd	r24, Y+4	; 0x04
    519c:	28 2f       	mov	r18, r24
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	38 87       	std	Y+8, r19	; 0x08
    51a2:	2f 83       	std	Y+7, r18	; 0x07
    51a4:	8f 81       	ldd	r24, Y+7	; 0x07
    51a6:	98 85       	ldd	r25, Y+8	; 0x08
    51a8:	8a 30       	cpi	r24, 0x0A	; 10
    51aa:	91 05       	cpc	r25, r1
    51ac:	09 f4       	brne	.+2      	; 0x51b0 <PWM_voidPWM_OCR_Value+0x3a>
    51ae:	d1 c0       	rjmp	.+418    	; 0x5352 <PWM_voidPWM_OCR_Value+0x1dc>
    51b0:	2f 81       	ldd	r18, Y+7	; 0x07
    51b2:	38 85       	ldd	r19, Y+8	; 0x08
    51b4:	2b 30       	cpi	r18, 0x0B	; 11
    51b6:	31 05       	cpc	r19, r1
    51b8:	0c f0       	brlt	.+2      	; 0x51bc <PWM_voidPWM_OCR_Value+0x46>
    51ba:	43 c0       	rjmp	.+134    	; 0x5242 <PWM_voidPWM_OCR_Value+0xcc>
    51bc:	8f 81       	ldd	r24, Y+7	; 0x07
    51be:	98 85       	ldd	r25, Y+8	; 0x08
    51c0:	85 30       	cpi	r24, 0x05	; 5
    51c2:	91 05       	cpc	r25, r1
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <PWM_voidPWM_OCR_Value+0x52>
    51c6:	a2 c0       	rjmp	.+324    	; 0x530c <PWM_voidPWM_OCR_Value+0x196>
    51c8:	2f 81       	ldd	r18, Y+7	; 0x07
    51ca:	38 85       	ldd	r19, Y+8	; 0x08
    51cc:	26 30       	cpi	r18, 0x06	; 6
    51ce:	31 05       	cpc	r19, r1
    51d0:	fc f4       	brge	.+62     	; 0x5210 <PWM_voidPWM_OCR_Value+0x9a>
    51d2:	8f 81       	ldd	r24, Y+7	; 0x07
    51d4:	98 85       	ldd	r25, Y+8	; 0x08
    51d6:	82 30       	cpi	r24, 0x02	; 2
    51d8:	91 05       	cpc	r25, r1
    51da:	09 f4       	brne	.+2      	; 0x51de <PWM_voidPWM_OCR_Value+0x68>
    51dc:	82 c0       	rjmp	.+260    	; 0x52e2 <PWM_voidPWM_OCR_Value+0x16c>
    51de:	2f 81       	ldd	r18, Y+7	; 0x07
    51e0:	38 85       	ldd	r19, Y+8	; 0x08
    51e2:	23 30       	cpi	r18, 0x03	; 3
    51e4:	31 05       	cpc	r19, r1
    51e6:	3c f4       	brge	.+14     	; 0x51f6 <PWM_voidPWM_OCR_Value+0x80>
    51e8:	8f 81       	ldd	r24, Y+7	; 0x07
    51ea:	98 85       	ldd	r25, Y+8	; 0x08
    51ec:	81 30       	cpi	r24, 0x01	; 1
    51ee:	91 05       	cpc	r25, r1
    51f0:	09 f4       	brne	.+2      	; 0x51f4 <PWM_voidPWM_OCR_Value+0x7e>
    51f2:	70 c0       	rjmp	.+224    	; 0x52d4 <PWM_voidPWM_OCR_Value+0x15e>
    51f4:	fa c0       	rjmp	.+500    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
    51f6:	2f 81       	ldd	r18, Y+7	; 0x07
    51f8:	38 85       	ldd	r19, Y+8	; 0x08
    51fa:	23 30       	cpi	r18, 0x03	; 3
    51fc:	31 05       	cpc	r19, r1
    51fe:	09 f4       	brne	.+2      	; 0x5202 <PWM_voidPWM_OCR_Value+0x8c>
    5200:	77 c0       	rjmp	.+238    	; 0x52f0 <PWM_voidPWM_OCR_Value+0x17a>
    5202:	8f 81       	ldd	r24, Y+7	; 0x07
    5204:	98 85       	ldd	r25, Y+8	; 0x08
    5206:	84 30       	cpi	r24, 0x04	; 4
    5208:	91 05       	cpc	r25, r1
    520a:	09 f4       	brne	.+2      	; 0x520e <PWM_voidPWM_OCR_Value+0x98>
    520c:	78 c0       	rjmp	.+240    	; 0x52fe <PWM_voidPWM_OCR_Value+0x188>
    520e:	ed c0       	rjmp	.+474    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
    5210:	2f 81       	ldd	r18, Y+7	; 0x07
    5212:	38 85       	ldd	r19, Y+8	; 0x08
    5214:	27 30       	cpi	r18, 0x07	; 7
    5216:	31 05       	cpc	r19, r1
    5218:	09 f4       	brne	.+2      	; 0x521c <PWM_voidPWM_OCR_Value+0xa6>
    521a:	86 c0       	rjmp	.+268    	; 0x5328 <PWM_voidPWM_OCR_Value+0x1b2>
    521c:	8f 81       	ldd	r24, Y+7	; 0x07
    521e:	98 85       	ldd	r25, Y+8	; 0x08
    5220:	87 30       	cpi	r24, 0x07	; 7
    5222:	91 05       	cpc	r25, r1
    5224:	0c f4       	brge	.+2      	; 0x5228 <PWM_voidPWM_OCR_Value+0xb2>
    5226:	79 c0       	rjmp	.+242    	; 0x531a <PWM_voidPWM_OCR_Value+0x1a4>
    5228:	2f 81       	ldd	r18, Y+7	; 0x07
    522a:	38 85       	ldd	r19, Y+8	; 0x08
    522c:	28 30       	cpi	r18, 0x08	; 8
    522e:	31 05       	cpc	r19, r1
    5230:	09 f4       	brne	.+2      	; 0x5234 <PWM_voidPWM_OCR_Value+0xbe>
    5232:	81 c0       	rjmp	.+258    	; 0x5336 <PWM_voidPWM_OCR_Value+0x1c0>
    5234:	8f 81       	ldd	r24, Y+7	; 0x07
    5236:	98 85       	ldd	r25, Y+8	; 0x08
    5238:	89 30       	cpi	r24, 0x09	; 9
    523a:	91 05       	cpc	r25, r1
    523c:	09 f4       	brne	.+2      	; 0x5240 <PWM_voidPWM_OCR_Value+0xca>
    523e:	82 c0       	rjmp	.+260    	; 0x5344 <PWM_voidPWM_OCR_Value+0x1ce>
    5240:	d4 c0       	rjmp	.+424    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
    5242:	2f 81       	ldd	r18, Y+7	; 0x07
    5244:	38 85       	ldd	r19, Y+8	; 0x08
    5246:	2f 30       	cpi	r18, 0x0F	; 15
    5248:	31 05       	cpc	r19, r1
    524a:	09 f4       	brne	.+2      	; 0x524e <PWM_voidPWM_OCR_Value+0xd8>
    524c:	a5 c0       	rjmp	.+330    	; 0x5398 <PWM_voidPWM_OCR_Value+0x222>
    524e:	8f 81       	ldd	r24, Y+7	; 0x07
    5250:	98 85       	ldd	r25, Y+8	; 0x08
    5252:	80 31       	cpi	r24, 0x10	; 16
    5254:	91 05       	cpc	r25, r1
    5256:	cc f4       	brge	.+50     	; 0x528a <PWM_voidPWM_OCR_Value+0x114>
    5258:	2f 81       	ldd	r18, Y+7	; 0x07
    525a:	38 85       	ldd	r19, Y+8	; 0x08
    525c:	2c 30       	cpi	r18, 0x0C	; 12
    525e:	31 05       	cpc	r19, r1
    5260:	09 f4       	brne	.+2      	; 0x5264 <PWM_voidPWM_OCR_Value+0xee>
    5262:	85 c0       	rjmp	.+266    	; 0x536e <PWM_voidPWM_OCR_Value+0x1f8>
    5264:	8f 81       	ldd	r24, Y+7	; 0x07
    5266:	98 85       	ldd	r25, Y+8	; 0x08
    5268:	8c 30       	cpi	r24, 0x0C	; 12
    526a:	91 05       	cpc	r25, r1
    526c:	0c f4       	brge	.+2      	; 0x5270 <PWM_voidPWM_OCR_Value+0xfa>
    526e:	78 c0       	rjmp	.+240    	; 0x5360 <PWM_voidPWM_OCR_Value+0x1ea>
    5270:	2f 81       	ldd	r18, Y+7	; 0x07
    5272:	38 85       	ldd	r19, Y+8	; 0x08
    5274:	2d 30       	cpi	r18, 0x0D	; 13
    5276:	31 05       	cpc	r19, r1
    5278:	09 f4       	brne	.+2      	; 0x527c <PWM_voidPWM_OCR_Value+0x106>
    527a:	80 c0       	rjmp	.+256    	; 0x537c <PWM_voidPWM_OCR_Value+0x206>
    527c:	8f 81       	ldd	r24, Y+7	; 0x07
    527e:	98 85       	ldd	r25, Y+8	; 0x08
    5280:	8e 30       	cpi	r24, 0x0E	; 14
    5282:	91 05       	cpc	r25, r1
    5284:	09 f4       	brne	.+2      	; 0x5288 <PWM_voidPWM_OCR_Value+0x112>
    5286:	81 c0       	rjmp	.+258    	; 0x538a <PWM_voidPWM_OCR_Value+0x214>
    5288:	b0 c0       	rjmp	.+352    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
    528a:	2f 81       	ldd	r18, Y+7	; 0x07
    528c:	38 85       	ldd	r19, Y+8	; 0x08
    528e:	22 31       	cpi	r18, 0x12	; 18
    5290:	31 05       	cpc	r19, r1
    5292:	09 f4       	brne	.+2      	; 0x5296 <PWM_voidPWM_OCR_Value+0x120>
    5294:	96 c0       	rjmp	.+300    	; 0x53c2 <PWM_voidPWM_OCR_Value+0x24c>
    5296:	8f 81       	ldd	r24, Y+7	; 0x07
    5298:	98 85       	ldd	r25, Y+8	; 0x08
    529a:	83 31       	cpi	r24, 0x13	; 19
    529c:	91 05       	cpc	r25, r1
    529e:	6c f4       	brge	.+26     	; 0x52ba <PWM_voidPWM_OCR_Value+0x144>
    52a0:	2f 81       	ldd	r18, Y+7	; 0x07
    52a2:	38 85       	ldd	r19, Y+8	; 0x08
    52a4:	20 31       	cpi	r18, 0x10	; 16
    52a6:	31 05       	cpc	r19, r1
    52a8:	09 f4       	brne	.+2      	; 0x52ac <PWM_voidPWM_OCR_Value+0x136>
    52aa:	7d c0       	rjmp	.+250    	; 0x53a6 <PWM_voidPWM_OCR_Value+0x230>
    52ac:	8f 81       	ldd	r24, Y+7	; 0x07
    52ae:	98 85       	ldd	r25, Y+8	; 0x08
    52b0:	81 31       	cpi	r24, 0x11	; 17
    52b2:	91 05       	cpc	r25, r1
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <PWM_voidPWM_OCR_Value+0x142>
    52b6:	7e c0       	rjmp	.+252    	; 0x53b4 <PWM_voidPWM_OCR_Value+0x23e>
    52b8:	98 c0       	rjmp	.+304    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
    52ba:	2f 81       	ldd	r18, Y+7	; 0x07
    52bc:	38 85       	ldd	r19, Y+8	; 0x08
    52be:	23 31       	cpi	r18, 0x13	; 19
    52c0:	31 05       	cpc	r19, r1
    52c2:	09 f4       	brne	.+2      	; 0x52c6 <PWM_voidPWM_OCR_Value+0x150>
    52c4:	85 c0       	rjmp	.+266    	; 0x53d0 <PWM_voidPWM_OCR_Value+0x25a>
    52c6:	8f 81       	ldd	r24, Y+7	; 0x07
    52c8:	98 85       	ldd	r25, Y+8	; 0x08
    52ca:	84 31       	cpi	r24, 0x14	; 20
    52cc:	91 05       	cpc	r25, r1
    52ce:	09 f4       	brne	.+2      	; 0x52d2 <PWM_voidPWM_OCR_Value+0x15c>
    52d0:	86 c0       	rjmp	.+268    	; 0x53de <PWM_voidPWM_OCR_Value+0x268>
    52d2:	8b c0       	rjmp	.+278    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
		{
			case FREQ_20_HZ  :
			PWM_OCR1AL = value ;
    52d4:	ea e4       	ldi	r30, 0x4A	; 74
    52d6:	f0 e0       	ldi	r31, 0x00	; 0
    52d8:	89 81       	ldd	r24, Y+1	; 0x01
    52da:	9a 81       	ldd	r25, Y+2	; 0x02
    52dc:	91 83       	std	Z+1, r25	; 0x01
    52de:	80 83       	st	Z, r24
    52e0:	84 c0       	rjmp	.+264    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_25_HZ  :
			PWM_OCR1AL = value;
    52e2:	ea e4       	ldi	r30, 0x4A	; 74
    52e4:	f0 e0       	ldi	r31, 0x00	; 0
    52e6:	89 81       	ldd	r24, Y+1	; 0x01
    52e8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ea:	91 83       	std	Z+1, r25	; 0x01
    52ec:	80 83       	st	Z, r24
    52ee:	7d c0       	rjmp	.+250    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			 break;
			case FREQ_40_HZ  :
			PWM_OCR1AL= value;
    52f0:	ea e4       	ldi	r30, 0x4A	; 74
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	9a 81       	ldd	r25, Y+2	; 0x02
    52f8:	91 83       	std	Z+1, r25	; 0x01
    52fa:	80 83       	st	Z, r24
    52fc:	76 c0       	rjmp	.+236    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			  break;
			case FREQ_50_HZ  :
			PWM_OCR1AL= value;
    52fe:	ea e4       	ldi	r30, 0x4A	; 74
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	89 81       	ldd	r24, Y+1	; 0x01
    5304:	9a 81       	ldd	r25, Y+2	; 0x02
    5306:	91 83       	std	Z+1, r25	; 0x01
    5308:	80 83       	st	Z, r24
    530a:	6f c0       	rjmp	.+222    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			 break;
			case FREQ_80_HZ  :
			PWM_OCR1AL= value;
    530c:	ea e4       	ldi	r30, 0x4A	; 74
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	9a 81       	ldd	r25, Y+2	; 0x02
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	80 83       	st	Z, r24
    5318:	68 c0       	rjmp	.+208    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_100_HZ  :
			PWM_OCR1AL= value;
    531a:	ea e4       	ldi	r30, 0x4A	; 74
    531c:	f0 e0       	ldi	r31, 0x00	; 0
    531e:	89 81       	ldd	r24, Y+1	; 0x01
    5320:	9a 81       	ldd	r25, Y+2	; 0x02
    5322:	91 83       	std	Z+1, r25	; 0x01
    5324:	80 83       	st	Z, r24
    5326:	61 c0       	rjmp	.+194    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_125_HZ  :
			PWM_OCR1AL= value;
    5328:	ea e4       	ldi	r30, 0x4A	; 74
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	89 81       	ldd	r24, Y+1	; 0x01
    532e:	9a 81       	ldd	r25, Y+2	; 0x02
    5330:	91 83       	std	Z+1, r25	; 0x01
    5332:	80 83       	st	Z, r24
    5334:	5a c0       	rjmp	.+180    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_200_HZ  :
			PWM_OCR1AL= value;
    5336:	ea e4       	ldi	r30, 0x4A	; 74
    5338:	f0 e0       	ldi	r31, 0x00	; 0
    533a:	89 81       	ldd	r24, Y+1	; 0x01
    533c:	9a 81       	ldd	r25, Y+2	; 0x02
    533e:	91 83       	std	Z+1, r25	; 0x01
    5340:	80 83       	st	Z, r24
    5342:	53 c0       	rjmp	.+166    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_250_HZ  :
			PWM_OCR1AL= value;
    5344:	ea e4       	ldi	r30, 0x4A	; 74
    5346:	f0 e0       	ldi	r31, 0x00	; 0
    5348:	89 81       	ldd	r24, Y+1	; 0x01
    534a:	9a 81       	ldd	r25, Y+2	; 0x02
    534c:	91 83       	std	Z+1, r25	; 0x01
    534e:	80 83       	st	Z, r24
    5350:	4c c0       	rjmp	.+152    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_400_HZ  :
			PWM_OCR1AL = value;
    5352:	ea e4       	ldi	r30, 0x4A	; 74
    5354:	f0 e0       	ldi	r31, 0x00	; 0
    5356:	89 81       	ldd	r24, Y+1	; 0x01
    5358:	9a 81       	ldd	r25, Y+2	; 0x02
    535a:	91 83       	std	Z+1, r25	; 0x01
    535c:	80 83       	st	Z, r24
    535e:	45 c0       	rjmp	.+138    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_500_HZ  :
			PWM_OCR1AL= value;
    5360:	ea e4       	ldi	r30, 0x4A	; 74
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	9a 81       	ldd	r25, Y+2	; 0x02
    5368:	91 83       	std	Z+1, r25	; 0x01
    536a:	80 83       	st	Z, r24
    536c:	3e c0       	rjmp	.+124    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_1000_HZ  :
			PWM_OCR1AL= value;
    536e:	ea e4       	ldi	r30, 0x4A	; 74
    5370:	f0 e0       	ldi	r31, 0x00	; 0
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	9a 81       	ldd	r25, Y+2	; 0x02
    5376:	91 83       	std	Z+1, r25	; 0x01
    5378:	80 83       	st	Z, r24
    537a:	37 c0       	rjmp	.+110    	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_1250_HZ  :
			PWM_OCR1AL= value;
    537c:	ea e4       	ldi	r30, 0x4A	; 74
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	9a 81       	ldd	r25, Y+2	; 0x02
    5384:	91 83       	std	Z+1, r25	; 0x01
    5386:	80 83       	st	Z, r24
    5388:	30 c0       	rjmp	.+96     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_2000_HZ  :
			PWM_OCR1AL= value;
    538a:	ea e4       	ldi	r30, 0x4A	; 74
    538c:	f0 e0       	ldi	r31, 0x00	; 0
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
    5392:	91 83       	std	Z+1, r25	; 0x01
    5394:	80 83       	st	Z, r24
    5396:	29 c0       	rjmp	.+82     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_2500_HZ  :
			PWM_OCR1AL= value;
    5398:	ea e4       	ldi	r30, 0x4A	; 74
    539a:	f0 e0       	ldi	r31, 0x00	; 0
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	9a 81       	ldd	r25, Y+2	; 0x02
    53a0:	91 83       	std	Z+1, r25	; 0x01
    53a2:	80 83       	st	Z, r24
    53a4:	22 c0       	rjmp	.+68     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_4000_HZ  :
			PWM_OCR1AL= value;
    53a6:	ea e4       	ldi	r30, 0x4A	; 74
    53a8:	f0 e0       	ldi	r31, 0x00	; 0
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	91 83       	std	Z+1, r25	; 0x01
    53b0:	80 83       	st	Z, r24
    53b2:	1b c0       	rjmp	.+54     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_5000_HZ  :
			PWM_OCR1AL=value;
    53b4:	ea e4       	ldi	r30, 0x4A	; 74
    53b6:	f0 e0       	ldi	r31, 0x00	; 0
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	9a 81       	ldd	r25, Y+2	; 0x02
    53bc:	91 83       	std	Z+1, r25	; 0x01
    53be:	80 83       	st	Z, r24
    53c0:	14 c0       	rjmp	.+40     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_10000_HZ  :
			PWM_OCR1AL= value;
    53c2:	ea e4       	ldi	r30, 0x4A	; 74
    53c4:	f0 e0       	ldi	r31, 0x00	; 0
    53c6:	89 81       	ldd	r24, Y+1	; 0x01
    53c8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	80 83       	st	Z, r24
    53ce:	0d c0       	rjmp	.+26     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_25000_HZ  :
			PWM_OCR1AL= value;
    53d0:	ea e4       	ldi	r30, 0x4A	; 74
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	89 81       	ldd	r24, Y+1	; 0x01
    53d6:	9a 81       	ldd	r25, Y+2	; 0x02
    53d8:	91 83       	std	Z+1, r25	; 0x01
    53da:	80 83       	st	Z, r24
    53dc:	06 c0       	rjmp	.+12     	; 0x53ea <PWM_voidPWM_OCR_Value+0x274>
			break;
			case FREQ_50000_HZ  :
			PWM_OCR1AL= value;
    53de:	ea e4       	ldi	r30, 0x4A	; 74
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	9a 81       	ldd	r25, Y+2	; 0x02
    53e6:	91 83       	std	Z+1, r25	; 0x01
    53e8:	80 83       	st	Z, r24
			break;
		}
    }
	if (channel == PWM_CHANNEL_2)
    53ea:	8b 81       	ldd	r24, Y+3	; 0x03
    53ec:	82 30       	cpi	r24, 0x02	; 2
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <PWM_voidPWM_OCR_Value+0x27c>
    53f0:	28 c1       	rjmp	.+592    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
	{
		switch (frequency)
    53f2:	8c 81       	ldd	r24, Y+4	; 0x04
    53f4:	28 2f       	mov	r18, r24
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	3e 83       	std	Y+6, r19	; 0x06
    53fa:	2d 83       	std	Y+5, r18	; 0x05
    53fc:	8d 81       	ldd	r24, Y+5	; 0x05
    53fe:	9e 81       	ldd	r25, Y+6	; 0x06
    5400:	8a 30       	cpi	r24, 0x0A	; 10
    5402:	91 05       	cpc	r25, r1
    5404:	09 f4       	brne	.+2      	; 0x5408 <PWM_voidPWM_OCR_Value+0x292>
    5406:	d1 c0       	rjmp	.+418    	; 0x55aa <PWM_voidPWM_OCR_Value+0x434>
    5408:	2d 81       	ldd	r18, Y+5	; 0x05
    540a:	3e 81       	ldd	r19, Y+6	; 0x06
    540c:	2b 30       	cpi	r18, 0x0B	; 11
    540e:	31 05       	cpc	r19, r1
    5410:	0c f0       	brlt	.+2      	; 0x5414 <PWM_voidPWM_OCR_Value+0x29e>
    5412:	43 c0       	rjmp	.+134    	; 0x549a <PWM_voidPWM_OCR_Value+0x324>
    5414:	8d 81       	ldd	r24, Y+5	; 0x05
    5416:	9e 81       	ldd	r25, Y+6	; 0x06
    5418:	85 30       	cpi	r24, 0x05	; 5
    541a:	91 05       	cpc	r25, r1
    541c:	09 f4       	brne	.+2      	; 0x5420 <PWM_voidPWM_OCR_Value+0x2aa>
    541e:	a2 c0       	rjmp	.+324    	; 0x5564 <PWM_voidPWM_OCR_Value+0x3ee>
    5420:	2d 81       	ldd	r18, Y+5	; 0x05
    5422:	3e 81       	ldd	r19, Y+6	; 0x06
    5424:	26 30       	cpi	r18, 0x06	; 6
    5426:	31 05       	cpc	r19, r1
    5428:	fc f4       	brge	.+62     	; 0x5468 <PWM_voidPWM_OCR_Value+0x2f2>
    542a:	8d 81       	ldd	r24, Y+5	; 0x05
    542c:	9e 81       	ldd	r25, Y+6	; 0x06
    542e:	82 30       	cpi	r24, 0x02	; 2
    5430:	91 05       	cpc	r25, r1
    5432:	09 f4       	brne	.+2      	; 0x5436 <PWM_voidPWM_OCR_Value+0x2c0>
    5434:	82 c0       	rjmp	.+260    	; 0x553a <PWM_voidPWM_OCR_Value+0x3c4>
    5436:	2d 81       	ldd	r18, Y+5	; 0x05
    5438:	3e 81       	ldd	r19, Y+6	; 0x06
    543a:	23 30       	cpi	r18, 0x03	; 3
    543c:	31 05       	cpc	r19, r1
    543e:	3c f4       	brge	.+14     	; 0x544e <PWM_voidPWM_OCR_Value+0x2d8>
    5440:	8d 81       	ldd	r24, Y+5	; 0x05
    5442:	9e 81       	ldd	r25, Y+6	; 0x06
    5444:	81 30       	cpi	r24, 0x01	; 1
    5446:	91 05       	cpc	r25, r1
    5448:	09 f4       	brne	.+2      	; 0x544c <PWM_voidPWM_OCR_Value+0x2d6>
    544a:	70 c0       	rjmp	.+224    	; 0x552c <PWM_voidPWM_OCR_Value+0x3b6>
    544c:	fa c0       	rjmp	.+500    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
    544e:	2d 81       	ldd	r18, Y+5	; 0x05
    5450:	3e 81       	ldd	r19, Y+6	; 0x06
    5452:	23 30       	cpi	r18, 0x03	; 3
    5454:	31 05       	cpc	r19, r1
    5456:	09 f4       	brne	.+2      	; 0x545a <PWM_voidPWM_OCR_Value+0x2e4>
    5458:	77 c0       	rjmp	.+238    	; 0x5548 <PWM_voidPWM_OCR_Value+0x3d2>
    545a:	8d 81       	ldd	r24, Y+5	; 0x05
    545c:	9e 81       	ldd	r25, Y+6	; 0x06
    545e:	84 30       	cpi	r24, 0x04	; 4
    5460:	91 05       	cpc	r25, r1
    5462:	09 f4       	brne	.+2      	; 0x5466 <PWM_voidPWM_OCR_Value+0x2f0>
    5464:	78 c0       	rjmp	.+240    	; 0x5556 <PWM_voidPWM_OCR_Value+0x3e0>
    5466:	ed c0       	rjmp	.+474    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
    5468:	2d 81       	ldd	r18, Y+5	; 0x05
    546a:	3e 81       	ldd	r19, Y+6	; 0x06
    546c:	27 30       	cpi	r18, 0x07	; 7
    546e:	31 05       	cpc	r19, r1
    5470:	09 f4       	brne	.+2      	; 0x5474 <PWM_voidPWM_OCR_Value+0x2fe>
    5472:	86 c0       	rjmp	.+268    	; 0x5580 <PWM_voidPWM_OCR_Value+0x40a>
    5474:	8d 81       	ldd	r24, Y+5	; 0x05
    5476:	9e 81       	ldd	r25, Y+6	; 0x06
    5478:	87 30       	cpi	r24, 0x07	; 7
    547a:	91 05       	cpc	r25, r1
    547c:	0c f4       	brge	.+2      	; 0x5480 <PWM_voidPWM_OCR_Value+0x30a>
    547e:	79 c0       	rjmp	.+242    	; 0x5572 <PWM_voidPWM_OCR_Value+0x3fc>
    5480:	2d 81       	ldd	r18, Y+5	; 0x05
    5482:	3e 81       	ldd	r19, Y+6	; 0x06
    5484:	28 30       	cpi	r18, 0x08	; 8
    5486:	31 05       	cpc	r19, r1
    5488:	09 f4       	brne	.+2      	; 0x548c <PWM_voidPWM_OCR_Value+0x316>
    548a:	81 c0       	rjmp	.+258    	; 0x558e <PWM_voidPWM_OCR_Value+0x418>
    548c:	8d 81       	ldd	r24, Y+5	; 0x05
    548e:	9e 81       	ldd	r25, Y+6	; 0x06
    5490:	89 30       	cpi	r24, 0x09	; 9
    5492:	91 05       	cpc	r25, r1
    5494:	09 f4       	brne	.+2      	; 0x5498 <PWM_voidPWM_OCR_Value+0x322>
    5496:	82 c0       	rjmp	.+260    	; 0x559c <PWM_voidPWM_OCR_Value+0x426>
    5498:	d4 c0       	rjmp	.+424    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
    549a:	2d 81       	ldd	r18, Y+5	; 0x05
    549c:	3e 81       	ldd	r19, Y+6	; 0x06
    549e:	2f 30       	cpi	r18, 0x0F	; 15
    54a0:	31 05       	cpc	r19, r1
    54a2:	09 f4       	brne	.+2      	; 0x54a6 <PWM_voidPWM_OCR_Value+0x330>
    54a4:	a5 c0       	rjmp	.+330    	; 0x55f0 <PWM_voidPWM_OCR_Value+0x47a>
    54a6:	8d 81       	ldd	r24, Y+5	; 0x05
    54a8:	9e 81       	ldd	r25, Y+6	; 0x06
    54aa:	80 31       	cpi	r24, 0x10	; 16
    54ac:	91 05       	cpc	r25, r1
    54ae:	cc f4       	brge	.+50     	; 0x54e2 <PWM_voidPWM_OCR_Value+0x36c>
    54b0:	2d 81       	ldd	r18, Y+5	; 0x05
    54b2:	3e 81       	ldd	r19, Y+6	; 0x06
    54b4:	2c 30       	cpi	r18, 0x0C	; 12
    54b6:	31 05       	cpc	r19, r1
    54b8:	09 f4       	brne	.+2      	; 0x54bc <PWM_voidPWM_OCR_Value+0x346>
    54ba:	85 c0       	rjmp	.+266    	; 0x55c6 <PWM_voidPWM_OCR_Value+0x450>
    54bc:	8d 81       	ldd	r24, Y+5	; 0x05
    54be:	9e 81       	ldd	r25, Y+6	; 0x06
    54c0:	8c 30       	cpi	r24, 0x0C	; 12
    54c2:	91 05       	cpc	r25, r1
    54c4:	0c f4       	brge	.+2      	; 0x54c8 <PWM_voidPWM_OCR_Value+0x352>
    54c6:	78 c0       	rjmp	.+240    	; 0x55b8 <PWM_voidPWM_OCR_Value+0x442>
    54c8:	2d 81       	ldd	r18, Y+5	; 0x05
    54ca:	3e 81       	ldd	r19, Y+6	; 0x06
    54cc:	2d 30       	cpi	r18, 0x0D	; 13
    54ce:	31 05       	cpc	r19, r1
    54d0:	09 f4       	brne	.+2      	; 0x54d4 <PWM_voidPWM_OCR_Value+0x35e>
    54d2:	80 c0       	rjmp	.+256    	; 0x55d4 <PWM_voidPWM_OCR_Value+0x45e>
    54d4:	8d 81       	ldd	r24, Y+5	; 0x05
    54d6:	9e 81       	ldd	r25, Y+6	; 0x06
    54d8:	8e 30       	cpi	r24, 0x0E	; 14
    54da:	91 05       	cpc	r25, r1
    54dc:	09 f4       	brne	.+2      	; 0x54e0 <PWM_voidPWM_OCR_Value+0x36a>
    54de:	81 c0       	rjmp	.+258    	; 0x55e2 <PWM_voidPWM_OCR_Value+0x46c>
    54e0:	b0 c0       	rjmp	.+352    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
    54e2:	2d 81       	ldd	r18, Y+5	; 0x05
    54e4:	3e 81       	ldd	r19, Y+6	; 0x06
    54e6:	22 31       	cpi	r18, 0x12	; 18
    54e8:	31 05       	cpc	r19, r1
    54ea:	09 f4       	brne	.+2      	; 0x54ee <PWM_voidPWM_OCR_Value+0x378>
    54ec:	96 c0       	rjmp	.+300    	; 0x561a <PWM_voidPWM_OCR_Value+0x4a4>
    54ee:	8d 81       	ldd	r24, Y+5	; 0x05
    54f0:	9e 81       	ldd	r25, Y+6	; 0x06
    54f2:	83 31       	cpi	r24, 0x13	; 19
    54f4:	91 05       	cpc	r25, r1
    54f6:	6c f4       	brge	.+26     	; 0x5512 <PWM_voidPWM_OCR_Value+0x39c>
    54f8:	2d 81       	ldd	r18, Y+5	; 0x05
    54fa:	3e 81       	ldd	r19, Y+6	; 0x06
    54fc:	20 31       	cpi	r18, 0x10	; 16
    54fe:	31 05       	cpc	r19, r1
    5500:	09 f4       	brne	.+2      	; 0x5504 <PWM_voidPWM_OCR_Value+0x38e>
    5502:	7d c0       	rjmp	.+250    	; 0x55fe <PWM_voidPWM_OCR_Value+0x488>
    5504:	8d 81       	ldd	r24, Y+5	; 0x05
    5506:	9e 81       	ldd	r25, Y+6	; 0x06
    5508:	81 31       	cpi	r24, 0x11	; 17
    550a:	91 05       	cpc	r25, r1
    550c:	09 f4       	brne	.+2      	; 0x5510 <PWM_voidPWM_OCR_Value+0x39a>
    550e:	7e c0       	rjmp	.+252    	; 0x560c <PWM_voidPWM_OCR_Value+0x496>
    5510:	98 c0       	rjmp	.+304    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
    5512:	2d 81       	ldd	r18, Y+5	; 0x05
    5514:	3e 81       	ldd	r19, Y+6	; 0x06
    5516:	23 31       	cpi	r18, 0x13	; 19
    5518:	31 05       	cpc	r19, r1
    551a:	09 f4       	brne	.+2      	; 0x551e <PWM_voidPWM_OCR_Value+0x3a8>
    551c:	85 c0       	rjmp	.+266    	; 0x5628 <PWM_voidPWM_OCR_Value+0x4b2>
    551e:	8d 81       	ldd	r24, Y+5	; 0x05
    5520:	9e 81       	ldd	r25, Y+6	; 0x06
    5522:	84 31       	cpi	r24, 0x14	; 20
    5524:	91 05       	cpc	r25, r1
    5526:	09 f4       	brne	.+2      	; 0x552a <PWM_voidPWM_OCR_Value+0x3b4>
    5528:	86 c0       	rjmp	.+268    	; 0x5636 <PWM_voidPWM_OCR_Value+0x4c0>
    552a:	8b c0       	rjmp	.+278    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
		{
			case FREQ_20_HZ  :
			PWM_OCR1BL = value ;
    552c:	e8 e4       	ldi	r30, 0x48	; 72
    552e:	f0 e0       	ldi	r31, 0x00	; 0
    5530:	89 81       	ldd	r24, Y+1	; 0x01
    5532:	9a 81       	ldd	r25, Y+2	; 0x02
    5534:	91 83       	std	Z+1, r25	; 0x01
    5536:	80 83       	st	Z, r24
    5538:	84 c0       	rjmp	.+264    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_25_HZ  :
			PWM_OCR1BL = value;
    553a:	e8 e4       	ldi	r30, 0x48	; 72
    553c:	f0 e0       	ldi	r31, 0x00	; 0
    553e:	89 81       	ldd	r24, Y+1	; 0x01
    5540:	9a 81       	ldd	r25, Y+2	; 0x02
    5542:	91 83       	std	Z+1, r25	; 0x01
    5544:	80 83       	st	Z, r24
    5546:	7d c0       	rjmp	.+250    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			 break;
			case FREQ_40_HZ  :
			PWM_OCR1BL= value;
    5548:	e8 e4       	ldi	r30, 0x48	; 72
    554a:	f0 e0       	ldi	r31, 0x00	; 0
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	9a 81       	ldd	r25, Y+2	; 0x02
    5550:	91 83       	std	Z+1, r25	; 0x01
    5552:	80 83       	st	Z, r24
    5554:	76 c0       	rjmp	.+236    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			  break;
			case FREQ_50_HZ  :
			PWM_OCR1BL= value;
    5556:	e8 e4       	ldi	r30, 0x48	; 72
    5558:	f0 e0       	ldi	r31, 0x00	; 0
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	9a 81       	ldd	r25, Y+2	; 0x02
    555e:	91 83       	std	Z+1, r25	; 0x01
    5560:	80 83       	st	Z, r24
    5562:	6f c0       	rjmp	.+222    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			 break;
			case FREQ_80_HZ  :
			PWM_OCR1BL= value;
    5564:	e8 e4       	ldi	r30, 0x48	; 72
    5566:	f0 e0       	ldi	r31, 0x00	; 0
    5568:	89 81       	ldd	r24, Y+1	; 0x01
    556a:	9a 81       	ldd	r25, Y+2	; 0x02
    556c:	91 83       	std	Z+1, r25	; 0x01
    556e:	80 83       	st	Z, r24
    5570:	68 c0       	rjmp	.+208    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_100_HZ  :
			PWM_OCR1BL= value;
    5572:	e8 e4       	ldi	r30, 0x48	; 72
    5574:	f0 e0       	ldi	r31, 0x00	; 0
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	9a 81       	ldd	r25, Y+2	; 0x02
    557a:	91 83       	std	Z+1, r25	; 0x01
    557c:	80 83       	st	Z, r24
    557e:	61 c0       	rjmp	.+194    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_125_HZ  :
			PWM_OCR1BL= value;
    5580:	e8 e4       	ldi	r30, 0x48	; 72
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	89 81       	ldd	r24, Y+1	; 0x01
    5586:	9a 81       	ldd	r25, Y+2	; 0x02
    5588:	91 83       	std	Z+1, r25	; 0x01
    558a:	80 83       	st	Z, r24
    558c:	5a c0       	rjmp	.+180    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_200_HZ  :
			PWM_OCR1BL= value;
    558e:	e8 e4       	ldi	r30, 0x48	; 72
    5590:	f0 e0       	ldi	r31, 0x00	; 0
    5592:	89 81       	ldd	r24, Y+1	; 0x01
    5594:	9a 81       	ldd	r25, Y+2	; 0x02
    5596:	91 83       	std	Z+1, r25	; 0x01
    5598:	80 83       	st	Z, r24
    559a:	53 c0       	rjmp	.+166    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_250_HZ  :
			PWM_OCR1BL= value;
    559c:	e8 e4       	ldi	r30, 0x48	; 72
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	89 81       	ldd	r24, Y+1	; 0x01
    55a2:	9a 81       	ldd	r25, Y+2	; 0x02
    55a4:	91 83       	std	Z+1, r25	; 0x01
    55a6:	80 83       	st	Z, r24
    55a8:	4c c0       	rjmp	.+152    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_400_HZ  :
			PWM_OCR1BL = value;
    55aa:	e8 e4       	ldi	r30, 0x48	; 72
    55ac:	f0 e0       	ldi	r31, 0x00	; 0
    55ae:	89 81       	ldd	r24, Y+1	; 0x01
    55b0:	9a 81       	ldd	r25, Y+2	; 0x02
    55b2:	91 83       	std	Z+1, r25	; 0x01
    55b4:	80 83       	st	Z, r24
    55b6:	45 c0       	rjmp	.+138    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_500_HZ  :
			PWM_OCR1BL= value;
    55b8:	e8 e4       	ldi	r30, 0x48	; 72
    55ba:	f0 e0       	ldi	r31, 0x00	; 0
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	9a 81       	ldd	r25, Y+2	; 0x02
    55c0:	91 83       	std	Z+1, r25	; 0x01
    55c2:	80 83       	st	Z, r24
    55c4:	3e c0       	rjmp	.+124    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_1000_HZ  :
			PWM_OCR1BL= value;
    55c6:	e8 e4       	ldi	r30, 0x48	; 72
    55c8:	f0 e0       	ldi	r31, 0x00	; 0
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	9a 81       	ldd	r25, Y+2	; 0x02
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	80 83       	st	Z, r24
    55d2:	37 c0       	rjmp	.+110    	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_1250_HZ  :
			PWM_OCR1BL= value;
    55d4:	e8 e4       	ldi	r30, 0x48	; 72
    55d6:	f0 e0       	ldi	r31, 0x00	; 0
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	9a 81       	ldd	r25, Y+2	; 0x02
    55dc:	91 83       	std	Z+1, r25	; 0x01
    55de:	80 83       	st	Z, r24
    55e0:	30 c0       	rjmp	.+96     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_2000_HZ  :
			PWM_OCR1BL= value;
    55e2:	e8 e4       	ldi	r30, 0x48	; 72
    55e4:	f0 e0       	ldi	r31, 0x00	; 0
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	29 c0       	rjmp	.+82     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_2500_HZ  :
			PWM_OCR1BL= value;
    55f0:	e8 e4       	ldi	r30, 0x48	; 72
    55f2:	f0 e0       	ldi	r31, 0x00	; 0
    55f4:	89 81       	ldd	r24, Y+1	; 0x01
    55f6:	9a 81       	ldd	r25, Y+2	; 0x02
    55f8:	91 83       	std	Z+1, r25	; 0x01
    55fa:	80 83       	st	Z, r24
    55fc:	22 c0       	rjmp	.+68     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_4000_HZ  :
			PWM_OCR1BL= value;
    55fe:	e8 e4       	ldi	r30, 0x48	; 72
    5600:	f0 e0       	ldi	r31, 0x00	; 0
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	9a 81       	ldd	r25, Y+2	; 0x02
    5606:	91 83       	std	Z+1, r25	; 0x01
    5608:	80 83       	st	Z, r24
    560a:	1b c0       	rjmp	.+54     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_5000_HZ  :
			PWM_OCR1BL=value;
    560c:	e8 e4       	ldi	r30, 0x48	; 72
    560e:	f0 e0       	ldi	r31, 0x00	; 0
    5610:	89 81       	ldd	r24, Y+1	; 0x01
    5612:	9a 81       	ldd	r25, Y+2	; 0x02
    5614:	91 83       	std	Z+1, r25	; 0x01
    5616:	80 83       	st	Z, r24
    5618:	14 c0       	rjmp	.+40     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_10000_HZ  :
			PWM_OCR1BL= value;
    561a:	e8 e4       	ldi	r30, 0x48	; 72
    561c:	f0 e0       	ldi	r31, 0x00	; 0
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	9a 81       	ldd	r25, Y+2	; 0x02
    5622:	91 83       	std	Z+1, r25	; 0x01
    5624:	80 83       	st	Z, r24
    5626:	0d c0       	rjmp	.+26     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_25000_HZ  :
			PWM_OCR1BL= value;
    5628:	e8 e4       	ldi	r30, 0x48	; 72
    562a:	f0 e0       	ldi	r31, 0x00	; 0
    562c:	89 81       	ldd	r24, Y+1	; 0x01
    562e:	9a 81       	ldd	r25, Y+2	; 0x02
    5630:	91 83       	std	Z+1, r25	; 0x01
    5632:	80 83       	st	Z, r24
    5634:	06 c0       	rjmp	.+12     	; 0x5642 <PWM_voidPWM_OCR_Value+0x4cc>
			break;
			case FREQ_50000_HZ  :
			PWM_OCR1BL= value;
    5636:	e8 e4       	ldi	r30, 0x48	; 72
    5638:	f0 e0       	ldi	r31, 0x00	; 0
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	9a 81       	ldd	r25, Y+2	; 0x02
    563e:	91 83       	std	Z+1, r25	; 0x01
    5640:	80 83       	st	Z, r24
			break;
		}
	}
}
    5642:	28 96       	adiw	r28, 0x08	; 8
    5644:	0f b6       	in	r0, 0x3f	; 63
    5646:	f8 94       	cli
    5648:	de bf       	out	0x3e, r29	; 62
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	cd bf       	out	0x3d, r28	; 61
    564e:	cf 91       	pop	r28
    5650:	df 91       	pop	r29
    5652:	08 95       	ret

00005654 <SPI_voidMasterInit>:
#include"SPI_private.h"
 void (*call_back)(void);
 volatile static u8*ptr;

 void SPI_voidMasterInit (void)
 {
    5654:	df 93       	push	r29
    5656:	cf 93       	push	r28
    5658:	cd b7       	in	r28, 0x3d	; 61
    565a:	de b7       	in	r29, 0x3e	; 62
	 DIO_voidSetPinDirection(PORTB_ID,PIN4,PIN_INPUT);
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	64 e0       	ldi	r22, 0x04	; 4
    5660:	40 e0       	ldi	r20, 0x00	; 0
    5662:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	 DIO_voidSetPinDirection(PORTB_ID,PIN5,PIN_OUTPUT);
    5666:	81 e0       	ldi	r24, 0x01	; 1
    5668:	65 e0       	ldi	r22, 0x05	; 5
    566a:	41 e0       	ldi	r20, 0x01	; 1
    566c:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	 DIO_voidSetPinDirection(PORTB_ID,PIN6,PIN_INPUT);
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	66 e0       	ldi	r22, 0x06	; 6
    5674:	40 e0       	ldi	r20, 0x00	; 0
    5676:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	 DIO_voidSetPinDirection(PORTB_ID,PIN7,PIN_OUTPUT);
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	67 e0       	ldi	r22, 0x07	; 7
    567e:	41 e0       	ldi	r20, 0x01	; 1
    5680:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	 DIO_voidSetPinValue(PORTB_ID,PIN4,PIN_HIGH);
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	64 e0       	ldi	r22, 0x04	; 4
    5688:	41 e0       	ldi	r20, 0x01	; 1
    568a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	  DIO_voidSetPinDirection(PORTA_ID,PIN6,PIN_OUTPUT);
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	66 e0       	ldi	r22, 0x06	; 6
    5692:	41 e0       	ldi	r20, 0x01	; 1
    5694:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	  DIO_voidSetPinValue(PORTA_ID,PIN6,PIN_HIGH);
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	66 e0       	ldi	r22, 0x06	; 6
    569c:	41 e0       	ldi	r20, 0x01	; 1
    569e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	  DIO_voidSetPinDirection(PORTA_ID,PIN7,PIN_OUTPUT);
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	67 e0       	ldi	r22, 0x07	; 7
    56a6:	41 e0       	ldi	r20, 0x01	; 1
    56a8:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	  DIO_voidSetPinValue(PORTA_ID,PIN7,PIN_HIGH);
    56ac:	80 e0       	ldi	r24, 0x00	; 0
    56ae:	67 e0       	ldi	r22, 0x07	; 7
    56b0:	41 e0       	ldi	r20, 0x01	; 1
    56b2:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>

	  SPCR->MSTR=1;
    56b6:	ed e2       	ldi	r30, 0x2D	; 45
    56b8:	f0 e0       	ldi	r31, 0x00	; 0
    56ba:	80 81       	ld	r24, Z
    56bc:	80 61       	ori	r24, 0x10	; 16
    56be:	80 83       	st	Z, r24


	  SPCR->SPE=1;
    56c0:	ed e2       	ldi	r30, 0x2D	; 45
    56c2:	f0 e0       	ldi	r31, 0x00	; 0
    56c4:	80 81       	ld	r24, Z
    56c6:	80 64       	ori	r24, 0x40	; 64
    56c8:	80 83       	st	Z, r24
	  SPCR->SPR0_1=0b00;
    56ca:	ed e2       	ldi	r30, 0x2D	; 45
    56cc:	f0 e0       	ldi	r31, 0x00	; 0
    56ce:	80 81       	ld	r24, Z
    56d0:	8c 7f       	andi	r24, 0xFC	; 252
    56d2:	80 83       	st	Z, r24
	  SPSR &= ~(1<<SPI2X);
    56d4:	ae e2       	ldi	r26, 0x2E	; 46
    56d6:	b0 e0       	ldi	r27, 0x00	; 0
    56d8:	ee e2       	ldi	r30, 0x2E	; 46
    56da:	f0 e0       	ldi	r31, 0x00	; 0
    56dc:	80 81       	ld	r24, Z
    56de:	8e 7f       	andi	r24, 0xFE	; 254
    56e0:	8c 93       	st	X, r24
	  SPCR->DORD=0b1;  //sent LSB IN first
    56e2:	ed e2       	ldi	r30, 0x2D	; 45
    56e4:	f0 e0       	ldi	r31, 0x00	; 0
    56e6:	80 81       	ld	r24, Z
    56e8:	80 62       	ori	r24, 0x20	; 32
    56ea:	80 83       	st	Z, r24
	  SPCR->CPOL=0b0;
    56ec:	ed e2       	ldi	r30, 0x2D	; 45
    56ee:	f0 e0       	ldi	r31, 0x00	; 0
    56f0:	80 81       	ld	r24, Z
    56f2:	87 7f       	andi	r24, 0xF7	; 247
    56f4:	80 83       	st	Z, r24
	  SPCR->CPHA=0x0;
    56f6:	ed e2       	ldi	r30, 0x2D	; 45
    56f8:	f0 e0       	ldi	r31, 0x00	; 0
    56fa:	80 81       	ld	r24, Z
    56fc:	8b 7f       	andi	r24, 0xFB	; 251
    56fe:	80 83       	st	Z, r24
 }
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	08 95       	ret

00005706 <SPI_voidSlaveInit>:
 void SPI_voidSlaveInit (void)
  {
    5706:	df 93       	push	r29
    5708:	cf 93       	push	r28
    570a:	cd b7       	in	r28, 0x3d	; 61
    570c:	de b7       	in	r29, 0x3e	; 62
 	  DIO_voidSetPinDirection(PORTB_ID,PIN4,PIN_INPUT);
    570e:	81 e0       	ldi	r24, 0x01	; 1
    5710:	64 e0       	ldi	r22, 0x04	; 4
    5712:	40 e0       	ldi	r20, 0x00	; 0
    5714:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
 	  DIO_voidSetPinDirection(PORTB_ID,PIN5,PIN_INPUT);
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	65 e0       	ldi	r22, 0x05	; 5
    571c:	40 e0       	ldi	r20, 0x00	; 0
    571e:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
 	  DIO_voidSetPinDirection(PORTB_ID,PIN6,PIN_OUTPUT);
    5722:	81 e0       	ldi	r24, 0x01	; 1
    5724:	66 e0       	ldi	r22, 0x06	; 6
    5726:	41 e0       	ldi	r20, 0x01	; 1
    5728:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
 	  DIO_voidSetPinDirection(PORTB_ID,PIN7,PIN_INPUT);
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	67 e0       	ldi	r22, 0x07	; 7
    5730:	40 e0       	ldi	r20, 0x00	; 0
    5732:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
 	  SPCR->MSTR=0;
    5736:	ed e2       	ldi	r30, 0x2D	; 45
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	80 81       	ld	r24, Z
    573c:	8f 7e       	andi	r24, 0xEF	; 239
    573e:	80 83       	st	Z, r24
 	  SPCR-> SPIE=0b1;   //enable interrupt
    5740:	ed e2       	ldi	r30, 0x2D	; 45
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	80 68       	ori	r24, 0x80	; 128
    5748:	80 83       	st	Z, r24

 	  SPCR->SPE=1;
    574a:	ed e2       	ldi	r30, 0x2D	; 45
    574c:	f0 e0       	ldi	r31, 0x00	; 0
    574e:	80 81       	ld	r24, Z
    5750:	80 64       	ori	r24, 0x40	; 64
    5752:	80 83       	st	Z, r24
 	  SPCR->SPR0_1=0b00;
    5754:	ed e2       	ldi	r30, 0x2D	; 45
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	80 81       	ld	r24, Z
    575a:	8c 7f       	andi	r24, 0xFC	; 252
    575c:	80 83       	st	Z, r24
 	  SPSR &= ~(1<<SPI2X);
    575e:	ae e2       	ldi	r26, 0x2E	; 46
    5760:	b0 e0       	ldi	r27, 0x00	; 0
    5762:	ee e2       	ldi	r30, 0x2E	; 46
    5764:	f0 e0       	ldi	r31, 0x00	; 0
    5766:	80 81       	ld	r24, Z
    5768:	8e 7f       	andi	r24, 0xFE	; 254
    576a:	8c 93       	st	X, r24
 	  SPCR->DORD=0b1;  //sent LSB IN first
    576c:	ed e2       	ldi	r30, 0x2D	; 45
    576e:	f0 e0       	ldi	r31, 0x00	; 0
    5770:	80 81       	ld	r24, Z
    5772:	80 62       	ori	r24, 0x20	; 32
    5774:	80 83       	st	Z, r24
 	  SPCR->CPOL=0b0;
    5776:	ed e2       	ldi	r30, 0x2D	; 45
    5778:	f0 e0       	ldi	r31, 0x00	; 0
    577a:	80 81       	ld	r24, Z
    577c:	87 7f       	andi	r24, 0xF7	; 247
    577e:	80 83       	st	Z, r24
 	  SPCR->CPHA=0x0;
    5780:	ed e2       	ldi	r30, 0x2D	; 45
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	80 81       	ld	r24, Z
    5786:	8b 7f       	andi	r24, 0xFB	; 251
    5788:	80 83       	st	Z, r24
  }
    578a:	cf 91       	pop	r28
    578c:	df 91       	pop	r29
    578e:	08 95       	ret

00005790 <SPI_voidWriteChar>:
u8 SPI_voidWriteChar(u8 copy_data)
{
    5790:	df 93       	push	r29
    5792:	cf 93       	push	r28
    5794:	0f 92       	push	r0
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
    579a:	89 83       	std	Y+1, r24	; 0x01

	SPDR = copy_data;
    579c:	ef e2       	ldi	r30, 0x2F	; 47
    579e:	f0 e0       	ldi	r31, 0x00	; 0
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
    57a4:	ee e2       	ldi	r30, 0x2E	; 46
    57a6:	f0 e0       	ldi	r31, 0x00	; 0
    57a8:	80 81       	ld	r24, Z
    57aa:	88 23       	and	r24, r24
    57ac:	dc f7       	brge	.-10     	; 0x57a4 <SPI_voidWriteChar+0x14>

	return(SPDR);
    57ae:	ef e2       	ldi	r30, 0x2F	; 47
    57b0:	f0 e0       	ldi	r31, 0x00	; 0
    57b2:	80 81       	ld	r24, Z
}
    57b4:	0f 90       	pop	r0
    57b6:	cf 91       	pop	r28
    57b8:	df 91       	pop	r29
    57ba:	08 95       	ret

000057bc <SPI_voidReadChar>:
u8 SPI_voidReadChar(void)
{
    57bc:	df 93       	push	r29
    57be:	cf 93       	push	r28
    57c0:	cd b7       	in	r28, 0x3d	; 61
    57c2:	de b7       	in	r29, 0x3e	; 62
	//SPDR = 0x00;
	while(!(SPSR & (1<<SPIF)));
    57c4:	ee e2       	ldi	r30, 0x2E	; 46
    57c6:	f0 e0       	ldi	r31, 0x00	; 0
    57c8:	80 81       	ld	r24, Z
    57ca:	88 23       	and	r24, r24
    57cc:	dc f7       	brge	.-10     	; 0x57c4 <SPI_voidReadChar+0x8>
	return SPDR;	
    57ce:	ef e2       	ldi	r30, 0x2F	; 47
    57d0:	f0 e0       	ldi	r31, 0x00	; 0
    57d2:	80 81       	ld	r24, Z
}
    57d4:	cf 91       	pop	r28
    57d6:	df 91       	pop	r29
    57d8:	08 95       	ret

000057da <SPI_voidWriteAsysChar>:
void SPI_voidWriteAsysChar(u8 *pt)
{
    57da:	df 93       	push	r29
    57dc:	cf 93       	push	r28
    57de:	00 d0       	rcall	.+0      	; 0x57e0 <SPI_voidWriteAsysChar+0x6>
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	9a 83       	std	Y+2, r25	; 0x02
    57e6:	89 83       	std	Y+1, r24	; 0x01
	ptr=pt;
    57e8:	89 81       	ldd	r24, Y+1	; 0x01
    57ea:	9a 81       	ldd	r25, Y+2	; 0x02
    57ec:	90 93 b4 01 	sts	0x01B4, r25
    57f0:	80 93 b3 01 	sts	0x01B3, r24
}
    57f4:	0f 90       	pop	r0
    57f6:	0f 90       	pop	r0
    57f8:	cf 91       	pop	r28
    57fa:	df 91       	pop	r29
    57fc:	08 95       	ret

000057fe <__vector_12>:
void __vector_12(void)  __attribute__((signal,used));

void __vector_12(void)
{  
    57fe:	1f 92       	push	r1
    5800:	0f 92       	push	r0
    5802:	0f b6       	in	r0, 0x3f	; 63
    5804:	0f 92       	push	r0
    5806:	11 24       	eor	r1, r1
    5808:	8f 93       	push	r24
    580a:	af 93       	push	r26
    580c:	bf 93       	push	r27
    580e:	ef 93       	push	r30
    5810:	ff 93       	push	r31
    5812:	df 93       	push	r29
    5814:	cf 93       	push	r28
    5816:	cd b7       	in	r28, 0x3d	; 61
    5818:	de b7       	in	r29, 0x3e	; 62
	SPDR=*ptr;
    581a:	ef e2       	ldi	r30, 0x2F	; 47
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	a0 91 b3 01 	lds	r26, 0x01B3
    5822:	b0 91 b4 01 	lds	r27, 0x01B4
    5826:	8c 91       	ld	r24, X
    5828:	80 83       	st	Z, r24
	//DIO_voidTogglePin(PORTA_ID,PIN3);

	//ADC_voidStartConversion();

}
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	ff 91       	pop	r31
    5830:	ef 91       	pop	r30
    5832:	bf 91       	pop	r27
    5834:	af 91       	pop	r26
    5836:	8f 91       	pop	r24
    5838:	0f 90       	pop	r0
    583a:	0f be       	out	0x3f, r0	; 63
    583c:	0f 90       	pop	r0
    583e:	1f 90       	pop	r1
    5840:	18 95       	reti

00005842 <HSERVO_voidInit>:
#include "Servo_config.h"
#include "Servo_private.h"


void HSERVO_voidInit(void)
{
    5842:	df 93       	push	r29
    5844:	cf 93       	push	r28
    5846:	cd b7       	in	r28, 0x3d	; 61
    5848:	de b7       	in	r29, 0x3e	; 62
	/* Set servo pin as output pin */
	DIO_voidSetPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
    584a:	83 e0       	ldi	r24, 0x03	; 3
    584c:	65 e0       	ldi	r22, 0x05	; 5
    584e:	41 e0       	ldi	r20, 0x01	; 1
    5850:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	TIMER1_voidInit();
    5854:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <TIMER1_voidInit>
	ICR1=19999; // to implement duty cycle with 20ms time period (20000*tick_time(==1ms) )
    5858:	e6 e4       	ldi	r30, 0x46	; 70
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	8f e1       	ldi	r24, 0x1F	; 31
    585e:	9e e4       	ldi	r25, 0x4E	; 78
    5860:	91 83       	std	Z+1, r25	; 0x01
    5862:	80 83       	st	Z, r24
}
    5864:	cf 91       	pop	r28
    5866:	df 91       	pop	r29
    5868:	08 95       	ret

0000586a <HSERVO_voidRotate>:

void HSERVO_voidRotate(f32 Copy_f32Angle)
{
    586a:	df 93       	push	r29
    586c:	cf 93       	push	r28
    586e:	00 d0       	rcall	.+0      	; 0x5870 <HSERVO_voidRotate+0x6>
    5870:	00 d0       	rcall	.+0      	; 0x5872 <HSERVO_voidRotate+0x8>
    5872:	cd b7       	in	r28, 0x3d	; 61
    5874:	de b7       	in	r29, 0x3e	; 62
    5876:	69 83       	std	Y+1, r22	; 0x01
    5878:	7a 83       	std	Y+2, r23	; 0x02
    587a:	8b 83       	std	Y+3, r24	; 0x03
    587c:	9c 83       	std	Y+4, r25	; 0x04
	if ( (Copy_f32Angle>=MINIMUM_ANGLE) && (Copy_f32Angle<=MAXIMUM_ANGLE) )
    587e:	69 81       	ldd	r22, Y+1	; 0x01
    5880:	7a 81       	ldd	r23, Y+2	; 0x02
    5882:	8b 81       	ldd	r24, Y+3	; 0x03
    5884:	9c 81       	ldd	r25, Y+4	; 0x04
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	44 eb       	ldi	r20, 0xB4	; 180
    588c:	52 ec       	ldi	r21, 0xC2	; 194
    588e:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    5892:	88 23       	and	r24, r24
    5894:	0c f4       	brge	.+2      	; 0x5898 <HSERVO_voidRotate+0x2e>
    5896:	44 c0       	rjmp	.+136    	; 0x5920 <HSERVO_voidRotate+0xb6>
    5898:	69 81       	ldd	r22, Y+1	; 0x01
    589a:	7a 81       	ldd	r23, Y+2	; 0x02
    589c:	8b 81       	ldd	r24, Y+3	; 0x03
    589e:	9c 81       	ldd	r25, Y+4	; 0x04
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	44 eb       	ldi	r20, 0xB4	; 180
    58a6:	52 e4       	ldi	r21, 0x42	; 66
    58a8:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    58ac:	18 16       	cp	r1, r24
    58ae:	c4 f1       	brlt	.+112    	; 0x5920 <HSERVO_voidRotate+0xb6>
	{
		if (Copy_f32Angle==-90)
    58b0:	69 81       	ldd	r22, Y+1	; 0x01
    58b2:	7a 81       	ldd	r23, Y+2	; 0x02
    58b4:	8b 81       	ldd	r24, Y+3	; 0x03
    58b6:	9c 81       	ldd	r25, Y+4	; 0x04
    58b8:	20 e0       	ldi	r18, 0x00	; 0
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	44 eb       	ldi	r20, 0xB4	; 180
    58be:	52 ec       	ldi	r21, 0xC2	; 194
    58c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    58c4:	88 23       	and	r24, r24
    58c6:	39 f4       	brne	.+14     	; 0x58d6 <HSERVO_voidRotate+0x6c>
		{
			OCR1A=1000;
    58c8:	ea e4       	ldi	r30, 0x4A	; 74
    58ca:	f0 e0       	ldi	r31, 0x00	; 0
    58cc:	88 ee       	ldi	r24, 0xE8	; 232
    58ce:	93 e0       	ldi	r25, 0x03	; 3
    58d0:	91 83       	std	Z+1, r25	; 0x01
    58d2:	80 83       	st	Z, r24
    58d4:	25 c0       	rjmp	.+74     	; 0x5920 <HSERVO_voidRotate+0xb6>
		}
		else if (Copy_f32Angle==0)
    58d6:	69 81       	ldd	r22, Y+1	; 0x01
    58d8:	7a 81       	ldd	r23, Y+2	; 0x02
    58da:	8b 81       	ldd	r24, Y+3	; 0x03
    58dc:	9c 81       	ldd	r25, Y+4	; 0x04
    58de:	20 e0       	ldi	r18, 0x00	; 0
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	40 e0       	ldi	r20, 0x00	; 0
    58e4:	50 e0       	ldi	r21, 0x00	; 0
    58e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    58ea:	88 23       	and	r24, r24
    58ec:	39 f4       	brne	.+14     	; 0x58fc <HSERVO_voidRotate+0x92>
		{
			OCR1A=1500;
    58ee:	ea e4       	ldi	r30, 0x4A	; 74
    58f0:	f0 e0       	ldi	r31, 0x00	; 0
    58f2:	8c ed       	ldi	r24, 0xDC	; 220
    58f4:	95 e0       	ldi	r25, 0x05	; 5
    58f6:	91 83       	std	Z+1, r25	; 0x01
    58f8:	80 83       	st	Z, r24
    58fa:	12 c0       	rjmp	.+36     	; 0x5920 <HSERVO_voidRotate+0xb6>
			
		}
		else if (Copy_f32Angle==90)
    58fc:	69 81       	ldd	r22, Y+1	; 0x01
    58fe:	7a 81       	ldd	r23, Y+2	; 0x02
    5900:	8b 81       	ldd	r24, Y+3	; 0x03
    5902:	9c 81       	ldd	r25, Y+4	; 0x04
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	44 eb       	ldi	r20, 0xB4	; 180
    590a:	52 e4       	ldi	r21, 0x42	; 66
    590c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    5910:	88 23       	and	r24, r24
    5912:	31 f4       	brne	.+12     	; 0x5920 <HSERVO_voidRotate+0xb6>
		{
			OCR1A=2000;
    5914:	ea e4       	ldi	r30, 0x4A	; 74
    5916:	f0 e0       	ldi	r31, 0x00	; 0
    5918:	80 ed       	ldi	r24, 0xD0	; 208
    591a:	97 e0       	ldi	r25, 0x07	; 7
    591c:	91 83       	std	Z+1, r25	; 0x01
    591e:	80 83       	st	Z, r24
		}
	}
}
    5920:	0f 90       	pop	r0
    5922:	0f 90       	pop	r0
    5924:	0f 90       	pop	r0
    5926:	0f 90       	pop	r0
    5928:	cf 91       	pop	r28
    592a:	df 91       	pop	r29
    592c:	08 95       	ret

0000592e <Sev_Seg_Intialize>:
#include "Sevev_Seg_config.h"
#include "Sevev_Seg_private.h"
#include "Sevev_Seg_interface.h"

void Sev_Seg_Intialize(void)
{
    592e:	df 93       	push	r29
    5930:	cf 93       	push	r28
    5932:	cd b7       	in	r28, 0x3d	; 61
    5934:	de b7       	in	r29, 0x3e	; 62
	// pins of seven segment on the kit
	DIO_voidSetPinDirection(PORTB_ID,PIN0,PIN_OUTPUT);
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	60 e0       	ldi	r22, 0x00	; 0
    593a:	41 e0       	ldi	r20, 0x01	; 1
    593c:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN1,PIN_OUTPUT);
    5940:	81 e0       	ldi	r24, 0x01	; 1
    5942:	61 e0       	ldi	r22, 0x01	; 1
    5944:	41 e0       	ldi	r20, 0x01	; 1
    5946:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_OUTPUT);
    594a:	81 e0       	ldi	r24, 0x01	; 1
    594c:	62 e0       	ldi	r22, 0x02	; 2
    594e:	41 e0       	ldi	r20, 0x01	; 1
    5950:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN4,PIN_OUTPUT);
    5954:	81 e0       	ldi	r24, 0x01	; 1
    5956:	64 e0       	ldi	r22, 0x04	; 4
    5958:	41 e0       	ldi	r20, 0x01	; 1
    595a:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PORTB_ID,PIN6,PIN_OUTPUT);
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	66 e0       	ldi	r22, 0x06	; 6
    5962:	41 e0       	ldi	r20, 0x01	; 1
    5964:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN5,PIN_OUTPUT);
    5968:	81 e0       	ldi	r24, 0x01	; 1
    596a:	65 e0       	ldi	r22, 0x05	; 5
    596c:	41 e0       	ldi	r20, 0x01	; 1
    596e:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA_ID,PIN2,PIN_OUTPUT);
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	62 e0       	ldi	r22, 0x02	; 2
    5976:	41 e0       	ldi	r20, 0x01	; 1
    5978:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA_ID,PIN3,PIN_OUTPUT);
    597c:	80 e0       	ldi	r24, 0x00	; 0
    597e:	63 e0       	ldi	r22, 0x03	; 3
    5980:	41 e0       	ldi	r20, 0x01	; 1
    5982:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
}
    5986:	cf 91       	pop	r28
    5988:	df 91       	pop	r29
    598a:	08 95       	ret

0000598c <Sev_Seg_Disable_1>:
void Sev_Seg_Disable_1(void)
{
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	cd b7       	in	r28, 0x3d	; 61
    5992:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTB_ID,PIN6,PIN_HIGH);
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	66 e0       	ldi	r22, 0x06	; 6
    5998:	41 e0       	ldi	r20, 0x01	; 1
    599a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    599e:	cf 91       	pop	r28
    59a0:	df 91       	pop	r29
    59a2:	08 95       	ret

000059a4 <Sev_Seg_Disable_2>:
void Sev_Seg_Disable_2(void)
{
    59a4:	df 93       	push	r29
    59a6:	cf 93       	push	r28
    59a8:	cd b7       	in	r28, 0x3d	; 61
    59aa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTB_ID,PIN5,PIN_HIGH);
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	65 e0       	ldi	r22, 0x05	; 5
    59b0:	41 e0       	ldi	r20, 0x01	; 1
    59b2:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    59b6:	cf 91       	pop	r28
    59b8:	df 91       	pop	r29
    59ba:	08 95       	ret

000059bc <Sev_Seg_Disable_3>:
void Sev_Seg_Disable_3(void)
{
    59bc:	df 93       	push	r29
    59be:	cf 93       	push	r28
    59c0:	cd b7       	in	r28, 0x3d	; 61
    59c2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTA_ID,PIN2,PIN_HIGH);
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	62 e0       	ldi	r22, 0x02	; 2
    59c8:	41 e0       	ldi	r20, 0x01	; 1
    59ca:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    59ce:	cf 91       	pop	r28
    59d0:	df 91       	pop	r29
    59d2:	08 95       	ret

000059d4 <Sev_Seg_Disable_4>:
void Sev_Seg_Disable_4(void)
{
    59d4:	df 93       	push	r29
    59d6:	cf 93       	push	r28
    59d8:	cd b7       	in	r28, 0x3d	; 61
    59da:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTA_ID,PIN3,PIN_HIGH);
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	63 e0       	ldi	r22, 0x03	; 3
    59e0:	41 e0       	ldi	r20, 0x01	; 1
    59e2:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    59e6:	cf 91       	pop	r28
    59e8:	df 91       	pop	r29
    59ea:	08 95       	ret

000059ec <Sev_Seg_Enable_1>:
void Sev_Seg_Enable_1(void)
{
    59ec:	df 93       	push	r29
    59ee:	cf 93       	push	r28
    59f0:	cd b7       	in	r28, 0x3d	; 61
    59f2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTB_ID,PIN6,PIN_LOW);
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	66 e0       	ldi	r22, 0x06	; 6
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    59fe:	cf 91       	pop	r28
    5a00:	df 91       	pop	r29
    5a02:	08 95       	ret

00005a04 <Sev_Seg_Enable_2>:

void Sev_Seg_Enable_2(void)
{
    5a04:	df 93       	push	r29
    5a06:	cf 93       	push	r28
    5a08:	cd b7       	in	r28, 0x3d	; 61
    5a0a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTB_ID,PIN5,PIN_LOW);
    5a0c:	81 e0       	ldi	r24, 0x01	; 1
    5a0e:	65 e0       	ldi	r22, 0x05	; 5
    5a10:	40 e0       	ldi	r20, 0x00	; 0
    5a12:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    5a16:	cf 91       	pop	r28
    5a18:	df 91       	pop	r29
    5a1a:	08 95       	ret

00005a1c <Sev_Seg_Enable_3>:
void Sev_Seg_Enable_3(void)
{
    5a1c:	df 93       	push	r29
    5a1e:	cf 93       	push	r28
    5a20:	cd b7       	in	r28, 0x3d	; 61
    5a22:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTA_ID,PIN2,PIN_LOW);
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	62 e0       	ldi	r22, 0x02	; 2
    5a28:	40 e0       	ldi	r20, 0x00	; 0
    5a2a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    5a2e:	cf 91       	pop	r28
    5a30:	df 91       	pop	r29
    5a32:	08 95       	ret

00005a34 <Sev_Seg_Enable_4>:
void Sev_Seg_Enable_4(void)
{
    5a34:	df 93       	push	r29
    5a36:	cf 93       	push	r28
    5a38:	cd b7       	in	r28, 0x3d	; 61
    5a3a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTA_ID,PIN3,PIN_LOW);
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	63 e0       	ldi	r22, 0x03	; 3
    5a40:	40 e0       	ldi	r20, 0x00	; 0
    5a42:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    5a46:	cf 91       	pop	r28
    5a48:	df 91       	pop	r29
    5a4a:	08 95       	ret

00005a4c <Sev_Seg_WriteNumber>:
void Sev_Seg_WriteNumber(u8 Number)
{
    5a4c:	df 93       	push	r29
    5a4e:	cf 93       	push	r28
    5a50:	0f 92       	push	r0
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	89 83       	std	Y+1, r24	; 0x01
	if (Number<10)
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	8a 30       	cpi	r24, 0x0A	; 10
    5a5c:	30 f5       	brcc	.+76     	; 0x5aaa <Sev_Seg_WriteNumber+0x5e>
	{
		DIO_voidSetPinValue(PORTB_ID ,PIN0 ,GET_BIT(Number,0));
    5a5e:	89 81       	ldd	r24, Y+1	; 0x01
    5a60:	98 2f       	mov	r25, r24
    5a62:	91 70       	andi	r25, 0x01	; 1
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	60 e0       	ldi	r22, 0x00	; 0
    5a68:	49 2f       	mov	r20, r25
    5a6a:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_ID ,PIN1 ,GET_BIT(Number,1));
    5a6e:	89 81       	ldd	r24, Y+1	; 0x01
    5a70:	86 95       	lsr	r24
    5a72:	98 2f       	mov	r25, r24
    5a74:	91 70       	andi	r25, 0x01	; 1
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	61 e0       	ldi	r22, 0x01	; 1
    5a7a:	49 2f       	mov	r20, r25
    5a7c:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_ID ,PIN2 ,GET_BIT(Number,2));
    5a80:	89 81       	ldd	r24, Y+1	; 0x01
    5a82:	86 95       	lsr	r24
    5a84:	86 95       	lsr	r24
    5a86:	98 2f       	mov	r25, r24
    5a88:	91 70       	andi	r25, 0x01	; 1
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	62 e0       	ldi	r22, 0x02	; 2
    5a8e:	49 2f       	mov	r20, r25
    5a90:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_ID ,PIN4 ,GET_BIT(Number,3));
    5a94:	89 81       	ldd	r24, Y+1	; 0x01
    5a96:	86 95       	lsr	r24
    5a98:	86 95       	lsr	r24
    5a9a:	86 95       	lsr	r24
    5a9c:	98 2f       	mov	r25, r24
    5a9e:	91 70       	andi	r25, 0x01	; 1
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	64 e0       	ldi	r22, 0x04	; 4
    5aa4:	49 2f       	mov	r20, r25
    5aa6:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	}

}
    5aaa:	0f 90       	pop	r0
    5aac:	cf 91       	pop	r28
    5aae:	df 91       	pop	r29
    5ab0:	08 95       	ret

00005ab2 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    5ab2:	df 93       	push	r29
    5ab4:	cf 93       	push	r28
    5ab6:	cd b7       	in	r28, 0x3d	; 61
    5ab8:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    5aba:	a3 e5       	ldi	r26, 0x53	; 83
    5abc:	b0 e0       	ldi	r27, 0x00	; 0
    5abe:	e3 e5       	ldi	r30, 0x53	; 83
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	80 81       	ld	r24, Z
    5ac4:	8f 7b       	andi	r24, 0xBF	; 191
    5ac6:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    5ac8:	a3 e5       	ldi	r26, 0x53	; 83
    5aca:	b0 e0       	ldi	r27, 0x00	; 0
    5acc:	e3 e5       	ldi	r30, 0x53	; 83
    5ace:	f0 e0       	ldi	r31, 0x00	; 0
    5ad0:	80 81       	ld	r24, Z
    5ad2:	87 7f       	andi	r24, 0xF7	; 247
    5ad4:	8c 93       	st	X, r24

			/*Set the Required Pre-load Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    5ad6:	e2 e5       	ldi	r30, 0x52	; 82
    5ad8:	f0 e0       	ldi	r31, 0x00	; 0
    5ada:	80 ec       	ldi	r24, 0xC0	; 192
    5adc:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    5ade:	a9 e5       	ldi	r26, 0x59	; 89
    5ae0:	b0 e0       	ldi	r27, 0x00	; 0
    5ae2:	e9 e5       	ldi	r30, 0x59	; 89
    5ae4:	f0 e0       	ldi	r31, 0x00	; 0
    5ae6:	80 81       	ld	r24, Z
    5ae8:	81 60       	ori	r24, 0x01	; 1
    5aea:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Pre-scaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    5aec:	a3 e5       	ldi	r26, 0x53	; 83
    5aee:	b0 e0       	ldi	r27, 0x00	; 0
    5af0:	e3 e5       	ldi	r30, 0x53	; 83
    5af2:	f0 e0       	ldi	r31, 0x00	; 0
    5af4:	80 81       	ld	r24, Z
    5af6:	88 7f       	andi	r24, 0xF8	; 248
    5af8:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    5afa:	a3 e5       	ldi	r26, 0x53	; 83
    5afc:	b0 e0       	ldi	r27, 0x00	; 0
    5afe:	e3 e5       	ldi	r30, 0x53	; 83
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	80 81       	ld	r24, Z
    5b04:	82 60       	ori	r24, 0x02	; 2
    5b06:	8c 93       	st	X, r24
}
    5b08:	cf 91       	pop	r28
    5b0a:	df 91       	pop	r29
    5b0c:	08 95       	ret

00005b0e <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    5b0e:	df 93       	push	r29
    5b10:	cf 93       	push	r28
    5b12:	cd b7       	in	r28, 0x3d	; 61
    5b14:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    5b16:	af e4       	ldi	r26, 0x4F	; 79
    5b18:	b0 e0       	ldi	r27, 0x00	; 0
    5b1a:	ef e4       	ldi	r30, 0x4F	; 79
    5b1c:	f0 e0       	ldi	r31, 0x00	; 0
    5b1e:	80 81       	ld	r24, Z
    5b20:	8e 7f       	andi	r24, 0xFE	; 254
    5b22:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    5b24:	af e4       	ldi	r26, 0x4F	; 79
    5b26:	b0 e0       	ldi	r27, 0x00	; 0
    5b28:	ef e4       	ldi	r30, 0x4F	; 79
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	80 81       	ld	r24, Z
    5b2e:	82 60       	ori	r24, 0x02	; 2
    5b30:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    5b32:	ae e4       	ldi	r26, 0x4E	; 78
    5b34:	b0 e0       	ldi	r27, 0x00	; 0
    5b36:	ee e4       	ldi	r30, 0x4E	; 78
    5b38:	f0 e0       	ldi	r31, 0x00	; 0
    5b3a:	80 81       	ld	r24, Z
    5b3c:	88 60       	ori	r24, 0x08	; 8
    5b3e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    5b40:	ae e4       	ldi	r26, 0x4E	; 78
    5b42:	b0 e0       	ldi	r27, 0x00	; 0
    5b44:	ee e4       	ldi	r30, 0x4E	; 78
    5b46:	f0 e0       	ldi	r31, 0x00	; 0
    5b48:	80 81       	ld	r24, Z
    5b4a:	80 61       	ori	r24, 0x10	; 16
    5b4c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    5b4e:	ea e4       	ldi	r30, 0x4A	; 74
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	84 ef       	ldi	r24, 0xF4	; 244
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    5b5a:	e8 e4       	ldi	r30, 0x48	; 72
    5b5c:	f0 e0       	ldi	r31, 0x00	; 0
    5b5e:	11 82       	std	Z+1, r1	; 0x01
    5b60:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    5b62:	e6 e4       	ldi	r30, 0x46	; 70
    5b64:	f0 e0       	ldi	r31, 0x00	; 0
    5b66:	80 e2       	ldi	r24, 0x20	; 32
    5b68:	9e e4       	ldi	r25, 0x4E	; 78
    5b6a:	91 83       	std	Z+1, r25	; 0x01
    5b6c:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    5b6e:	ae e4       	ldi	r26, 0x4E	; 78
    5b70:	b0 e0       	ldi	r27, 0x00	; 0
    5b72:	ee e4       	ldi	r30, 0x4E	; 78
    5b74:	f0 e0       	ldi	r31, 0x00	; 0
    5b76:	80 81       	ld	r24, Z
    5b78:	80 64       	ori	r24, 0x40	; 64
    5b7a:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    5b7c:	af e4       	ldi	r26, 0x4F	; 79
    5b7e:	b0 e0       	ldi	r27, 0x00	; 0
    5b80:	ef e4       	ldi	r30, 0x4F	; 79
    5b82:	f0 e0       	ldi	r31, 0x00	; 0
    5b84:	80 81       	ld	r24, Z
    5b86:	8f 7b       	andi	r24, 0xBF	; 191
    5b88:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    5b8a:	af e4       	ldi	r26, 0x4F	; 79
    5b8c:	b0 e0       	ldi	r27, 0x00	; 0
    5b8e:	ef e4       	ldi	r30, 0x4F	; 79
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	80 81       	ld	r24, Z
    5b94:	80 68       	ori	r24, 0x80	; 128
    5b96:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    5b98:	af e4       	ldi	r26, 0x4F	; 79
    5b9a:	b0 e0       	ldi	r27, 0x00	; 0
    5b9c:	ef e4       	ldi	r30, 0x4F	; 79
    5b9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ba0:	80 81       	ld	r24, Z
    5ba2:	8f 7e       	andi	r24, 0xEF	; 239
    5ba4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    5ba6:	af e4       	ldi	r26, 0x4F	; 79
    5ba8:	b0 e0       	ldi	r27, 0x00	; 0
    5baa:	ef e4       	ldi	r30, 0x4F	; 79
    5bac:	f0 e0       	ldi	r31, 0x00	; 0
    5bae:	80 81       	ld	r24, Z
    5bb0:	80 62       	ori	r24, 0x20	; 32
    5bb2:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    5bb4:	a9 e5       	ldi	r26, 0x59	; 89
    5bb6:	b0 e0       	ldi	r27, 0x00	; 0
    5bb8:	e9 e5       	ldi	r30, 0x59	; 89
    5bba:	f0 e0       	ldi	r31, 0x00	; 0
    5bbc:	80 81       	ld	r24, Z
    5bbe:	8b 7f       	andi	r24, 0xFB	; 251
    5bc0:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    5bc2:	a9 e5       	ldi	r26, 0x59	; 89
    5bc4:	b0 e0       	ldi	r27, 0x00	; 0
    5bc6:	e9 e5       	ldi	r30, 0x59	; 89
    5bc8:	f0 e0       	ldi	r31, 0x00	; 0
    5bca:	80 81       	ld	r24, Z
    5bcc:	8f 7e       	andi	r24, 0xEF	; 239
    5bce:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    5bd0:	a9 e5       	ldi	r26, 0x59	; 89
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	e9 e5       	ldi	r30, 0x59	; 89
    5bd6:	f0 e0       	ldi	r31, 0x00	; 0
    5bd8:	80 81       	ld	r24, Z
    5bda:	87 7f       	andi	r24, 0xF7	; 247
    5bdc:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    5bde:	a9 e5       	ldi	r26, 0x59	; 89
    5be0:	b0 e0       	ldi	r27, 0x00	; 0
    5be2:	e9 e5       	ldi	r30, 0x59	; 89
    5be4:	f0 e0       	ldi	r31, 0x00	; 0
    5be6:	80 81       	ld	r24, Z
    5be8:	8f 7d       	andi	r24, 0xDF	; 223
    5bea:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Pre-scaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    5bec:	ae e4       	ldi	r26, 0x4E	; 78
    5bee:	b0 e0       	ldi	r27, 0x00	; 0
    5bf0:	ee e4       	ldi	r30, 0x4E	; 78
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	80 81       	ld	r24, Z
    5bf6:	88 7f       	andi	r24, 0xF8	; 248
    5bf8:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    5bfa:	ae e4       	ldi	r26, 0x4E	; 78
    5bfc:	b0 e0       	ldi	r27, 0x00	; 0
    5bfe:	ee e4       	ldi	r30, 0x4E	; 78
    5c00:	f0 e0       	ldi	r31, 0x00	; 0
    5c02:	80 81       	ld	r24, Z
    5c04:	82 60       	ori	r24, 0x02	; 2
    5c06:	8c 93       	st	X, r24


}
    5c08:	cf 91       	pop	r28
    5c0a:	df 91       	pop	r29
    5c0c:	08 95       	ret

00005c0e <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    5c0e:	df 93       	push	r29
    5c10:	cf 93       	push	r28
    5c12:	cd b7       	in	r28, 0x3d	; 61
    5c14:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    5c16:	a5 e4       	ldi	r26, 0x45	; 69
    5c18:	b0 e0       	ldi	r27, 0x00	; 0
    5c1a:	e5 e4       	ldi	r30, 0x45	; 69
    5c1c:	f0 e0       	ldi	r31, 0x00	; 0
    5c1e:	80 81       	ld	r24, Z
    5c20:	8f 7b       	andi	r24, 0xBF	; 191
    5c22:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    5c24:	a5 e4       	ldi	r26, 0x45	; 69
    5c26:	b0 e0       	ldi	r27, 0x00	; 0
    5c28:	e5 e4       	ldi	r30, 0x45	; 69
    5c2a:	f0 e0       	ldi	r31, 0x00	; 0
    5c2c:	80 81       	ld	r24, Z
    5c2e:	88 60       	ori	r24, 0x08	; 8
    5c30:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    5c32:	e3 e4       	ldi	r30, 0x43	; 67
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	8d e7       	ldi	r24, 0x7D	; 125
    5c38:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    5c3a:	a9 e5       	ldi	r26, 0x59	; 89
    5c3c:	b0 e0       	ldi	r27, 0x00	; 0
    5c3e:	e9 e5       	ldi	r30, 0x59	; 89
    5c40:	f0 e0       	ldi	r31, 0x00	; 0
    5c42:	80 81       	ld	r24, Z
    5c44:	80 68       	ori	r24, 0x80	; 128
    5c46:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Pre-scaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    5c48:	a5 e4       	ldi	r26, 0x45	; 69
    5c4a:	b0 e0       	ldi	r27, 0x00	; 0
    5c4c:	e5 e4       	ldi	r30, 0x45	; 69
    5c4e:	f0 e0       	ldi	r31, 0x00	; 0
    5c50:	80 81       	ld	r24, Z
    5c52:	88 7f       	andi	r24, 0xF8	; 248
    5c54:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    5c56:	a5 e4       	ldi	r26, 0x45	; 69
    5c58:	b0 e0       	ldi	r27, 0x00	; 0
    5c5a:	e5 e4       	ldi	r30, 0x45	; 69
    5c5c:	f0 e0       	ldi	r31, 0x00	; 0
    5c5e:	80 81       	ld	r24, Z
    5c60:	83 60       	ori	r24, 0x03	; 3
    5c62:	8c 93       	st	X, r24
}
    5c64:	cf 91       	pop	r28
    5c66:	df 91       	pop	r29
    5c68:	08 95       	ret

00005c6a <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    5c6a:	df 93       	push	r29
    5c6c:	cf 93       	push	r28
    5c6e:	0f 92       	push	r0
    5c70:	cd b7       	in	r28, 0x3d	; 61
    5c72:	de b7       	in	r29, 0x3e	; 62
    5c74:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    5c76:	e2 e5       	ldi	r30, 0x52	; 82
    5c78:	f0 e0       	ldi	r31, 0x00	; 0
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	80 83       	st	Z, r24
}
    5c7e:	0f 90       	pop	r0
    5c80:	cf 91       	pop	r28
    5c82:	df 91       	pop	r29
    5c84:	08 95       	ret

00005c86 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    5c86:	df 93       	push	r29
    5c88:	cf 93       	push	r28
    5c8a:	00 d0       	rcall	.+0      	; 0x5c8c <TIMER1_voidSetPreload+0x6>
    5c8c:	cd b7       	in	r28, 0x3d	; 61
    5c8e:	de b7       	in	r29, 0x3e	; 62
    5c90:	9a 83       	std	Y+2, r25	; 0x02
    5c92:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    5c94:	ec e4       	ldi	r30, 0x4C	; 76
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	89 81       	ldd	r24, Y+1	; 0x01
    5c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9c:	91 83       	std	Z+1, r25	; 0x01
    5c9e:	80 83       	st	Z, r24
}
    5ca0:	0f 90       	pop	r0
    5ca2:	0f 90       	pop	r0
    5ca4:	cf 91       	pop	r28
    5ca6:	df 91       	pop	r29
    5ca8:	08 95       	ret

00005caa <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    5caa:	df 93       	push	r29
    5cac:	cf 93       	push	r28
    5cae:	0f 92       	push	r0
    5cb0:	cd b7       	in	r28, 0x3d	; 61
    5cb2:	de b7       	in	r29, 0x3e	; 62
    5cb4:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    5cb6:	e4 e4       	ldi	r30, 0x44	; 68
    5cb8:	f0 e0       	ldi	r31, 0x00	; 0
    5cba:	89 81       	ldd	r24, Y+1	; 0x01
    5cbc:	80 83       	st	Z, r24
}
    5cbe:	0f 90       	pop	r0
    5cc0:	cf 91       	pop	r28
    5cc2:	df 91       	pop	r29
    5cc4:	08 95       	ret

00005cc6 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    5cc6:	df 93       	push	r29
    5cc8:	cf 93       	push	r28
    5cca:	0f 92       	push	r0
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62
    5cd0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    5cd2:	ec e5       	ldi	r30, 0x5C	; 92
    5cd4:	f0 e0       	ldi	r31, 0x00	; 0
    5cd6:	89 81       	ldd	r24, Y+1	; 0x01
    5cd8:	80 83       	st	Z, r24
}
    5cda:	0f 90       	pop	r0
    5cdc:	cf 91       	pop	r28
    5cde:	df 91       	pop	r29
    5ce0:	08 95       	ret

00005ce2 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    5ce2:	df 93       	push	r29
    5ce4:	cf 93       	push	r28
    5ce6:	00 d0       	rcall	.+0      	; 0x5ce8 <TIMER1_voidSetCTCA+0x6>
    5ce8:	cd b7       	in	r28, 0x3d	; 61
    5cea:	de b7       	in	r29, 0x3e	; 62
    5cec:	9a 83       	std	Y+2, r25	; 0x02
    5cee:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    5cf0:	ea e4       	ldi	r30, 0x4A	; 74
    5cf2:	f0 e0       	ldi	r31, 0x00	; 0
    5cf4:	89 81       	ldd	r24, Y+1	; 0x01
    5cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	80 83       	st	Z, r24
}
    5cfc:	0f 90       	pop	r0
    5cfe:	0f 90       	pop	r0
    5d00:	cf 91       	pop	r28
    5d02:	df 91       	pop	r29
    5d04:	08 95       	ret

00005d06 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    5d06:	df 93       	push	r29
    5d08:	cf 93       	push	r28
    5d0a:	00 d0       	rcall	.+0      	; 0x5d0c <TIMER1_voidSetCTCB+0x6>
    5d0c:	cd b7       	in	r28, 0x3d	; 61
    5d0e:	de b7       	in	r29, 0x3e	; 62
    5d10:	9a 83       	std	Y+2, r25	; 0x02
    5d12:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    5d14:	e8 e4       	ldi	r30, 0x48	; 72
    5d16:	f0 e0       	ldi	r31, 0x00	; 0
    5d18:	89 81       	ldd	r24, Y+1	; 0x01
    5d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1c:	91 83       	std	Z+1, r25	; 0x01
    5d1e:	80 83       	st	Z, r24
}
    5d20:	0f 90       	pop	r0
    5d22:	0f 90       	pop	r0
    5d24:	cf 91       	pop	r28
    5d26:	df 91       	pop	r29
    5d28:	08 95       	ret

00005d2a <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    5d2a:	df 93       	push	r29
    5d2c:	cf 93       	push	r28
    5d2e:	0f 92       	push	r0
    5d30:	cd b7       	in	r28, 0x3d	; 61
    5d32:	de b7       	in	r29, 0x3e	; 62
    5d34:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    5d36:	e3 e4       	ldi	r30, 0x43	; 67
    5d38:	f0 e0       	ldi	r31, 0x00	; 0
    5d3a:	89 81       	ldd	r24, Y+1	; 0x01
    5d3c:	80 83       	st	Z, r24
}
    5d3e:	0f 90       	pop	r0
    5d40:	cf 91       	pop	r28
    5d42:	df 91       	pop	r29
    5d44:	08 95       	ret

00005d46 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    5d46:	df 93       	push	r29
    5d48:	cf 93       	push	r28
    5d4a:	00 d0       	rcall	.+0      	; 0x5d4c <TIMER1_voidSetICR1+0x6>
    5d4c:	cd b7       	in	r28, 0x3d	; 61
    5d4e:	de b7       	in	r29, 0x3e	; 62
    5d50:	9a 83       	std	Y+2, r25	; 0x02
    5d52:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    5d54:	e6 e4       	ldi	r30, 0x46	; 70
    5d56:	f0 e0       	ldi	r31, 0x00	; 0
    5d58:	89 81       	ldd	r24, Y+1	; 0x01
    5d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	80 83       	st	Z, r24
}
    5d60:	0f 90       	pop	r0
    5d62:	0f 90       	pop	r0
    5d64:	cf 91       	pop	r28
    5d66:	df 91       	pop	r29
    5d68:	08 95       	ret

00005d6a <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    5d6a:	df 93       	push	r29
    5d6c:	cf 93       	push	r28
    5d6e:	cd b7       	in	r28, 0x3d	; 61
    5d70:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    5d72:	e2 e5       	ldi	r30, 0x52	; 82
    5d74:	f0 e0       	ldi	r31, 0x00	; 0
    5d76:	80 81       	ld	r24, Z
}
    5d78:	cf 91       	pop	r28
    5d7a:	df 91       	pop	r29
    5d7c:	08 95       	ret

00005d7e <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    5d7e:	df 93       	push	r29
    5d80:	cf 93       	push	r28
    5d82:	cd b7       	in	r28, 0x3d	; 61
    5d84:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    5d86:	ec e4       	ldi	r30, 0x4C	; 76
    5d88:	f0 e0       	ldi	r31, 0x00	; 0
    5d8a:	80 81       	ld	r24, Z
    5d8c:	91 81       	ldd	r25, Z+1	; 0x01
}
    5d8e:	cf 91       	pop	r28
    5d90:	df 91       	pop	r29
    5d92:	08 95       	ret

00005d94 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    5d94:	df 93       	push	r29
    5d96:	cf 93       	push	r28
    5d98:	cd b7       	in	r28, 0x3d	; 61
    5d9a:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    5d9c:	e4 e4       	ldi	r30, 0x44	; 68
    5d9e:	f0 e0       	ldi	r31, 0x00	; 0
    5da0:	80 81       	ld	r24, Z
}
    5da2:	cf 91       	pop	r28
    5da4:	df 91       	pop	r29
    5da6:	08 95       	ret

00005da8 <TIMER1_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER1_voidSetPWM(u16 Copy_u16CompareValue)
{
    5da8:	df 93       	push	r29
    5daa:	cf 93       	push	r28
    5dac:	00 d0       	rcall	.+0      	; 0x5dae <TIMER1_voidSetPWM+0x6>
    5dae:	cd b7       	in	r28, 0x3d	; 61
    5db0:	de b7       	in	r29, 0x3e	; 62
    5db2:	9a 83       	std	Y+2, r25	; 0x02
    5db4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    5db6:	ea e4       	ldi	r30, 0x4A	; 74
    5db8:	f0 e0       	ldi	r31, 0x00	; 0
    5dba:	89 81       	ldd	r24, Y+1	; 0x01
    5dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5dbe:	91 83       	std	Z+1, r25	; 0x01
    5dc0:	80 83       	st	Z, r24
}
    5dc2:	0f 90       	pop	r0
    5dc4:	0f 90       	pop	r0
    5dc6:	cf 91       	pop	r28
    5dc8:	df 91       	pop	r29
    5dca:	08 95       	ret

00005dcc <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    5dcc:	df 93       	push	r29
    5dce:	cf 93       	push	r28
    5dd0:	cd b7       	in	r28, 0x3d	; 61
    5dd2:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    5dd4:	ae e4       	ldi	r26, 0x4E	; 78
    5dd6:	b0 e0       	ldi	r27, 0x00	; 0
    5dd8:	ee e4       	ldi	r30, 0x4E	; 78
    5dda:	f0 e0       	ldi	r31, 0x00	; 0
    5ddc:	80 81       	ld	r24, Z
    5dde:	80 64       	ori	r24, 0x40	; 64
    5de0:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5de2:	a9 e5       	ldi	r26, 0x59	; 89
    5de4:	b0 e0       	ldi	r27, 0x00	; 0
    5de6:	e9 e5       	ldi	r30, 0x59	; 89
    5de8:	f0 e0       	ldi	r31, 0x00	; 0
    5dea:	80 81       	ld	r24, Z
    5dec:	80 62       	ori	r24, 0x20	; 32
    5dee:	8c 93       	st	X, r24
}
    5df0:	cf 91       	pop	r28
    5df2:	df 91       	pop	r29
    5df4:	08 95       	ret

00005df6 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    5df6:	df 93       	push	r29
    5df8:	cf 93       	push	r28
    5dfa:	00 d0       	rcall	.+0      	; 0x5dfc <TIMER_voidICUSetTriggerEdge+0x6>
    5dfc:	cd b7       	in	r28, 0x3d	; 61
    5dfe:	de b7       	in	r29, 0x3e	; 62
    5e00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    5e02:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    5e04:	8a 81       	ldd	r24, Y+2	; 0x02
    5e06:	81 30       	cpi	r24, 0x01	; 1
    5e08:	41 f4       	brne	.+16     	; 0x5e1a <TIMER_voidICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    5e0a:	ae e4       	ldi	r26, 0x4E	; 78
    5e0c:	b0 e0       	ldi	r27, 0x00	; 0
    5e0e:	ee e4       	ldi	r30, 0x4E	; 78
    5e10:	f0 e0       	ldi	r31, 0x00	; 0
    5e12:	80 81       	ld	r24, Z
    5e14:	80 64       	ori	r24, 0x40	; 64
    5e16:	8c 93       	st	X, r24
    5e18:	0d c0       	rjmp	.+26     	; 0x5e34 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    5e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1c:	88 23       	and	r24, r24
    5e1e:	41 f4       	brne	.+16     	; 0x5e30 <TIMER_voidICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    5e20:	ae e4       	ldi	r26, 0x4E	; 78
    5e22:	b0 e0       	ldi	r27, 0x00	; 0
    5e24:	ee e4       	ldi	r30, 0x4E	; 78
    5e26:	f0 e0       	ldi	r31, 0x00	; 0
    5e28:	80 81       	ld	r24, Z
    5e2a:	8f 7b       	andi	r24, 0xBF	; 191
    5e2c:	8c 93       	st	X, r24
    5e2e:	02 c0       	rjmp	.+4      	; 0x5e34 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    5e34:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    5e36:	0f 90       	pop	r0
    5e38:	0f 90       	pop	r0
    5e3a:	cf 91       	pop	r28
    5e3c:	df 91       	pop	r29
    5e3e:	08 95       	ret

00005e40 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    5e40:	df 93       	push	r29
    5e42:	cf 93       	push	r28
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5e48:	a9 e5       	ldi	r26, 0x59	; 89
    5e4a:	b0 e0       	ldi	r27, 0x00	; 0
    5e4c:	e9 e5       	ldi	r30, 0x59	; 89
    5e4e:	f0 e0       	ldi	r31, 0x00	; 0
    5e50:	80 81       	ld	r24, Z
    5e52:	80 62       	ori	r24, 0x20	; 32
    5e54:	8c 93       	st	X, r24
}
    5e56:	cf 91       	pop	r28
    5e58:	df 91       	pop	r29
    5e5a:	08 95       	ret

00005e5c <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    5e5c:	df 93       	push	r29
    5e5e:	cf 93       	push	r28
    5e60:	cd b7       	in	r28, 0x3d	; 61
    5e62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    5e64:	a9 e5       	ldi	r26, 0x59	; 89
    5e66:	b0 e0       	ldi	r27, 0x00	; 0
    5e68:	e9 e5       	ldi	r30, 0x59	; 89
    5e6a:	f0 e0       	ldi	r31, 0x00	; 0
    5e6c:	80 81       	ld	r24, Z
    5e6e:	8f 7d       	andi	r24, 0xDF	; 223
    5e70:	8c 93       	st	X, r24
}
    5e72:	cf 91       	pop	r28
    5e74:	df 91       	pop	r29
    5e76:	08 95       	ret

00005e78 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    5e78:	df 93       	push	r29
    5e7a:	cf 93       	push	r28
    5e7c:	cd b7       	in	r28, 0x3d	; 61
    5e7e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    5e80:	e6 e4       	ldi	r30, 0x46	; 70
    5e82:	f0 e0       	ldi	r31, 0x00	; 0
    5e84:	80 81       	ld	r24, Z
    5e86:	91 81       	ldd	r25, Z+1	; 0x01
}
    5e88:	cf 91       	pop	r28
    5e8a:	df 91       	pop	r29
    5e8c:	08 95       	ret

00005e8e <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : pre-build config  */
void TIMER_voidWDTSleep(void)
{
    5e8e:	df 93       	push	r29
    5e90:	cf 93       	push	r28
    5e92:	cd b7       	in	r28, 0x3d	; 61
    5e94:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Pre-scaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    5e96:	a1 e4       	ldi	r26, 0x41	; 65
    5e98:	b0 e0       	ldi	r27, 0x00	; 0
    5e9a:	e1 e4       	ldi	r30, 0x41	; 65
    5e9c:	f0 e0       	ldi	r31, 0x00	; 0
    5e9e:	80 81       	ld	r24, Z
    5ea0:	88 7f       	andi	r24, 0xF8	; 248
    5ea2:	8c 93       	st	X, r24
	/* Set The required pre-scaller */
	WDTCR |= WDT_PRESCALER ;
    5ea4:	a1 e4       	ldi	r26, 0x41	; 65
    5ea6:	b0 e0       	ldi	r27, 0x00	; 0
    5ea8:	e1 e4       	ldi	r30, 0x41	; 65
    5eaa:	f0 e0       	ldi	r31, 0x00	; 0
    5eac:	80 81       	ld	r24, Z
    5eae:	86 60       	ori	r24, 0x06	; 6
    5eb0:	8c 93       	st	X, r24
}
    5eb2:	cf 91       	pop	r28
    5eb4:	df 91       	pop	r29
    5eb6:	08 95       	ret

00005eb8 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    5eb8:	df 93       	push	r29
    5eba:	cf 93       	push	r28
    5ebc:	cd b7       	in	r28, 0x3d	; 61
    5ebe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    5ec0:	a1 e4       	ldi	r26, 0x41	; 65
    5ec2:	b0 e0       	ldi	r27, 0x00	; 0
    5ec4:	e1 e4       	ldi	r30, 0x41	; 65
    5ec6:	f0 e0       	ldi	r31, 0x00	; 0
    5ec8:	80 81       	ld	r24, Z
    5eca:	88 60       	ori	r24, 0x08	; 8
    5ecc:	8c 93       	st	X, r24
}
    5ece:	cf 91       	pop	r28
    5ed0:	df 91       	pop	r29
    5ed2:	08 95       	ret

00005ed4 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    5ed4:	df 93       	push	r29
    5ed6:	cf 93       	push	r28
    5ed8:	cd b7       	in	r28, 0x3d	; 61
    5eda:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    5edc:	a1 e4       	ldi	r26, 0x41	; 65
    5ede:	b0 e0       	ldi	r27, 0x00	; 0
    5ee0:	e1 e4       	ldi	r30, 0x41	; 65
    5ee2:	f0 e0       	ldi	r31, 0x00	; 0
    5ee4:	80 81       	ld	r24, Z
    5ee6:	88 61       	ori	r24, 0x18	; 24
    5ee8:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    5eea:	e1 e4       	ldi	r30, 0x41	; 65
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	10 82       	st	Z, r1
}
    5ef0:	cf 91       	pop	r28
    5ef2:	df 91       	pop	r29
    5ef4:	08 95       	ret

00005ef6 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	00 d0       	rcall	.+0      	; 0x5efc <TIMER_u8SetCallBack+0x6>
    5efc:	00 d0       	rcall	.+0      	; 0x5efe <TIMER_u8SetCallBack+0x8>
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
    5f02:	9b 83       	std	Y+3, r25	; 0x03
    5f04:	8a 83       	std	Y+2, r24	; 0x02
    5f06:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    5f08:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    5f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    5f0e:	00 97       	sbiw	r24, 0x00	; 0
    5f10:	69 f0       	breq	.+26     	; 0x5f2c <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    5f12:	8c 81       	ldd	r24, Y+4	; 0x04
    5f14:	88 2f       	mov	r24, r24
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	88 0f       	add	r24, r24
    5f1a:	99 1f       	adc	r25, r25
    5f1c:	fc 01       	movw	r30, r24
    5f1e:	eb 54       	subi	r30, 0x4B	; 75
    5f20:	fe 4f       	sbci	r31, 0xFE	; 254
    5f22:	8a 81       	ldd	r24, Y+2	; 0x02
    5f24:	9b 81       	ldd	r25, Y+3	; 0x03
    5f26:	91 83       	std	Z+1, r25	; 0x01
    5f28:	80 83       	st	Z, r24
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    5f2c:	82 e0       	ldi	r24, 0x02	; 2
    5f2e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f32:	0f 90       	pop	r0
    5f34:	0f 90       	pop	r0
    5f36:	0f 90       	pop	r0
    5f38:	0f 90       	pop	r0
    5f3a:	cf 91       	pop	r28
    5f3c:	df 91       	pop	r29
    5f3e:	08 95       	ret

00005f40 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_11 (void)
{
    5f40:	1f 92       	push	r1
    5f42:	0f 92       	push	r0
    5f44:	0f b6       	in	r0, 0x3f	; 63
    5f46:	0f 92       	push	r0
    5f48:	11 24       	eor	r1, r1
    5f4a:	2f 93       	push	r18
    5f4c:	3f 93       	push	r19
    5f4e:	4f 93       	push	r20
    5f50:	5f 93       	push	r21
    5f52:	6f 93       	push	r22
    5f54:	7f 93       	push	r23
    5f56:	8f 93       	push	r24
    5f58:	9f 93       	push	r25
    5f5a:	af 93       	push	r26
    5f5c:	bf 93       	push	r27
    5f5e:	ef 93       	push	r30
    5f60:	ff 93       	push	r31
    5f62:	df 93       	push	r29
    5f64:	cf 93       	push	r28
    5f66:	cd b7       	in	r28, 0x3d	; 61
    5f68:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    5f6a:	80 91 cb 01 	lds	r24, 0x01CB
    5f6e:	90 91 cc 01 	lds	r25, 0x01CC
    5f72:	00 97       	sbiw	r24, 0x00	; 0
    5f74:	29 f0       	breq	.+10     	; 0x5f80 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    5f76:	e0 91 cb 01 	lds	r30, 0x01CB
    5f7a:	f0 91 cc 01 	lds	r31, 0x01CC
    5f7e:	09 95       	icall
	}
}
    5f80:	cf 91       	pop	r28
    5f82:	df 91       	pop	r29
    5f84:	ff 91       	pop	r31
    5f86:	ef 91       	pop	r30
    5f88:	bf 91       	pop	r27
    5f8a:	af 91       	pop	r26
    5f8c:	9f 91       	pop	r25
    5f8e:	8f 91       	pop	r24
    5f90:	7f 91       	pop	r23
    5f92:	6f 91       	pop	r22
    5f94:	5f 91       	pop	r21
    5f96:	4f 91       	pop	r20
    5f98:	3f 91       	pop	r19
    5f9a:	2f 91       	pop	r18
    5f9c:	0f 90       	pop	r0
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	0f 90       	pop	r0
    5fa2:	1f 90       	pop	r1
    5fa4:	18 95       	reti

00005fa6 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_10 (void)
{
    5fa6:	1f 92       	push	r1
    5fa8:	0f 92       	push	r0
    5faa:	0f b6       	in	r0, 0x3f	; 63
    5fac:	0f 92       	push	r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	2f 93       	push	r18
    5fb2:	3f 93       	push	r19
    5fb4:	4f 93       	push	r20
    5fb6:	5f 93       	push	r21
    5fb8:	6f 93       	push	r22
    5fba:	7f 93       	push	r23
    5fbc:	8f 93       	push	r24
    5fbe:	9f 93       	push	r25
    5fc0:	af 93       	push	r26
    5fc2:	bf 93       	push	r27
    5fc4:	ef 93       	push	r30
    5fc6:	ff 93       	push	r31
    5fc8:	df 93       	push	r29
    5fca:	cf 93       	push	r28
    5fcc:	cd b7       	in	r28, 0x3d	; 61
    5fce:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    5fd0:	80 91 c9 01 	lds	r24, 0x01C9
    5fd4:	90 91 ca 01 	lds	r25, 0x01CA
    5fd8:	00 97       	sbiw	r24, 0x00	; 0
    5fda:	29 f0       	breq	.+10     	; 0x5fe6 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    5fdc:	e0 91 c9 01 	lds	r30, 0x01C9
    5fe0:	f0 91 ca 01 	lds	r31, 0x01CA
    5fe4:	09 95       	icall
	}
}
    5fe6:	cf 91       	pop	r28
    5fe8:	df 91       	pop	r29
    5fea:	ff 91       	pop	r31
    5fec:	ef 91       	pop	r30
    5fee:	bf 91       	pop	r27
    5ff0:	af 91       	pop	r26
    5ff2:	9f 91       	pop	r25
    5ff4:	8f 91       	pop	r24
    5ff6:	7f 91       	pop	r23
    5ff8:	6f 91       	pop	r22
    5ffa:	5f 91       	pop	r21
    5ffc:	4f 91       	pop	r20
    5ffe:	3f 91       	pop	r19
    6000:	2f 91       	pop	r18
    6002:	0f 90       	pop	r0
    6004:	0f be       	out	0x3f, r0	; 63
    6006:	0f 90       	pop	r0
    6008:	1f 90       	pop	r1
    600a:	18 95       	reti

0000600c <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_9 (void)
{
    600c:	1f 92       	push	r1
    600e:	0f 92       	push	r0
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	0f 92       	push	r0
    6014:	11 24       	eor	r1, r1
    6016:	2f 93       	push	r18
    6018:	3f 93       	push	r19
    601a:	4f 93       	push	r20
    601c:	5f 93       	push	r21
    601e:	6f 93       	push	r22
    6020:	7f 93       	push	r23
    6022:	8f 93       	push	r24
    6024:	9f 93       	push	r25
    6026:	af 93       	push	r26
    6028:	bf 93       	push	r27
    602a:	ef 93       	push	r30
    602c:	ff 93       	push	r31
    602e:	df 93       	push	r29
    6030:	cf 93       	push	r28
    6032:	cd b7       	in	r28, 0x3d	; 61
    6034:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    6036:	80 91 c7 01 	lds	r24, 0x01C7
    603a:	90 91 c8 01 	lds	r25, 0x01C8
    603e:	00 97       	sbiw	r24, 0x00	; 0
    6040:	29 f0       	breq	.+10     	; 0x604c <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    6042:	e0 91 c7 01 	lds	r30, 0x01C7
    6046:	f0 91 c8 01 	lds	r31, 0x01C8
    604a:	09 95       	icall
	}
}
    604c:	cf 91       	pop	r28
    604e:	df 91       	pop	r29
    6050:	ff 91       	pop	r31
    6052:	ef 91       	pop	r30
    6054:	bf 91       	pop	r27
    6056:	af 91       	pop	r26
    6058:	9f 91       	pop	r25
    605a:	8f 91       	pop	r24
    605c:	7f 91       	pop	r23
    605e:	6f 91       	pop	r22
    6060:	5f 91       	pop	r21
    6062:	4f 91       	pop	r20
    6064:	3f 91       	pop	r19
    6066:	2f 91       	pop	r18
    6068:	0f 90       	pop	r0
    606a:	0f be       	out	0x3f, r0	; 63
    606c:	0f 90       	pop	r0
    606e:	1f 90       	pop	r1
    6070:	18 95       	reti

00006072 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_8 (void)
{
    6072:	1f 92       	push	r1
    6074:	0f 92       	push	r0
    6076:	0f b6       	in	r0, 0x3f	; 63
    6078:	0f 92       	push	r0
    607a:	11 24       	eor	r1, r1
    607c:	2f 93       	push	r18
    607e:	3f 93       	push	r19
    6080:	4f 93       	push	r20
    6082:	5f 93       	push	r21
    6084:	6f 93       	push	r22
    6086:	7f 93       	push	r23
    6088:	8f 93       	push	r24
    608a:	9f 93       	push	r25
    608c:	af 93       	push	r26
    608e:	bf 93       	push	r27
    6090:	ef 93       	push	r30
    6092:	ff 93       	push	r31
    6094:	df 93       	push	r29
    6096:	cf 93       	push	r28
    6098:	cd b7       	in	r28, 0x3d	; 61
    609a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    609c:	80 91 c5 01 	lds	r24, 0x01C5
    60a0:	90 91 c6 01 	lds	r25, 0x01C6
    60a4:	00 97       	sbiw	r24, 0x00	; 0
    60a6:	29 f0       	breq	.+10     	; 0x60b2 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    60a8:	e0 91 c5 01 	lds	r30, 0x01C5
    60ac:	f0 91 c6 01 	lds	r31, 0x01C6
    60b0:	09 95       	icall
	}
}
    60b2:	cf 91       	pop	r28
    60b4:	df 91       	pop	r29
    60b6:	ff 91       	pop	r31
    60b8:	ef 91       	pop	r30
    60ba:	bf 91       	pop	r27
    60bc:	af 91       	pop	r26
    60be:	9f 91       	pop	r25
    60c0:	8f 91       	pop	r24
    60c2:	7f 91       	pop	r23
    60c4:	6f 91       	pop	r22
    60c6:	5f 91       	pop	r21
    60c8:	4f 91       	pop	r20
    60ca:	3f 91       	pop	r19
    60cc:	2f 91       	pop	r18
    60ce:	0f 90       	pop	r0
    60d0:	0f be       	out	0x3f, r0	; 63
    60d2:	0f 90       	pop	r0
    60d4:	1f 90       	pop	r1
    60d6:	18 95       	reti

000060d8 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_7 (void)
{
    60d8:	1f 92       	push	r1
    60da:	0f 92       	push	r0
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	0f 92       	push	r0
    60e0:	11 24       	eor	r1, r1
    60e2:	2f 93       	push	r18
    60e4:	3f 93       	push	r19
    60e6:	4f 93       	push	r20
    60e8:	5f 93       	push	r21
    60ea:	6f 93       	push	r22
    60ec:	7f 93       	push	r23
    60ee:	8f 93       	push	r24
    60f0:	9f 93       	push	r25
    60f2:	af 93       	push	r26
    60f4:	bf 93       	push	r27
    60f6:	ef 93       	push	r30
    60f8:	ff 93       	push	r31
    60fa:	df 93       	push	r29
    60fc:	cf 93       	push	r28
    60fe:	cd b7       	in	r28, 0x3d	; 61
    6100:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    6102:	80 91 c3 01 	lds	r24, 0x01C3
    6106:	90 91 c4 01 	lds	r25, 0x01C4
    610a:	00 97       	sbiw	r24, 0x00	; 0
    610c:	29 f0       	breq	.+10     	; 0x6118 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    610e:	e0 91 c3 01 	lds	r30, 0x01C3
    6112:	f0 91 c4 01 	lds	r31, 0x01C4
    6116:	09 95       	icall
	}
}
    6118:	cf 91       	pop	r28
    611a:	df 91       	pop	r29
    611c:	ff 91       	pop	r31
    611e:	ef 91       	pop	r30
    6120:	bf 91       	pop	r27
    6122:	af 91       	pop	r26
    6124:	9f 91       	pop	r25
    6126:	8f 91       	pop	r24
    6128:	7f 91       	pop	r23
    612a:	6f 91       	pop	r22
    612c:	5f 91       	pop	r21
    612e:	4f 91       	pop	r20
    6130:	3f 91       	pop	r19
    6132:	2f 91       	pop	r18
    6134:	0f 90       	pop	r0
    6136:	0f be       	out	0x3f, r0	; 63
    6138:	0f 90       	pop	r0
    613a:	1f 90       	pop	r1
    613c:	18 95       	reti

0000613e <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_6 (void)
{
    613e:	1f 92       	push	r1
    6140:	0f 92       	push	r0
    6142:	0f b6       	in	r0, 0x3f	; 63
    6144:	0f 92       	push	r0
    6146:	11 24       	eor	r1, r1
    6148:	2f 93       	push	r18
    614a:	3f 93       	push	r19
    614c:	4f 93       	push	r20
    614e:	5f 93       	push	r21
    6150:	6f 93       	push	r22
    6152:	7f 93       	push	r23
    6154:	8f 93       	push	r24
    6156:	9f 93       	push	r25
    6158:	af 93       	push	r26
    615a:	bf 93       	push	r27
    615c:	ef 93       	push	r30
    615e:	ff 93       	push	r31
    6160:	df 93       	push	r29
    6162:	cf 93       	push	r28
    6164:	cd b7       	in	r28, 0x3d	; 61
    6166:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    6168:	80 91 c1 01 	lds	r24, 0x01C1
    616c:	90 91 c2 01 	lds	r25, 0x01C2
    6170:	00 97       	sbiw	r24, 0x00	; 0
    6172:	29 f0       	breq	.+10     	; 0x617e <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    6174:	e0 91 c1 01 	lds	r30, 0x01C1
    6178:	f0 91 c2 01 	lds	r31, 0x01C2
    617c:	09 95       	icall
	}
}
    617e:	cf 91       	pop	r28
    6180:	df 91       	pop	r29
    6182:	ff 91       	pop	r31
    6184:	ef 91       	pop	r30
    6186:	bf 91       	pop	r27
    6188:	af 91       	pop	r26
    618a:	9f 91       	pop	r25
    618c:	8f 91       	pop	r24
    618e:	7f 91       	pop	r23
    6190:	6f 91       	pop	r22
    6192:	5f 91       	pop	r21
    6194:	4f 91       	pop	r20
    6196:	3f 91       	pop	r19
    6198:	2f 91       	pop	r18
    619a:	0f 90       	pop	r0
    619c:	0f be       	out	0x3f, r0	; 63
    619e:	0f 90       	pop	r0
    61a0:	1f 90       	pop	r1
    61a2:	18 95       	reti

000061a4 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_5 (void)
{
    61a4:	1f 92       	push	r1
    61a6:	0f 92       	push	r0
    61a8:	0f b6       	in	r0, 0x3f	; 63
    61aa:	0f 92       	push	r0
    61ac:	11 24       	eor	r1, r1
    61ae:	2f 93       	push	r18
    61b0:	3f 93       	push	r19
    61b2:	4f 93       	push	r20
    61b4:	5f 93       	push	r21
    61b6:	6f 93       	push	r22
    61b8:	7f 93       	push	r23
    61ba:	8f 93       	push	r24
    61bc:	9f 93       	push	r25
    61be:	af 93       	push	r26
    61c0:	bf 93       	push	r27
    61c2:	ef 93       	push	r30
    61c4:	ff 93       	push	r31
    61c6:	df 93       	push	r29
    61c8:	cf 93       	push	r28
    61ca:	cd b7       	in	r28, 0x3d	; 61
    61cc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    61ce:	80 91 bf 01 	lds	r24, 0x01BF
    61d2:	90 91 c0 01 	lds	r25, 0x01C0
    61d6:	00 97       	sbiw	r24, 0x00	; 0
    61d8:	29 f0       	breq	.+10     	; 0x61e4 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    61da:	e0 91 bf 01 	lds	r30, 0x01BF
    61de:	f0 91 c0 01 	lds	r31, 0x01C0
    61e2:	09 95       	icall
	}
}
    61e4:	cf 91       	pop	r28
    61e6:	df 91       	pop	r29
    61e8:	ff 91       	pop	r31
    61ea:	ef 91       	pop	r30
    61ec:	bf 91       	pop	r27
    61ee:	af 91       	pop	r26
    61f0:	9f 91       	pop	r25
    61f2:	8f 91       	pop	r24
    61f4:	7f 91       	pop	r23
    61f6:	6f 91       	pop	r22
    61f8:	5f 91       	pop	r21
    61fa:	4f 91       	pop	r20
    61fc:	3f 91       	pop	r19
    61fe:	2f 91       	pop	r18
    6200:	0f 90       	pop	r0
    6202:	0f be       	out	0x3f, r0	; 63
    6204:	0f 90       	pop	r0
    6206:	1f 90       	pop	r1
    6208:	18 95       	reti

0000620a <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal,used, externally_visible)) ;
void __vector_4 (void)
{
    620a:	1f 92       	push	r1
    620c:	0f 92       	push	r0
    620e:	0f b6       	in	r0, 0x3f	; 63
    6210:	0f 92       	push	r0
    6212:	11 24       	eor	r1, r1
    6214:	2f 93       	push	r18
    6216:	3f 93       	push	r19
    6218:	4f 93       	push	r20
    621a:	5f 93       	push	r21
    621c:	6f 93       	push	r22
    621e:	7f 93       	push	r23
    6220:	8f 93       	push	r24
    6222:	9f 93       	push	r25
    6224:	af 93       	push	r26
    6226:	bf 93       	push	r27
    6228:	ef 93       	push	r30
    622a:	ff 93       	push	r31
    622c:	df 93       	push	r29
    622e:	cf 93       	push	r28
    6230:	cd b7       	in	r28, 0x3d	; 61
    6232:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    6234:	80 91 bd 01 	lds	r24, 0x01BD
    6238:	90 91 be 01 	lds	r25, 0x01BE
    623c:	00 97       	sbiw	r24, 0x00	; 0
    623e:	29 f0       	breq	.+10     	; 0x624a <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    6240:	e0 91 bd 01 	lds	r30, 0x01BD
    6244:	f0 91 be 01 	lds	r31, 0x01BE
    6248:	09 95       	icall
	}
}
    624a:	cf 91       	pop	r28
    624c:	df 91       	pop	r29
    624e:	ff 91       	pop	r31
    6250:	ef 91       	pop	r30
    6252:	bf 91       	pop	r27
    6254:	af 91       	pop	r26
    6256:	9f 91       	pop	r25
    6258:	8f 91       	pop	r24
    625a:	7f 91       	pop	r23
    625c:	6f 91       	pop	r22
    625e:	5f 91       	pop	r21
    6260:	4f 91       	pop	r20
    6262:	3f 91       	pop	r19
    6264:	2f 91       	pop	r18
    6266:	0f 90       	pop	r0
    6268:	0f be       	out	0x3f, r0	; 63
    626a:	0f 90       	pop	r0
    626c:	1f 90       	pop	r1
    626e:	18 95       	reti

00006270 <TWI_voidInitMaster>:
#include "TWI_Private.h"


/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    6270:	df 93       	push	r29
    6272:	cf 93       	push	r28
    6274:	0f 92       	push	r0
    6276:	cd b7       	in	r28, 0x3d	; 61
    6278:	de b7       	in	r29, 0x3e	; 62
    627a:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
    627c:	e0 e2       	ldi	r30, 0x20	; 32
    627e:	f0 e0       	ldi	r31, 0x00	; 0
    6280:	82 e0       	ldi	r24, 0x02	; 2
    6282:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	/*2- Clear the pre-scaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
    6284:	e1 e2       	ldi	r30, 0x21	; 33
    6286:	f0 e0       	ldi	r31, 0x00	; 0
    6288:	10 82       	st	Z, r1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
    628a:	89 81       	ldd	r24, Y+1	; 0x01
    628c:	88 23       	and	r24, r24
    628e:	29 f0       	breq	.+10     	; 0x629a <TWI_voidInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
    6290:	e2 e2       	ldi	r30, 0x22	; 34
    6292:	f0 e0       	ldi	r31, 0x00	; 0
    6294:	89 81       	ldd	r24, Y+1	; 0x01
    6296:	88 0f       	add	r24, r24
    6298:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    629a:	a6 e5       	ldi	r26, 0x56	; 86
    629c:	b0 e0       	ldi	r27, 0x00	; 0
    629e:	e6 e5       	ldi	r30, 0x56	; 86
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	80 81       	ld	r24, Z
    62a4:	80 64       	ori	r24, 0x40	; 64
    62a6:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    62a8:	a6 e5       	ldi	r26, 0x56	; 86
    62aa:	b0 e0       	ldi	r27, 0x00	; 0
    62ac:	e6 e5       	ldi	r30, 0x56	; 86
    62ae:	f0 e0       	ldi	r31, 0x00	; 0
    62b0:	80 81       	ld	r24, Z
    62b2:	84 60       	ori	r24, 0x04	; 4
    62b4:	8c 93       	st	X, r24
}
    62b6:	0f 90       	pop	r0
    62b8:	cf 91       	pop	r28
    62ba:	df 91       	pop	r29
    62bc:	08 95       	ret

000062be <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
    62be:	df 93       	push	r29
    62c0:	cf 93       	push	r28
    62c2:	0f 92       	push	r0
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
    62c8:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
    62ca:	e2 e2       	ldi	r30, 0x22	; 34
    62cc:	f0 e0       	ldi	r31, 0x00	; 0
    62ce:	89 81       	ldd	r24, Y+1	; 0x01
    62d0:	88 0f       	add	r24, r24
    62d2:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    62d4:	a6 e5       	ldi	r26, 0x56	; 86
    62d6:	b0 e0       	ldi	r27, 0x00	; 0
    62d8:	e6 e5       	ldi	r30, 0x56	; 86
    62da:	f0 e0       	ldi	r31, 0x00	; 0
    62dc:	80 81       	ld	r24, Z
    62de:	80 64       	ori	r24, 0x40	; 64
    62e0:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    62e2:	a6 e5       	ldi	r26, 0x56	; 86
    62e4:	b0 e0       	ldi	r27, 0x00	; 0
    62e6:	e6 e5       	ldi	r30, 0x56	; 86
    62e8:	f0 e0       	ldi	r31, 0x00	; 0
    62ea:	80 81       	ld	r24, Z
    62ec:	84 60       	ori	r24, 0x04	; 4
    62ee:	8c 93       	st	X, r24
}
    62f0:	0f 90       	pop	r0
    62f2:	cf 91       	pop	r28
    62f4:	df 91       	pop	r29
    62f6:	08 95       	ret

000062f8 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
    62f8:	df 93       	push	r29
    62fa:	cf 93       	push	r28
    62fc:	0f 92       	push	r0
    62fe:	cd b7       	in	r28, 0x3d	; 61
    6300:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    6302:	19 82       	std	Y+1, r1	; 0x01


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    6304:	a6 e5       	ldi	r26, 0x56	; 86
    6306:	b0 e0       	ldi	r27, 0x00	; 0
    6308:	e6 e5       	ldi	r30, 0x56	; 86
    630a:	f0 e0       	ldi	r31, 0x00	; 0
    630c:	80 81       	ld	r24, Z
    630e:	80 62       	ori	r24, 0x20	; 32
    6310:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6312:	a6 e5       	ldi	r26, 0x56	; 86
    6314:	b0 e0       	ldi	r27, 0x00	; 0
    6316:	e6 e5       	ldi	r30, 0x56	; 86
    6318:	f0 e0       	ldi	r31, 0x00	; 0
    631a:	80 81       	ld	r24, Z
    631c:	80 68       	ori	r24, 0x80	; 128
    631e:	8c 93       	st	X, r24
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    6320:	e6 e5       	ldi	r30, 0x56	; 86
    6322:	f0 e0       	ldi	r31, 0x00	; 0
    6324:	80 81       	ld	r24, Z
    6326:	88 23       	and	r24, r24
    6328:	dc f7       	brge	.-10     	; 0x6320 <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
    632a:	e1 e2       	ldi	r30, 0x21	; 33
    632c:	f0 e0       	ldi	r31, 0x00	; 0
    632e:	80 81       	ld	r24, Z
    6330:	88 2f       	mov	r24, r24
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	88 7f       	andi	r24, 0xF8	; 248
    6336:	90 70       	andi	r25, 0x00	; 0
    6338:	88 30       	cpi	r24, 0x08	; 8
    633a:	91 05       	cpc	r25, r1
    633c:	11 f0       	breq	.+4      	; 0x6342 <TWI_SendStartCondition+0x4a>
	{
		Local_Error = StartConditionErr;
    633e:	81 e0       	ldi	r24, 0x01	; 1
    6340:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6342:	89 81       	ldd	r24, Y+1	; 0x01
}
    6344:	0f 90       	pop	r0
    6346:	cf 91       	pop	r28
    6348:	df 91       	pop	r29
    634a:	08 95       	ret

0000634c <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
    634c:	df 93       	push	r29
    634e:	cf 93       	push	r28
    6350:	0f 92       	push	r0
    6352:	cd b7       	in	r28, 0x3d	; 61
    6354:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
    6356:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    6358:	a6 e5       	ldi	r26, 0x56	; 86
    635a:	b0 e0       	ldi	r27, 0x00	; 0
    635c:	e6 e5       	ldi	r30, 0x56	; 86
    635e:	f0 e0       	ldi	r31, 0x00	; 0
    6360:	80 81       	ld	r24, Z
    6362:	80 62       	ori	r24, 0x20	; 32
    6364:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6366:	a6 e5       	ldi	r26, 0x56	; 86
    6368:	b0 e0       	ldi	r27, 0x00	; 0
    636a:	e6 e5       	ldi	r30, 0x56	; 86
    636c:	f0 e0       	ldi	r31, 0x00	; 0
    636e:	80 81       	ld	r24, Z
    6370:	80 68       	ori	r24, 0x80	; 128
    6372:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    6374:	e6 e5       	ldi	r30, 0x56	; 86
    6376:	f0 e0       	ldi	r31, 0x00	; 0
    6378:	80 81       	ld	r24, Z
    637a:	88 23       	and	r24, r24
    637c:	dc f7       	brge	.-10     	; 0x6374 <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
    637e:	e1 e2       	ldi	r30, 0x21	; 33
    6380:	f0 e0       	ldi	r31, 0x00	; 0
    6382:	80 81       	ld	r24, Z
    6384:	88 2f       	mov	r24, r24
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	88 7f       	andi	r24, 0xF8	; 248
    638a:	90 70       	andi	r25, 0x00	; 0
    638c:	80 31       	cpi	r24, 0x10	; 16
    638e:	91 05       	cpc	r25, r1
    6390:	11 f0       	breq	.+4      	; 0x6396 <TWI_SendRepeatedStart+0x4a>
	{
		Local_Error = RepeatedStartError;
    6392:	82 e0       	ldi	r24, 0x02	; 2
    6394:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6396:	89 81       	ldd	r24, Y+1	; 0x01
}
    6398:	0f 90       	pop	r0
    639a:	cf 91       	pop	r28
    639c:	df 91       	pop	r29
    639e:	08 95       	ret

000063a0 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    63a0:	df 93       	push	r29
    63a2:	cf 93       	push	r28
    63a4:	00 d0       	rcall	.+0      	; 0x63a6 <TWI_SendSlaveAddressWithWrite+0x6>
    63a6:	cd b7       	in	r28, 0x3d	; 61
    63a8:	de b7       	in	r29, 0x3e	; 62
    63aa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    63ac:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
    63ae:	e3 e2       	ldi	r30, 0x23	; 35
    63b0:	f0 e0       	ldi	r31, 0x00	; 0
    63b2:	8a 81       	ldd	r24, Y+2	; 0x02
    63b4:	88 0f       	add	r24, r24
    63b6:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
    63b8:	a3 e2       	ldi	r26, 0x23	; 35
    63ba:	b0 e0       	ldi	r27, 0x00	; 0
    63bc:	e3 e2       	ldi	r30, 0x23	; 35
    63be:	f0 e0       	ldi	r31, 0x00	; 0
    63c0:	80 81       	ld	r24, Z
    63c2:	8e 7f       	andi	r24, 0xFE	; 254
    63c4:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    63c6:	a6 e5       	ldi	r26, 0x56	; 86
    63c8:	b0 e0       	ldi	r27, 0x00	; 0
    63ca:	e6 e5       	ldi	r30, 0x56	; 86
    63cc:	f0 e0       	ldi	r31, 0x00	; 0
    63ce:	80 81       	ld	r24, Z
    63d0:	8f 7d       	andi	r24, 0xDF	; 223
    63d2:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    63d4:	a6 e5       	ldi	r26, 0x56	; 86
    63d6:	b0 e0       	ldi	r27, 0x00	; 0
    63d8:	e6 e5       	ldi	r30, 0x56	; 86
    63da:	f0 e0       	ldi	r31, 0x00	; 0
    63dc:	80 81       	ld	r24, Z
    63de:	80 68       	ori	r24, 0x80	; 128
    63e0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    63e2:	e6 e5       	ldi	r30, 0x56	; 86
    63e4:	f0 e0       	ldi	r31, 0x00	; 0
    63e6:	80 81       	ld	r24, Z
    63e8:	88 23       	and	r24, r24
    63ea:	dc f7       	brge	.-10     	; 0x63e2 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    63ec:	e1 e2       	ldi	r30, 0x21	; 33
    63ee:	f0 e0       	ldi	r31, 0x00	; 0
    63f0:	80 81       	ld	r24, Z
    63f2:	88 2f       	mov	r24, r24
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	88 7f       	andi	r24, 0xF8	; 248
    63f8:	90 70       	andi	r25, 0x00	; 0
    63fa:	88 31       	cpi	r24, 0x18	; 24
    63fc:	91 05       	cpc	r25, r1
    63fe:	11 f0       	breq	.+4      	; 0x6404 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_Error = SlaveAddressWithWriteErr;
    6400:	83 e0       	ldi	r24, 0x03	; 3
    6402:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6404:	89 81       	ldd	r24, Y+1	; 0x01
}
    6406:	0f 90       	pop	r0
    6408:	0f 90       	pop	r0
    640a:	cf 91       	pop	r28
    640c:	df 91       	pop	r29
    640e:	08 95       	ret

00006410 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    6410:	df 93       	push	r29
    6412:	cf 93       	push	r28
    6414:	00 d0       	rcall	.+0      	; 0x6416 <TWI_SendSlaveAddressWithRead+0x6>
    6416:	cd b7       	in	r28, 0x3d	; 61
    6418:	de b7       	in	r29, 0x3e	; 62
    641a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    641c:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
    641e:	e3 e2       	ldi	r30, 0x23	; 35
    6420:	f0 e0       	ldi	r31, 0x00	; 0
    6422:	8a 81       	ldd	r24, Y+2	; 0x02
    6424:	88 0f       	add	r24, r24
    6426:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
    6428:	a3 e2       	ldi	r26, 0x23	; 35
    642a:	b0 e0       	ldi	r27, 0x00	; 0
    642c:	e3 e2       	ldi	r30, 0x23	; 35
    642e:	f0 e0       	ldi	r31, 0x00	; 0
    6430:	80 81       	ld	r24, Z
    6432:	81 60       	ori	r24, 0x01	; 1
    6434:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    6436:	a6 e5       	ldi	r26, 0x56	; 86
    6438:	b0 e0       	ldi	r27, 0x00	; 0
    643a:	e6 e5       	ldi	r30, 0x56	; 86
    643c:	f0 e0       	ldi	r31, 0x00	; 0
    643e:	80 81       	ld	r24, Z
    6440:	8f 7d       	andi	r24, 0xDF	; 223
    6442:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6444:	a6 e5       	ldi	r26, 0x56	; 86
    6446:	b0 e0       	ldi	r27, 0x00	; 0
    6448:	e6 e5       	ldi	r30, 0x56	; 86
    644a:	f0 e0       	ldi	r31, 0x00	; 0
    644c:	80 81       	ld	r24, Z
    644e:	80 68       	ori	r24, 0x80	; 128
    6450:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    6452:	e6 e5       	ldi	r30, 0x56	; 86
    6454:	f0 e0       	ldi	r31, 0x00	; 0
    6456:	80 81       	ld	r24, Z
    6458:	88 23       	and	r24, r24
    645a:	dc f7       	brge	.-10     	; 0x6452 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    645c:	e1 e2       	ldi	r30, 0x21	; 33
    645e:	f0 e0       	ldi	r31, 0x00	; 0
    6460:	80 81       	ld	r24, Z
    6462:	88 2f       	mov	r24, r24
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	88 7f       	andi	r24, 0xF8	; 248
    6468:	90 70       	andi	r25, 0x00	; 0
    646a:	80 34       	cpi	r24, 0x40	; 64
    646c:	91 05       	cpc	r25, r1
    646e:	11 f0       	breq	.+4      	; 0x6474 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_Error = SlaveAddressWithReadErr;
    6470:	84 e0       	ldi	r24, 0x04	; 4
    6472:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6474:	89 81       	ldd	r24, Y+1	; 0x01
}
    6476:	0f 90       	pop	r0
    6478:	0f 90       	pop	r0
    647a:	cf 91       	pop	r28
    647c:	df 91       	pop	r29
    647e:	08 95       	ret

00006480 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    6480:	df 93       	push	r29
    6482:	cf 93       	push	r28
    6484:	00 d0       	rcall	.+0      	; 0x6486 <TWI_MasterWriteDataByte+0x6>
    6486:	cd b7       	in	r28, 0x3d	; 61
    6488:	de b7       	in	r29, 0x3e	; 62
    648a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    648c:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    648e:	e3 e2       	ldi	r30, 0x23	; 35
    6490:	f0 e0       	ldi	r31, 0x00	; 0
    6492:	8a 81       	ldd	r24, Y+2	; 0x02
    6494:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6496:	a6 e5       	ldi	r26, 0x56	; 86
    6498:	b0 e0       	ldi	r27, 0x00	; 0
    649a:	e6 e5       	ldi	r30, 0x56	; 86
    649c:	f0 e0       	ldi	r31, 0x00	; 0
    649e:	80 81       	ld	r24, Z
    64a0:	80 68       	ori	r24, 0x80	; 128
    64a2:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    64a4:	e6 e5       	ldi	r30, 0x56	; 86
    64a6:	f0 e0       	ldi	r31, 0x00	; 0
    64a8:	80 81       	ld	r24, Z
    64aa:	88 23       	and	r24, r24
    64ac:	dc f7       	brge	.-10     	; 0x64a4 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    64ae:	e1 e2       	ldi	r30, 0x21	; 33
    64b0:	f0 e0       	ldi	r31, 0x00	; 0
    64b2:	80 81       	ld	r24, Z
    64b4:	88 2f       	mov	r24, r24
    64b6:	90 e0       	ldi	r25, 0x00	; 0
    64b8:	88 7f       	andi	r24, 0xF8	; 248
    64ba:	90 70       	andi	r25, 0x00	; 0
    64bc:	88 32       	cpi	r24, 0x28	; 40
    64be:	91 05       	cpc	r25, r1
    64c0:	11 f0       	breq	.+4      	; 0x64c6 <TWI_MasterWriteDataByte+0x46>
	{
		Local_Error = MasterWriteByteErr;
    64c2:	85 e0       	ldi	r24, 0x05	; 5
    64c4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    64c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    64c8:	0f 90       	pop	r0
    64ca:	0f 90       	pop	r0
    64cc:	cf 91       	pop	r28
    64ce:	df 91       	pop	r29
    64d0:	08 95       	ret

000064d2 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    64d2:	df 93       	push	r29
    64d4:	cf 93       	push	r28
    64d6:	00 d0       	rcall	.+0      	; 0x64d8 <TWI_MasterReadDataByte+0x6>
    64d8:	0f 92       	push	r0
    64da:	cd b7       	in	r28, 0x3d	; 61
    64dc:	de b7       	in	r29, 0x3e	; 62
    64de:	9b 83       	std	Y+3, r25	; 0x03
    64e0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    64e2:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    64e4:	a6 e5       	ldi	r26, 0x56	; 86
    64e6:	b0 e0       	ldi	r27, 0x00	; 0
    64e8:	e6 e5       	ldi	r30, 0x56	; 86
    64ea:	f0 e0       	ldi	r31, 0x00	; 0
    64ec:	80 81       	ld	r24, Z
    64ee:	80 68       	ori	r24, 0x80	; 128
    64f0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    64f2:	e6 e5       	ldi	r30, 0x56	; 86
    64f4:	f0 e0       	ldi	r31, 0x00	; 0
    64f6:	80 81       	ld	r24, Z
    64f8:	88 23       	and	r24, r24
    64fa:	dc f7       	brge	.-10     	; 0x64f2 <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    64fc:	e1 e2       	ldi	r30, 0x21	; 33
    64fe:	f0 e0       	ldi	r31, 0x00	; 0
    6500:	80 81       	ld	r24, Z
    6502:	88 2f       	mov	r24, r24
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	88 7f       	andi	r24, 0xF8	; 248
    6508:	90 70       	andi	r25, 0x00	; 0
    650a:	80 35       	cpi	r24, 0x50	; 80
    650c:	91 05       	cpc	r25, r1
    650e:	19 f0       	breq	.+6      	; 0x6516 <TWI_MasterReadDataByte+0x44>
	{
		Local_Error = MasterReadByteErr;
    6510:	86 e0       	ldi	r24, 0x06	; 6
    6512:	89 83       	std	Y+1, r24	; 0x01
    6514:	06 c0       	rjmp	.+12     	; 0x6522 <TWI_MasterReadDataByte+0x50>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    6516:	e3 e2       	ldi	r30, 0x23	; 35
    6518:	f0 e0       	ldi	r31, 0x00	; 0
    651a:	80 81       	ld	r24, Z
    651c:	ea 81       	ldd	r30, Y+2	; 0x02
    651e:	fb 81       	ldd	r31, Y+3	; 0x03
    6520:	80 83       	st	Z, r24
	}

	return Local_Error;
    6522:	89 81       	ldd	r24, Y+1	; 0x01
}
    6524:	0f 90       	pop	r0
    6526:	0f 90       	pop	r0
    6528:	0f 90       	pop	r0
    652a:	cf 91       	pop	r28
    652c:	df 91       	pop	r29
    652e:	08 95       	ret

00006530 <TWI_SlaveWriteDataByte>:

TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
    6530:	df 93       	push	r29
    6532:	cf 93       	push	r28
    6534:	00 d0       	rcall	.+0      	; 0x6536 <TWI_SlaveWriteDataByte+0x6>
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
    653a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    653c:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    653e:	e3 e2       	ldi	r30, 0x23	; 35
    6540:	f0 e0       	ldi	r31, 0x00	; 0
    6542:	8a 81       	ldd	r24, Y+2	; 0x02
    6544:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6546:	a6 e5       	ldi	r26, 0x56	; 86
    6548:	b0 e0       	ldi	r27, 0x00	; 0
    654a:	e6 e5       	ldi	r30, 0x56	; 86
    654c:	f0 e0       	ldi	r31, 0x00	; 0
    654e:	80 81       	ld	r24, Z
    6550:	80 68       	ori	r24, 0x80	; 128
    6552:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    6554:	e6 e5       	ldi	r30, 0x56	; 86
    6556:	f0 e0       	ldi	r31, 0x00	; 0
    6558:	80 81       	ld	r24, Z
    655a:	88 23       	and	r24, r24
    655c:	dc f7       	brge	.-10     	; 0x6554 <TWI_SlaveWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    655e:	e1 e2       	ldi	r30, 0x21	; 33
    6560:	f0 e0       	ldi	r31, 0x00	; 0
    6562:	80 81       	ld	r24, Z
    6564:	88 2f       	mov	r24, r24
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	88 7f       	andi	r24, 0xF8	; 248
    656a:	90 70       	andi	r25, 0x00	; 0
    656c:	88 3b       	cpi	r24, 0xB8	; 184
    656e:	91 05       	cpc	r25, r1
    6570:	11 f0       	breq	.+4      	; 0x6576 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_Error = SlaveWriteByteErr;
    6572:	87 e0       	ldi	r24, 0x07	; 7
    6574:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    6576:	89 81       	ldd	r24, Y+1	; 0x01
}
    6578:	0f 90       	pop	r0
    657a:	0f 90       	pop	r0
    657c:	cf 91       	pop	r28
    657e:	df 91       	pop	r29
    6580:	08 95       	ret

00006582 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    6582:	df 93       	push	r29
    6584:	cf 93       	push	r28
    6586:	00 d0       	rcall	.+0      	; 0x6588 <TWI_SlaveReadDataByte+0x6>
    6588:	0f 92       	push	r0
    658a:	cd b7       	in	r28, 0x3d	; 61
    658c:	de b7       	in	r29, 0x3e	; 62
    658e:	9b 83       	std	Y+3, r25	; 0x03
    6590:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    6592:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    6594:	a6 e5       	ldi	r26, 0x56	; 86
    6596:	b0 e0       	ldi	r27, 0x00	; 0
    6598:	e6 e5       	ldi	r30, 0x56	; 86
    659a:	f0 e0       	ldi	r31, 0x00	; 0
    659c:	80 81       	ld	r24, Z
    659e:	80 68       	ori	r24, 0x80	; 128
    65a0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    65a2:	e6 e5       	ldi	r30, 0x56	; 86
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	80 81       	ld	r24, Z
    65a8:	88 23       	and	r24, r24
    65aa:	dc f7       	brge	.-10     	; 0x65a2 <TWI_SlaveReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
    65ac:	e1 e2       	ldi	r30, 0x21	; 33
    65ae:	f0 e0       	ldi	r31, 0x00	; 0
    65b0:	80 81       	ld	r24, Z
    65b2:	88 2f       	mov	r24, r24
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	88 7f       	andi	r24, 0xF8	; 248
    65b8:	90 70       	andi	r25, 0x00	; 0
    65ba:	80 36       	cpi	r24, 0x60	; 96
    65bc:	91 05       	cpc	r25, r1
    65be:	11 f0       	breq	.+4      	; 0x65c4 <TWI_SlaveReadDataByte+0x42>
	{
		Local_Error = SlaveReadByteErr;
    65c0:	88 e0       	ldi	r24, 0x08	; 8
    65c2:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(TWCR,TWCR_TWINT);
    65c4:	a6 e5       	ldi	r26, 0x56	; 86
    65c6:	b0 e0       	ldi	r27, 0x00	; 0
    65c8:	e6 e5       	ldi	r30, 0x56	; 86
    65ca:	f0 e0       	ldi	r31, 0x00	; 0
    65cc:	80 81       	ld	r24, Z
    65ce:	80 68       	ori	r24, 0x80	; 128
    65d0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    65d2:	e6 e5       	ldi	r30, 0x56	; 86
    65d4:	f0 e0       	ldi	r31, 0x00	; 0
    65d6:	80 81       	ld	r24, Z
    65d8:	88 23       	and	r24, r24
    65da:	dc f7       	brge	.-10     	; 0x65d2 <TWI_SlaveReadDataByte+0x50>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    65dc:	e1 e2       	ldi	r30, 0x21	; 33
    65de:	f0 e0       	ldi	r31, 0x00	; 0
    65e0:	80 81       	ld	r24, Z
    65e2:	88 2f       	mov	r24, r24
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	88 7f       	andi	r24, 0xF8	; 248
    65e8:	90 70       	andi	r25, 0x00	; 0
    65ea:	80 38       	cpi	r24, 0x80	; 128
    65ec:	91 05       	cpc	r25, r1
    65ee:	19 f0       	breq	.+6      	; 0x65f6 <TWI_SlaveReadDataByte+0x74>
	{
		Local_Error = SlaveReadByteErr;
    65f0:	88 e0       	ldi	r24, 0x08	; 8
    65f2:	89 83       	std	Y+1, r24	; 0x01
    65f4:	06 c0       	rjmp	.+12     	; 0x6602 <TWI_SlaveReadDataByte+0x80>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    65f6:	e3 e2       	ldi	r30, 0x23	; 35
    65f8:	f0 e0       	ldi	r31, 0x00	; 0
    65fa:	80 81       	ld	r24, Z
    65fc:	ea 81       	ldd	r30, Y+2	; 0x02
    65fe:	fb 81       	ldd	r31, Y+3	; 0x03
    6600:	80 83       	st	Z, r24
	}

	return Local_Error;
    6602:	89 81       	ldd	r24, Y+1	; 0x01
}
    6604:	0f 90       	pop	r0
    6606:	0f 90       	pop	r0
    6608:	0f 90       	pop	r0
    660a:	cf 91       	pop	r28
    660c:	df 91       	pop	r29
    660e:	08 95       	ret

00006610 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
    6610:	df 93       	push	r29
    6612:	cf 93       	push	r28
    6614:	cd b7       	in	r28, 0x3d	; 61
    6616:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    6618:	a6 e5       	ldi	r26, 0x56	; 86
    661a:	b0 e0       	ldi	r27, 0x00	; 0
    661c:	e6 e5       	ldi	r30, 0x56	; 86
    661e:	f0 e0       	ldi	r31, 0x00	; 0
    6620:	80 81       	ld	r24, Z
    6622:	80 61       	ori	r24, 0x10	; 16
    6624:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    6626:	a6 e5       	ldi	r26, 0x56	; 86
    6628:	b0 e0       	ldi	r27, 0x00	; 0
    662a:	e6 e5       	ldi	r30, 0x56	; 86
    662c:	f0 e0       	ldi	r31, 0x00	; 0
    662e:	80 81       	ld	r24, Z
    6630:	80 68       	ori	r24, 0x80	; 128
    6632:	8c 93       	st	X, r24

}
    6634:	cf 91       	pop	r28
    6636:	df 91       	pop	r29
    6638:	08 95       	ret

0000663a <__vector_13>:
void (*GlobalPTFCTCcallback_Empty_Regester)(void)=NULL;
u8 *PTR_TO_RECEIVED_DATA = NULL;

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    663a:	1f 92       	push	r1
    663c:	0f 92       	push	r0
    663e:	0f b6       	in	r0, 0x3f	; 63
    6640:	0f 92       	push	r0
    6642:	11 24       	eor	r1, r1
    6644:	2f 93       	push	r18
    6646:	3f 93       	push	r19
    6648:	4f 93       	push	r20
    664a:	5f 93       	push	r21
    664c:	6f 93       	push	r22
    664e:	7f 93       	push	r23
    6650:	8f 93       	push	r24
    6652:	9f 93       	push	r25
    6654:	af 93       	push	r26
    6656:	bf 93       	push	r27
    6658:	ef 93       	push	r30
    665a:	ff 93       	push	r31
    665c:	df 93       	push	r29
    665e:	cf 93       	push	r28
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
    if(NULL != GlobalPTFCTCcallback_rx)
    6664:	80 91 d5 01 	lds	r24, 0x01D5
    6668:	90 91 d6 01 	lds	r25, 0x01D6
    666c:	00 97       	sbiw	r24, 0x00	; 0
    666e:	69 f0       	breq	.+26     	; 0x668a <__vector_13+0x50>
    {
    	*PTR_TO_RECEIVED_DATA=USART_UDR;
    6670:	a0 91 db 01 	lds	r26, 0x01DB
    6674:	b0 91 dc 01 	lds	r27, 0x01DC
    6678:	ec e2       	ldi	r30, 0x2C	; 44
    667a:	f0 e0       	ldi	r31, 0x00	; 0
    667c:	80 81       	ld	r24, Z
    667e:	8c 93       	st	X, r24

    	 GlobalPTFCTCcallback_rx();
    6680:	e0 91 d5 01 	lds	r30, 0x01D5
    6684:	f0 91 d6 01 	lds	r31, 0x01D6
    6688:	09 95       	icall

    }
}
    668a:	cf 91       	pop	r28
    668c:	df 91       	pop	r29
    668e:	ff 91       	pop	r31
    6690:	ef 91       	pop	r30
    6692:	bf 91       	pop	r27
    6694:	af 91       	pop	r26
    6696:	9f 91       	pop	r25
    6698:	8f 91       	pop	r24
    669a:	7f 91       	pop	r23
    669c:	6f 91       	pop	r22
    669e:	5f 91       	pop	r21
    66a0:	4f 91       	pop	r20
    66a2:	3f 91       	pop	r19
    66a4:	2f 91       	pop	r18
    66a6:	0f 90       	pop	r0
    66a8:	0f be       	out	0x3f, r0	; 63
    66aa:	0f 90       	pop	r0
    66ac:	1f 90       	pop	r1
    66ae:	18 95       	reti

000066b0 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
    66b0:	1f 92       	push	r1
    66b2:	0f 92       	push	r0
    66b4:	0f b6       	in	r0, 0x3f	; 63
    66b6:	0f 92       	push	r0
    66b8:	11 24       	eor	r1, r1
    66ba:	2f 93       	push	r18
    66bc:	3f 93       	push	r19
    66be:	4f 93       	push	r20
    66c0:	5f 93       	push	r21
    66c2:	6f 93       	push	r22
    66c4:	7f 93       	push	r23
    66c6:	8f 93       	push	r24
    66c8:	9f 93       	push	r25
    66ca:	af 93       	push	r26
    66cc:	bf 93       	push	r27
    66ce:	ef 93       	push	r30
    66d0:	ff 93       	push	r31
    66d2:	df 93       	push	r29
    66d4:	cf 93       	push	r28
    66d6:	cd b7       	in	r28, 0x3d	; 61
    66d8:	de b7       	in	r29, 0x3e	; 62
      if(NULL != GlobalPTFCTCcallback_tx)
    66da:	80 91 d7 01 	lds	r24, 0x01D7
    66de:	90 91 d8 01 	lds	r25, 0x01D8
    66e2:	00 97       	sbiw	r24, 0x00	; 0
    66e4:	29 f0       	breq	.+10     	; 0x66f0 <__vector_14+0x40>
    {
        GlobalPTFCTCcallback_tx();
    66e6:	e0 91 d7 01 	lds	r30, 0x01D7
    66ea:	f0 91 d8 01 	lds	r31, 0x01D8
    66ee:	09 95       	icall
    }
}
    66f0:	cf 91       	pop	r28
    66f2:	df 91       	pop	r29
    66f4:	ff 91       	pop	r31
    66f6:	ef 91       	pop	r30
    66f8:	bf 91       	pop	r27
    66fa:	af 91       	pop	r26
    66fc:	9f 91       	pop	r25
    66fe:	8f 91       	pop	r24
    6700:	7f 91       	pop	r23
    6702:	6f 91       	pop	r22
    6704:	5f 91       	pop	r21
    6706:	4f 91       	pop	r20
    6708:	3f 91       	pop	r19
    670a:	2f 91       	pop	r18
    670c:	0f 90       	pop	r0
    670e:	0f be       	out	0x3f, r0	; 63
    6710:	0f 90       	pop	r0
    6712:	1f 90       	pop	r1
    6714:	18 95       	reti

00006716 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
    6716:	1f 92       	push	r1
    6718:	0f 92       	push	r0
    671a:	0f b6       	in	r0, 0x3f	; 63
    671c:	0f 92       	push	r0
    671e:	11 24       	eor	r1, r1
    6720:	2f 93       	push	r18
    6722:	3f 93       	push	r19
    6724:	4f 93       	push	r20
    6726:	5f 93       	push	r21
    6728:	6f 93       	push	r22
    672a:	7f 93       	push	r23
    672c:	8f 93       	push	r24
    672e:	9f 93       	push	r25
    6730:	af 93       	push	r26
    6732:	bf 93       	push	r27
    6734:	ef 93       	push	r30
    6736:	ff 93       	push	r31
    6738:	df 93       	push	r29
    673a:	cf 93       	push	r28
    673c:	cd b7       	in	r28, 0x3d	; 61
    673e:	de b7       	in	r29, 0x3e	; 62
      if(NULL != GlobalPTFCTCcallback_Empty_Regester)
    6740:	80 91 d9 01 	lds	r24, 0x01D9
    6744:	90 91 da 01 	lds	r25, 0x01DA
    6748:	00 97       	sbiw	r24, 0x00	; 0
    674a:	29 f0       	breq	.+10     	; 0x6756 <__vector_15+0x40>
    {
        GlobalPTFCTCcallback_Empty_Regester();
    674c:	e0 91 d9 01 	lds	r30, 0x01D9
    6750:	f0 91 da 01 	lds	r31, 0x01DA
    6754:	09 95       	icall
    }
}
    6756:	cf 91       	pop	r28
    6758:	df 91       	pop	r29
    675a:	ff 91       	pop	r31
    675c:	ef 91       	pop	r30
    675e:	bf 91       	pop	r27
    6760:	af 91       	pop	r26
    6762:	9f 91       	pop	r25
    6764:	8f 91       	pop	r24
    6766:	7f 91       	pop	r23
    6768:	6f 91       	pop	r22
    676a:	5f 91       	pop	r21
    676c:	4f 91       	pop	r20
    676e:	3f 91       	pop	r19
    6770:	2f 91       	pop	r18
    6772:	0f 90       	pop	r0
    6774:	0f be       	out	0x3f, r0	; 63
    6776:	0f 90       	pop	r0
    6778:	1f 90       	pop	r1
    677a:	18 95       	reti

0000677c <UART_voidInit>:


void UART_voidInit(void)
{
    677c:	df 93       	push	r29
    677e:	cf 93       	push	r28
    6780:	0f 92       	push	r0
    6782:	cd b7       	in	r28, 0x3d	; 61
    6784:	de b7       	in	r29, 0x3e	; 62
    u8 Local_var =0;
    6786:	19 82       	std	Y+1, r1	; 0x01
    #elif UART_NUM_OF_DATA_BIT == _7_DATA_BIT
    CLR_BIT(Local_var,UCSRC_UCSZ0);
    SET_BIT(Local_var,UCSRC_UCSZ1);
    CLR_BIT(USART_UCSRB,UCSRB_UCSZ2);
    #elif UART_NUM_OF_DATA_BIT == _8_DATA_BIT
    SET_BIT(Local_var,UCSRC_UCSZ0);
    6788:	89 81       	ldd	r24, Y+1	; 0x01
    678a:	82 60       	ori	r24, 0x02	; 2
    678c:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_var,UCSRC_UCSZ1);
    678e:	89 81       	ldd	r24, Y+1	; 0x01
    6790:	84 60       	ori	r24, 0x04	; 4
    6792:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(USART_UCSRB,UCSRB_UCSZ2);
    6794:	aa e2       	ldi	r26, 0x2A	; 42
    6796:	b0 e0       	ldi	r27, 0x00	; 0
    6798:	ea e2       	ldi	r30, 0x2A	; 42
    679a:	f0 e0       	ldi	r31, 0x00	; 0
    679c:	80 81       	ld	r24, Z
    679e:	8b 7f       	andi	r24, 0xFB	; 251
    67a0:	8c 93       	st	X, r24
    SET_BIT(Local_var,UCSRC_UCSZ1);
    CLR_BIT(USART_UCSRB,UCSRB_UCSZ2);
   #endif

    #if UART_PARITY_MODE == DIASBLE_PARITY_MODE
    CLR_BIT(Local_var,UCSRC_UPM0);
    67a2:	89 81       	ldd	r24, Y+1	; 0x01
    67a4:	8f 7e       	andi	r24, 0xEF	; 239
    67a6:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_var,UCSRC_UPM1);
    67a8:	89 81       	ldd	r24, Y+1	; 0x01
    67aa:	8f 7d       	andi	r24, 0xDF	; 223
    67ac:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_PARITY_MODE == ODD_PARITY_MODE 
    SET_BIT(Local_var,UCSRC_UPM0);
    SET_BIT(Local_var,UCSRC_UPM1);
    #endif
    #if UART_BAUD_RATE ==_9600_BAUD_RATE
    USART_UBRRL= 103 ; //51 at 8 MHz
    67ae:	e9 e2       	ldi	r30, 0x29	; 41
    67b0:	f0 e0       	ldi	r31, 0x00	; 0
    67b2:	87 e6       	ldi	r24, 0x67	; 103
    67b4:	80 83       	st	Z, r24
    #endif
    #if  UART_RX_INT ==  OFF
    CLR_BIT(USART_UCSRB,UCSRB_RXCIE);
    67b6:	aa e2       	ldi	r26, 0x2A	; 42
    67b8:	b0 e0       	ldi	r27, 0x00	; 0
    67ba:	ea e2       	ldi	r30, 0x2A	; 42
    67bc:	f0 e0       	ldi	r31, 0x00	; 0
    67be:	80 81       	ld	r24, Z
    67c0:	8f 77       	andi	r24, 0x7F	; 127
    67c2:	8c 93       	st	X, r24
    #elif  UART_RX_INT ==  ON
    SET_BIT(USART_UCSRB,UCSRB_RXCIE);
    #endif
    #if  UART_TX_INT ==  OFF
    CLR_BIT(USART_UCSRB,UCSRB_TXCIE);
    67c4:	aa e2       	ldi	r26, 0x2A	; 42
    67c6:	b0 e0       	ldi	r27, 0x00	; 0
    67c8:	ea e2       	ldi	r30, 0x2A	; 42
    67ca:	f0 e0       	ldi	r31, 0x00	; 0
    67cc:	80 81       	ld	r24, Z
    67ce:	8f 7b       	andi	r24, 0xBF	; 191
    67d0:	8c 93       	st	X, r24
    #elif  UART_RX_INT ==  ON
    SET_BIT(USART_UCSRB,UCSRB_TXCIE);
    #endif
    #if  UART_DATA_REGISTER_INT == OFF
    CLR_BIT(USART_UCSRB,UCSRB_UDRIE);
    67d2:	aa e2       	ldi	r26, 0x2A	; 42
    67d4:	b0 e0       	ldi	r27, 0x00	; 0
    67d6:	ea e2       	ldi	r30, 0x2A	; 42
    67d8:	f0 e0       	ldi	r31, 0x00	; 0
    67da:	80 81       	ld	r24, Z
    67dc:	8f 7d       	andi	r24, 0xDF	; 223
    67de:	8c 93       	st	X, r24
    #elif  UART_DATA_REGISTER_INT == ON
    SET_BIT(USART_UCSRB,UCSRB_UDRIE);
    #endif
    #if UART_STOP_BITS == _1_STOP_BITS
    CLR_BIT(Local_var,UCSRC_USBS);
    67e0:	89 81       	ldd	r24, Y+1	; 0x01
    67e2:	87 7f       	andi	r24, 0xF7	; 247
    67e4:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_var,UCSRC_USBS);
    #endif
	#if UART_ASYNC_SYNC == ASYNCHRONOUS
    SET_BIT(Local_var,UCSRC_UMSEL);
    #elif UART_ASYNC_SYNC == SYNCHRONOUS
    CLR_BIT(Local_var,UCSRC_UMSEL);
    67e6:	89 81       	ldd	r24, Y+1	; 0x01
    67e8:	8f 7b       	andi	r24, 0xBF	; 191
    67ea:	89 83       	std	Y+1, r24	; 0x01
    #endif
    SET_BIT(USART_UCSRB,UCSRB_RXEN);
    67ec:	aa e2       	ldi	r26, 0x2A	; 42
    67ee:	b0 e0       	ldi	r27, 0x00	; 0
    67f0:	ea e2       	ldi	r30, 0x2A	; 42
    67f2:	f0 e0       	ldi	r31, 0x00	; 0
    67f4:	80 81       	ld	r24, Z
    67f6:	80 61       	ori	r24, 0x10	; 16
    67f8:	8c 93       	st	X, r24
    SET_BIT(USART_UCSRB,UCSRB_TXEN);
    67fa:	aa e2       	ldi	r26, 0x2A	; 42
    67fc:	b0 e0       	ldi	r27, 0x00	; 0
    67fe:	ea e2       	ldi	r30, 0x2A	; 42
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	80 81       	ld	r24, Z
    6804:	88 60       	ori	r24, 0x08	; 8
    6806:	8c 93       	st	X, r24
    SET_BIT(Local_var,7);
    6808:	89 81       	ldd	r24, Y+1	; 0x01
    680a:	80 68       	ori	r24, 0x80	; 128
    680c:	89 83       	std	Y+1, r24	; 0x01
    USART_UCSRC = Local_var ;
    680e:	e0 e4       	ldi	r30, 0x40	; 64
    6810:	f0 e0       	ldi	r31, 0x00	; 0
    6812:	89 81       	ldd	r24, Y+1	; 0x01
    6814:	80 83       	st	Z, r24
}
    6816:	0f 90       	pop	r0
    6818:	cf 91       	pop	r28
    681a:	df 91       	pop	r29
    681c:	08 95       	ret

0000681e <UART_voidSendData_sync>:
void UART_voidSendData_sync(u8 copy_u16transmitdata)
{
    681e:	df 93       	push	r29
    6820:	cf 93       	push	r28
    6822:	0f 92       	push	r0
    6824:	cd b7       	in	r28, 0x3d	; 61
    6826:	de b7       	in	r29, 0x3e	; 62
    6828:	89 83       	std	Y+1, r24	; 0x01
    while (GET_BIT(USART_UCSRA,UCSRA_UDRE)==0); //waiting until transmit data buffer is empty 
    682a:	eb e2       	ldi	r30, 0x2B	; 43
    682c:	f0 e0       	ldi	r31, 0x00	; 0
    682e:	80 81       	ld	r24, Z
    6830:	82 95       	swap	r24
    6832:	86 95       	lsr	r24
    6834:	87 70       	andi	r24, 0x07	; 7
    6836:	88 2f       	mov	r24, r24
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	81 70       	andi	r24, 0x01	; 1
    683c:	90 70       	andi	r25, 0x00	; 0
    683e:	00 97       	sbiw	r24, 0x00	; 0
    6840:	a1 f3       	breq	.-24     	; 0x682a <UART_voidSendData_sync+0xc>
    USART_UDR = copy_u16transmitdata;
    6842:	ec e2       	ldi	r30, 0x2C	; 44
    6844:	f0 e0       	ldi	r31, 0x00	; 0
    6846:	89 81       	ldd	r24, Y+1	; 0x01
    6848:	80 83       	st	Z, r24
    while (GET_BIT(USART_UCSRA,UCSRA_TXC )==0);
    684a:	eb e2       	ldi	r30, 0x2B	; 43
    684c:	f0 e0       	ldi	r31, 0x00	; 0
    684e:	80 81       	ld	r24, Z
    6850:	82 95       	swap	r24
    6852:	86 95       	lsr	r24
    6854:	86 95       	lsr	r24
    6856:	83 70       	andi	r24, 0x03	; 3
    6858:	88 2f       	mov	r24, r24
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	81 70       	andi	r24, 0x01	; 1
    685e:	90 70       	andi	r25, 0x00	; 0
    6860:	00 97       	sbiw	r24, 0x00	; 0
    6862:	99 f3       	breq	.-26     	; 0x684a <UART_voidSendData_sync+0x2c>
    SET_BIT(USART_UCSRA,UCSRA_TXC );
    6864:	ab e2       	ldi	r26, 0x2B	; 43
    6866:	b0 e0       	ldi	r27, 0x00	; 0
    6868:	eb e2       	ldi	r30, 0x2B	; 43
    686a:	f0 e0       	ldi	r31, 0x00	; 0
    686c:	80 81       	ld	r24, Z
    686e:	80 64       	ori	r24, 0x40	; 64
    6870:	8c 93       	st	X, r24
}
    6872:	0f 90       	pop	r0
    6874:	cf 91       	pop	r28
    6876:	df 91       	pop	r29
    6878:	08 95       	ret

0000687a <UART_voidReceiveData_sync>:
u8 UART_voidReceiveData_sync(void)
{
    687a:	df 93       	push	r29
    687c:	cf 93       	push	r28
    687e:	cd b7       	in	r28, 0x3d	; 61
    6880:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(USART_UCSRA,UCSRA_RXC)==0); //waiting until receive data buffer is empty
    6882:	eb e2       	ldi	r30, 0x2B	; 43
    6884:	f0 e0       	ldi	r31, 0x00	; 0
    6886:	80 81       	ld	r24, Z
    6888:	88 23       	and	r24, r24
    688a:	dc f7       	brge	.-10     	; 0x6882 <UART_voidReceiveData_sync+0x8>
     return USART_UDR ;
    688c:	ec e2       	ldi	r30, 0x2C	; 44
    688e:	f0 e0       	ldi	r31, 0x00	; 0
    6890:	80 81       	ld	r24, Z
}
    6892:	cf 91       	pop	r28
    6894:	df 91       	pop	r29
    6896:	08 95       	ret

00006898 <UART_voidReceiveData_Async>:

/*this function used when the transmitting interrupt is on*/

void UART_voidReceiveData_Async(u8 * Copy_pu8ReceivedData , void(*Copy_ptrToFunc)(void))
{
    6898:	df 93       	push	r29
    689a:	cf 93       	push	r28
    689c:	00 d0       	rcall	.+0      	; 0x689e <UART_voidReceiveData_Async+0x6>
    689e:	00 d0       	rcall	.+0      	; 0x68a0 <UART_voidReceiveData_Async+0x8>
    68a0:	cd b7       	in	r28, 0x3d	; 61
    68a2:	de b7       	in	r29, 0x3e	; 62
    68a4:	9a 83       	std	Y+2, r25	; 0x02
    68a6:	89 83       	std	Y+1, r24	; 0x01
    68a8:	7c 83       	std	Y+4, r23	; 0x04
    68aa:	6b 83       	std	Y+3, r22	; 0x03
   if(Copy_ptrToFunc!= NULL)
    68ac:	8b 81       	ldd	r24, Y+3	; 0x03
    68ae:	9c 81       	ldd	r25, Y+4	; 0x04
    68b0:	00 97       	sbiw	r24, 0x00	; 0
    68b2:	31 f0       	breq	.+12     	; 0x68c0 <UART_voidReceiveData_Async+0x28>
   {
	   GlobalPTFCTCcallback_rx = Copy_ptrToFunc ;
    68b4:	8b 81       	ldd	r24, Y+3	; 0x03
    68b6:	9c 81       	ldd	r25, Y+4	; 0x04
    68b8:	90 93 d6 01 	sts	0x01D6, r25
    68bc:	80 93 d5 01 	sts	0x01D5, r24
   }

   PTR_TO_RECEIVED_DATA = Copy_pu8ReceivedData;
    68c0:	89 81       	ldd	r24, Y+1	; 0x01
    68c2:	9a 81       	ldd	r25, Y+2	; 0x02
    68c4:	90 93 dc 01 	sts	0x01DC, r25
    68c8:	80 93 db 01 	sts	0x01DB, r24
}
    68cc:	0f 90       	pop	r0
    68ce:	0f 90       	pop	r0
    68d0:	0f 90       	pop	r0
    68d2:	0f 90       	pop	r0
    68d4:	cf 91       	pop	r28
    68d6:	df 91       	pop	r29
    68d8:	08 95       	ret

000068da <UART_voidSendData_Async>:
/*this function used when the receiving interrupt is on*/
void UART_voidSendData_Async(u8  Copy_u8Data , void(*Copy_ptrToFunc)(void))
{
    68da:	df 93       	push	r29
    68dc:	cf 93       	push	r28
    68de:	00 d0       	rcall	.+0      	; 0x68e0 <UART_voidSendData_Async+0x6>
    68e0:	0f 92       	push	r0
    68e2:	cd b7       	in	r28, 0x3d	; 61
    68e4:	de b7       	in	r29, 0x3e	; 62
    68e6:	89 83       	std	Y+1, r24	; 0x01
    68e8:	7b 83       	std	Y+3, r23	; 0x03
    68ea:	6a 83       	std	Y+2, r22	; 0x02
	while(GET_BIT(USART_UCSRA,UCSRA_TXC)==0);
    68ec:	eb e2       	ldi	r30, 0x2B	; 43
    68ee:	f0 e0       	ldi	r31, 0x00	; 0
    68f0:	80 81       	ld	r24, Z
    68f2:	82 95       	swap	r24
    68f4:	86 95       	lsr	r24
    68f6:	86 95       	lsr	r24
    68f8:	83 70       	andi	r24, 0x03	; 3
    68fa:	88 2f       	mov	r24, r24
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	81 70       	andi	r24, 0x01	; 1
    6900:	90 70       	andi	r25, 0x00	; 0
    6902:	00 97       	sbiw	r24, 0x00	; 0
    6904:	99 f3       	breq	.-26     	; 0x68ec <UART_voidSendData_Async+0x12>
	USART_UDR = Copy_u8Data ;
    6906:	ec e2       	ldi	r30, 0x2C	; 44
    6908:	f0 e0       	ldi	r31, 0x00	; 0
    690a:	89 81       	ldd	r24, Y+1	; 0x01
    690c:	80 83       	st	Z, r24
	 if(Copy_ptrToFunc!= NULL )
    690e:	8a 81       	ldd	r24, Y+2	; 0x02
    6910:	9b 81       	ldd	r25, Y+3	; 0x03
    6912:	00 97       	sbiw	r24, 0x00	; 0
    6914:	31 f0       	breq	.+12     	; 0x6922 <UART_voidSendData_Async+0x48>
	   {
		 GlobalPTFCTCcallback_tx=Copy_ptrToFunc ;
    6916:	8a 81       	ldd	r24, Y+2	; 0x02
    6918:	9b 81       	ldd	r25, Y+3	; 0x03
    691a:	90 93 d8 01 	sts	0x01D8, r25
    691e:	80 93 d7 01 	sts	0x01D7, r24
	   }
}
    6922:	0f 90       	pop	r0
    6924:	0f 90       	pop	r0
    6926:	0f 90       	pop	r0
    6928:	cf 91       	pop	r28
    692a:	df 91       	pop	r29
    692c:	08 95       	ret

0000692e <UART_voidSendString_sync>:
void UART_voidSendString_sync(u8 arr[])
{
    692e:	df 93       	push	r29
    6930:	cf 93       	push	r28
    6932:	00 d0       	rcall	.+0      	; 0x6934 <UART_voidSendString_sync+0x6>
    6934:	0f 92       	push	r0
    6936:	cd b7       	in	r28, 0x3d	; 61
    6938:	de b7       	in	r29, 0x3e	; 62
    693a:	9b 83       	std	Y+3, r25	; 0x03
    693c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_itirator_variable =0;
    693e:	19 82       	std	Y+1, r1	; 0x01
    6940:	0e c0       	rjmp	.+28     	; 0x695e <UART_voidSendString_sync+0x30>
	while(arr[local_itirator_variable]!='\0')
	{
		UART_voidSendData_sync(arr[local_itirator_variable]);
    6942:	89 81       	ldd	r24, Y+1	; 0x01
    6944:	28 2f       	mov	r18, r24
    6946:	30 e0       	ldi	r19, 0x00	; 0
    6948:	8a 81       	ldd	r24, Y+2	; 0x02
    694a:	9b 81       	ldd	r25, Y+3	; 0x03
    694c:	fc 01       	movw	r30, r24
    694e:	e2 0f       	add	r30, r18
    6950:	f3 1f       	adc	r31, r19
    6952:	80 81       	ld	r24, Z
    6954:	0e 94 0f 34 	call	0x681e	; 0x681e <UART_voidSendData_sync>
		local_itirator_variable ++;
    6958:	89 81       	ldd	r24, Y+1	; 0x01
    695a:	8f 5f       	subi	r24, 0xFF	; 255
    695c:	89 83       	std	Y+1, r24	; 0x01
	   }
}
void UART_voidSendString_sync(u8 arr[])
{
	u8 local_itirator_variable =0;
	while(arr[local_itirator_variable]!='\0')
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	28 2f       	mov	r18, r24
    6962:	30 e0       	ldi	r19, 0x00	; 0
    6964:	8a 81       	ldd	r24, Y+2	; 0x02
    6966:	9b 81       	ldd	r25, Y+3	; 0x03
    6968:	fc 01       	movw	r30, r24
    696a:	e2 0f       	add	r30, r18
    696c:	f3 1f       	adc	r31, r19
    696e:	80 81       	ld	r24, Z
    6970:	88 23       	and	r24, r24
    6972:	39 f7       	brne	.-50     	; 0x6942 <UART_voidSendString_sync+0x14>
	{
		UART_voidSendData_sync(arr[local_itirator_variable]);
		local_itirator_variable ++;
	}
}
    6974:	0f 90       	pop	r0
    6976:	0f 90       	pop	r0
    6978:	0f 90       	pop	r0
    697a:	cf 91       	pop	r28
    697c:	df 91       	pop	r29
    697e:	08 95       	ret

00006980 <UART_SetCallBack_RX>:


void UART_SetCallBack_RX(void *funcptr(void))
{
    6980:	df 93       	push	r29
    6982:	cf 93       	push	r28
    6984:	00 d0       	rcall	.+0      	; 0x6986 <UART_SetCallBack_RX+0x6>
    6986:	cd b7       	in	r28, 0x3d	; 61
    6988:	de b7       	in	r29, 0x3e	; 62
    698a:	9a 83       	std	Y+2, r25	; 0x02
    698c:	89 83       	std	Y+1, r24	; 0x01
    GlobalPTFCTCcallback_rx = funcptr;
    698e:	89 81       	ldd	r24, Y+1	; 0x01
    6990:	9a 81       	ldd	r25, Y+2	; 0x02
    6992:	90 93 d6 01 	sts	0x01D6, r25
    6996:	80 93 d5 01 	sts	0x01D5, r24
}
    699a:	0f 90       	pop	r0
    699c:	0f 90       	pop	r0
    699e:	cf 91       	pop	r28
    69a0:	df 91       	pop	r29
    69a2:	08 95       	ret

000069a4 <UART_SetCallBack_TX>:
void UART_SetCallBack_TX(void *funcptr(void))
{
    69a4:	df 93       	push	r29
    69a6:	cf 93       	push	r28
    69a8:	00 d0       	rcall	.+0      	; 0x69aa <UART_SetCallBack_TX+0x6>
    69aa:	cd b7       	in	r28, 0x3d	; 61
    69ac:	de b7       	in	r29, 0x3e	; 62
    69ae:	9a 83       	std	Y+2, r25	; 0x02
    69b0:	89 83       	std	Y+1, r24	; 0x01
    GlobalPTFCTCcallback_tx = funcptr;
    69b2:	89 81       	ldd	r24, Y+1	; 0x01
    69b4:	9a 81       	ldd	r25, Y+2	; 0x02
    69b6:	90 93 d8 01 	sts	0x01D8, r25
    69ba:	80 93 d7 01 	sts	0x01D7, r24
}
    69be:	0f 90       	pop	r0
    69c0:	0f 90       	pop	r0
    69c2:	cf 91       	pop	r28
    69c4:	df 91       	pop	r29
    69c6:	08 95       	ret

000069c8 <UART_SetCallBack_EMPTY_REG>:
void UART_SetCallBack_EMPTY_REG(void *funcptr(void))
{
    69c8:	df 93       	push	r29
    69ca:	cf 93       	push	r28
    69cc:	00 d0       	rcall	.+0      	; 0x69ce <UART_SetCallBack_EMPTY_REG+0x6>
    69ce:	cd b7       	in	r28, 0x3d	; 61
    69d0:	de b7       	in	r29, 0x3e	; 62
    69d2:	9a 83       	std	Y+2, r25	; 0x02
    69d4:	89 83       	std	Y+1, r24	; 0x01
    GlobalPTFCTCcallback_Empty_Regester = funcptr;
    69d6:	89 81       	ldd	r24, Y+1	; 0x01
    69d8:	9a 81       	ldd	r25, Y+2	; 0x02
    69da:	90 93 da 01 	sts	0x01DA, r25
    69de:	80 93 d9 01 	sts	0x01D9, r24
}
    69e2:	0f 90       	pop	r0
    69e4:	0f 90       	pop	r0
    69e6:	cf 91       	pop	r28
    69e8:	df 91       	pop	r29
    69ea:	08 95       	ret

000069ec <WDT_voidEnable>:

#include "STD_TYPES.h"
#include "BIT_MATH.h"

void WDT_voidEnable(void)
{
    69ec:	df 93       	push	r29
    69ee:	cf 93       	push	r28
    69f0:	cd b7       	in	r28, 0x3d	; 61
    69f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDCTR,WDCTR_WDE);
    69f4:	a1 e4       	ldi	r26, 0x41	; 65
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	e1 e4       	ldi	r30, 0x41	; 65
    69fa:	f0 e0       	ldi	r31, 0x00	; 0
    69fc:	80 81       	ld	r24, Z
    69fe:	88 60       	ori	r24, 0x08	; 8
    6a00:	8c 93       	st	X, r24
}
    6a02:	cf 91       	pop	r28
    6a04:	df 91       	pop	r29
    6a06:	08 95       	ret

00006a08 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
    6a08:	df 93       	push	r29
    6a0a:	cf 93       	push	r28
    6a0c:	cd b7       	in	r28, 0x3d	; 61
    6a0e:	de b7       	in	r29, 0x3e	; 62

	WDCTR= 0b00011000;
    6a10:	e1 e4       	ldi	r30, 0x41	; 65
    6a12:	f0 e0       	ldi	r31, 0x00	; 0
    6a14:	88 e1       	ldi	r24, 0x18	; 24
    6a16:	80 83       	st	Z, r24
		WDCTR =0;
    6a18:	e1 e4       	ldi	r30, 0x41	; 65
    6a1a:	f0 e0       	ldi	r31, 0x00	; 0
    6a1c:	10 82       	st	Z, r1
}
    6a1e:	cf 91       	pop	r28
    6a20:	df 91       	pop	r29
    6a22:	08 95       	ret

00006a24 <WDT_voidSleepTIME>:
void WDT_voidSleepTIME(u8 time)
{
    6a24:	df 93       	push	r29
    6a26:	cf 93       	push	r28
    6a28:	0f 92       	push	r0
    6a2a:	cd b7       	in	r28, 0x3d	; 61
    6a2c:	de b7       	in	r29, 0x3e	; 62
    6a2e:	89 83       	std	Y+1, r24	; 0x01
	WDCTR &= 0b1111100;
    6a30:	a1 e4       	ldi	r26, 0x41	; 65
    6a32:	b0 e0       	ldi	r27, 0x00	; 0
    6a34:	e1 e4       	ldi	r30, 0x41	; 65
    6a36:	f0 e0       	ldi	r31, 0x00	; 0
    6a38:	80 81       	ld	r24, Z
    6a3a:	8c 77       	andi	r24, 0x7C	; 124
    6a3c:	8c 93       	st	X, r24
	WDCTR |= time;
    6a3e:	a1 e4       	ldi	r26, 0x41	; 65
    6a40:	b0 e0       	ldi	r27, 0x00	; 0
    6a42:	e1 e4       	ldi	r30, 0x41	; 65
    6a44:	f0 e0       	ldi	r31, 0x00	; 0
    6a46:	90 81       	ld	r25, Z
    6a48:	89 81       	ldd	r24, Y+1	; 0x01
    6a4a:	89 2b       	or	r24, r25
    6a4c:	8c 93       	st	X, r24
}
    6a4e:	0f 90       	pop	r0
    6a50:	cf 91       	pop	r28
    6a52:	df 91       	pop	r29
    6a54:	08 95       	ret

00006a56 <HKEY_voidKeybadIntiate>:
#include "DIO_interface.h"
#include "LCD_interfac.h"
#include <util/delay.h>

void HKEY_voidKeybadIntiate( void )
{
    6a56:	df 93       	push	r29
    6a58:	cf 93       	push	r28
    6a5a:	cd b7       	in	r28, 0x3d	; 61
    6a5c:	de b7       	in	r29, 0x3e	; 62
	/* Rows as input resistors */
	DIO_voidSetPinDirection( ROW1_PORT, ROW1_PIN, PIN_INPUT ); // input
    6a5e:	82 e0       	ldi	r24, 0x02	; 2
    6a60:	65 e0       	ldi	r22, 0x05	; 5
    6a62:	40 e0       	ldi	r20, 0x00	; 0
    6a64:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue( ROW1_PORT, ROW1_PIN, PIN_LOW );
    6a68:	82 e0       	ldi	r24, 0x02	; 2
    6a6a:	65 e0       	ldi	r22, 0x05	; 5
    6a6c:	40 e0       	ldi	r20, 0x00	; 0
    6a6e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection( ROW2_PORT, ROW2_PIN, PIN_INPUT ); // input
    6a72:	82 e0       	ldi	r24, 0x02	; 2
    6a74:	64 e0       	ldi	r22, 0x04	; 4
    6a76:	40 e0       	ldi	r20, 0x00	; 0
    6a78:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue( ROW2_PORT, ROW2_PIN, PIN_LOW );
    6a7c:	82 e0       	ldi	r24, 0x02	; 2
    6a7e:	64 e0       	ldi	r22, 0x04	; 4
    6a80:	40 e0       	ldi	r20, 0x00	; 0
    6a82:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection( ROW3_PORT, ROW3_PIN, PIN_INPUT ); // input
    6a86:	82 e0       	ldi	r24, 0x02	; 2
    6a88:	63 e0       	ldi	r22, 0x03	; 3
    6a8a:	40 e0       	ldi	r20, 0x00	; 0
    6a8c:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue( ROW3_PORT, ROW3_PIN, PIN_LOW );
    6a90:	82 e0       	ldi	r24, 0x02	; 2
    6a92:	63 e0       	ldi	r22, 0x03	; 3
    6a94:	40 e0       	ldi	r20, 0x00	; 0
    6a96:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection( ROW4_PORT, ROW4_PIN, PIN_INPUT ); // input
    6a9a:	82 e0       	ldi	r24, 0x02	; 2
    6a9c:	62 e0       	ldi	r22, 0x02	; 2
    6a9e:	40 e0       	ldi	r20, 0x00	; 0
    6aa0:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue( ROW4_PORT, ROW4_PIN, PIN_LOW );
    6aa4:	82 e0       	ldi	r24, 0x02	; 2
    6aa6:	62 e0       	ldi	r22, 0x02	; 2
    6aa8:	40 e0       	ldi	r20, 0x00	; 0
    6aaa:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>

	/* Columns as output */
	DIO_voidSetPinDirection( COL1_PORT, COL1_PIN, PIN_OUTPUT );
    6aae:	83 e0       	ldi	r24, 0x03	; 3
    6ab0:	67 e0       	ldi	r22, 0x07	; 7
    6ab2:	41 e0       	ldi	r20, 0x01	; 1
    6ab4:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( COL2_PORT, COL2_PIN, PIN_OUTPUT );
    6ab8:	83 e0       	ldi	r24, 0x03	; 3
    6aba:	66 e0       	ldi	r22, 0x06	; 6
    6abc:	41 e0       	ldi	r20, 0x01	; 1
    6abe:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( COL3_PORT, COL3_PIN, PIN_OUTPUT );
    6ac2:	83 e0       	ldi	r24, 0x03	; 3
    6ac4:	65 e0       	ldi	r22, 0x05	; 5
    6ac6:	41 e0       	ldi	r20, 0x01	; 1
    6ac8:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection( COL4_PORT, COL4_PIN, PIN_OUTPUT );
    6acc:	83 e0       	ldi	r24, 0x03	; 3
    6ace:	63 e0       	ldi	r22, 0x03	; 3
    6ad0:	41 e0       	ldi	r20, 0x01	; 1
    6ad2:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
}
    6ad6:	cf 91       	pop	r28
    6ad8:	df 91       	pop	r29
    6ada:	08 95       	ret

00006adc <kpad_u8GetBtnStatus>:

u8 kpad_u8GetBtnStatus( u8 btn )
{
    6adc:	df 93       	push	r29
    6ade:	cf 93       	push	r28
    6ae0:	cd b7       	in	r28, 0x3d	; 61
    6ae2:	de b7       	in	r29, 0x3e	; 62
    6ae4:	6b 97       	sbiw	r28, 0x1b	; 27
    6ae6:	0f b6       	in	r0, 0x3f	; 63
    6ae8:	f8 94       	cli
    6aea:	de bf       	out	0x3e, r29	; 62
    6aec:	0f be       	out	0x3f, r0	; 63
    6aee:	cd bf       	out	0x3d, r28	; 61
    6af0:	8b 8f       	std	Y+27, r24	; 0x1b
	// map row and column:
	u8 row = btn / 4;
    6af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6af4:	86 95       	lsr	r24
    6af6:	86 95       	lsr	r24
    6af8:	8a 8b       	std	Y+18, r24	; 0x12
	u8 col = btn % 4;
    6afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6afc:	83 70       	andi	r24, 0x03	; 3
    6afe:	89 8b       	std	Y+17, r24	; 0x11

	u8 realRow[] = { ROW1_PIN, ROW2_PIN, ROW3_PIN, ROW4_PIN };
    6b00:	85 e0       	ldi	r24, 0x05	; 5
    6b02:	8b 8b       	std	Y+19, r24	; 0x13
    6b04:	84 e0       	ldi	r24, 0x04	; 4
    6b06:	8c 8b       	std	Y+20, r24	; 0x14
    6b08:	83 e0       	ldi	r24, 0x03	; 3
    6b0a:	8d 8b       	std	Y+21, r24	; 0x15
    6b0c:	82 e0       	ldi	r24, 0x02	; 2
    6b0e:	8e 8b       	std	Y+22, r24	; 0x16
	u8 realCol[] = { COL1_PIN, COL2_PIN, COL3_PIN, COL4_PIN };
    6b10:	87 e0       	ldi	r24, 0x07	; 7
    6b12:	8f 8b       	std	Y+23, r24	; 0x17
    6b14:	86 e0       	ldi	r24, 0x06	; 6
    6b16:	88 8f       	std	Y+24, r24	; 0x18
    6b18:	85 e0       	ldi	r24, 0x05	; 5
    6b1a:	89 8f       	std	Y+25, r24	; 0x19
    6b1c:	83 e0       	ldi	r24, 0x03	; 3
    6b1e:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 value = UNPRESSED, status = UNPRESSED;
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	88 8b       	std	Y+16, r24	; 0x10
    6b24:	81 e0       	ldi	r24, 0x01	; 1
    6b26:	8f 87       	std	Y+15, r24	; 0x0f

	// all columns HIGH
	DIO_voidSetPinValue( COL1_PORT, COL1_PIN, PIN_HIGH );
    6b28:	83 e0       	ldi	r24, 0x03	; 3
    6b2a:	67 e0       	ldi	r22, 0x07	; 7
    6b2c:	41 e0       	ldi	r20, 0x01	; 1
    6b2e:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( COL2_PORT, COL2_PIN, PIN_HIGH );
    6b32:	83 e0       	ldi	r24, 0x03	; 3
    6b34:	66 e0       	ldi	r22, 0x06	; 6
    6b36:	41 e0       	ldi	r20, 0x01	; 1
    6b38:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( COL3_PORT, COL3_PIN, PIN_HIGH );
    6b3c:	83 e0       	ldi	r24, 0x03	; 3
    6b3e:	65 e0       	ldi	r22, 0x05	; 5
    6b40:	41 e0       	ldi	r20, 0x01	; 1
    6b42:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( COL4_PORT, COL4_PIN, PIN_HIGH );
    6b46:	83 e0       	ldi	r24, 0x03	; 3
    6b48:	63 e0       	ldi	r22, 0x03	; 3
    6b4a:	41 e0       	ldi	r20, 0x01	; 1
    6b4c:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>

	// button column LOW
	DIO_voidSetPinValue( COL1_PORT, realCol[col], PIN_LOW );
    6b50:	89 89       	ldd	r24, Y+17	; 0x11
    6b52:	28 2f       	mov	r18, r24
    6b54:	30 e0       	ldi	r19, 0x00	; 0
    6b56:	ce 01       	movw	r24, r28
    6b58:	47 96       	adiw	r24, 0x17	; 23
    6b5a:	fc 01       	movw	r30, r24
    6b5c:	e2 0f       	add	r30, r18
    6b5e:	f3 1f       	adc	r31, r19
    6b60:	90 81       	ld	r25, Z
    6b62:	83 e0       	ldi	r24, 0x03	; 3
    6b64:	69 2f       	mov	r22, r25
    6b66:	40 e0       	ldi	r20, 0x00	; 0
    6b68:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>

	// button row check:
	value = DIO_u8GetPinValue( ROW1_PORT, realRow[row] );
    6b6c:	8a 89       	ldd	r24, Y+18	; 0x12
    6b6e:	28 2f       	mov	r18, r24
    6b70:	30 e0       	ldi	r19, 0x00	; 0
    6b72:	ce 01       	movw	r24, r28
    6b74:	43 96       	adiw	r24, 0x13	; 19
    6b76:	fc 01       	movw	r30, r24
    6b78:	e2 0f       	add	r30, r18
    6b7a:	f3 1f       	adc	r31, r19
    6b7c:	90 81       	ld	r25, Z
    6b7e:	82 e0       	ldi	r24, 0x02	; 2
    6b80:	69 2f       	mov	r22, r25
    6b82:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    6b86:	88 8b       	std	Y+16, r24	; 0x10
	if( value == PRESSED )
    6b88:	88 89       	ldd	r24, Y+16	; 0x10
    6b8a:	88 23       	and	r24, r24
    6b8c:	09 f0       	breq	.+2      	; 0x6b90 <kpad_u8GetBtnStatus+0xb4>
    6b8e:	84 c0       	rjmp	.+264    	; 0x6c98 <kpad_u8GetBtnStatus+0x1bc>
    6b90:	80 e0       	ldi	r24, 0x00	; 0
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	a0 ea       	ldi	r26, 0xA0	; 160
    6b96:	b1 e4       	ldi	r27, 0x41	; 65
    6b98:	8b 87       	std	Y+11, r24	; 0x0b
    6b9a:	9c 87       	std	Y+12, r25	; 0x0c
    6b9c:	ad 87       	std	Y+13, r26	; 0x0d
    6b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ba8:	20 e0       	ldi	r18, 0x00	; 0
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	4a e7       	ldi	r20, 0x7A	; 122
    6bae:	55 e4       	ldi	r21, 0x45	; 69
    6bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bb4:	dc 01       	movw	r26, r24
    6bb6:	cb 01       	movw	r24, r22
    6bb8:	8f 83       	std	Y+7, r24	; 0x07
    6bba:	98 87       	std	Y+8, r25	; 0x08
    6bbc:	a9 87       	std	Y+9, r26	; 0x09
    6bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    6bc2:	78 85       	ldd	r23, Y+8	; 0x08
    6bc4:	89 85       	ldd	r24, Y+9	; 0x09
    6bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc8:	20 e0       	ldi	r18, 0x00	; 0
    6bca:	30 e0       	ldi	r19, 0x00	; 0
    6bcc:	40 e8       	ldi	r20, 0x80	; 128
    6bce:	5f e3       	ldi	r21, 0x3F	; 63
    6bd0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6bd4:	88 23       	and	r24, r24
    6bd6:	2c f4       	brge	.+10     	; 0x6be2 <kpad_u8GetBtnStatus+0x106>
		__ticks = 1;
    6bd8:	81 e0       	ldi	r24, 0x01	; 1
    6bda:	90 e0       	ldi	r25, 0x00	; 0
    6bdc:	9e 83       	std	Y+6, r25	; 0x06
    6bde:	8d 83       	std	Y+5, r24	; 0x05
    6be0:	3f c0       	rjmp	.+126    	; 0x6c60 <kpad_u8GetBtnStatus+0x184>
	else if (__tmp > 65535)
    6be2:	6f 81       	ldd	r22, Y+7	; 0x07
    6be4:	78 85       	ldd	r23, Y+8	; 0x08
    6be6:	89 85       	ldd	r24, Y+9	; 0x09
    6be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bea:	20 e0       	ldi	r18, 0x00	; 0
    6bec:	3f ef       	ldi	r19, 0xFF	; 255
    6bee:	4f e7       	ldi	r20, 0x7F	; 127
    6bf0:	57 e4       	ldi	r21, 0x47	; 71
    6bf2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6bf6:	18 16       	cp	r1, r24
    6bf8:	4c f5       	brge	.+82     	; 0x6c4c <kpad_u8GetBtnStatus+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c02:	20 e0       	ldi	r18, 0x00	; 0
    6c04:	30 e0       	ldi	r19, 0x00	; 0
    6c06:	40 e2       	ldi	r20, 0x20	; 32
    6c08:	51 e4       	ldi	r21, 0x41	; 65
    6c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c0e:	dc 01       	movw	r26, r24
    6c10:	cb 01       	movw	r24, r22
    6c12:	bc 01       	movw	r22, r24
    6c14:	cd 01       	movw	r24, r26
    6c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c1a:	dc 01       	movw	r26, r24
    6c1c:	cb 01       	movw	r24, r22
    6c1e:	9e 83       	std	Y+6, r25	; 0x06
    6c20:	8d 83       	std	Y+5, r24	; 0x05
    6c22:	0f c0       	rjmp	.+30     	; 0x6c42 <kpad_u8GetBtnStatus+0x166>
    6c24:	80 e9       	ldi	r24, 0x90	; 144
    6c26:	91 e0       	ldi	r25, 0x01	; 1
    6c28:	9c 83       	std	Y+4, r25	; 0x04
    6c2a:	8b 83       	std	Y+3, r24	; 0x03
    6c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    6c30:	01 97       	sbiw	r24, 0x01	; 1
    6c32:	f1 f7       	brne	.-4      	; 0x6c30 <kpad_u8GetBtnStatus+0x154>
    6c34:	9c 83       	std	Y+4, r25	; 0x04
    6c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c38:	8d 81       	ldd	r24, Y+5	; 0x05
    6c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c3c:	01 97       	sbiw	r24, 0x01	; 1
    6c3e:	9e 83       	std	Y+6, r25	; 0x06
    6c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c42:	8d 81       	ldd	r24, Y+5	; 0x05
    6c44:	9e 81       	ldd	r25, Y+6	; 0x06
    6c46:	00 97       	sbiw	r24, 0x00	; 0
    6c48:	69 f7       	brne	.-38     	; 0x6c24 <kpad_u8GetBtnStatus+0x148>
    6c4a:	14 c0       	rjmp	.+40     	; 0x6c74 <kpad_u8GetBtnStatus+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    6c4e:	78 85       	ldd	r23, Y+8	; 0x08
    6c50:	89 85       	ldd	r24, Y+9	; 0x09
    6c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c58:	dc 01       	movw	r26, r24
    6c5a:	cb 01       	movw	r24, r22
    6c5c:	9e 83       	std	Y+6, r25	; 0x06
    6c5e:	8d 83       	std	Y+5, r24	; 0x05
    6c60:	8d 81       	ldd	r24, Y+5	; 0x05
    6c62:	9e 81       	ldd	r25, Y+6	; 0x06
    6c64:	9a 83       	std	Y+2, r25	; 0x02
    6c66:	89 83       	std	Y+1, r24	; 0x01
    6c68:	89 81       	ldd	r24, Y+1	; 0x01
    6c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c6c:	01 97       	sbiw	r24, 0x01	; 1
    6c6e:	f1 f7       	brne	.-4      	; 0x6c6c <kpad_u8GetBtnStatus+0x190>
    6c70:	9a 83       	std	Y+2, r25	; 0x02
    6c72:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms( 20 );	// for bouncing
		// read again:
		value = DIO_u8GetPinValue( ROW1_PORT, realRow[row] );
    6c74:	8a 89       	ldd	r24, Y+18	; 0x12
    6c76:	28 2f       	mov	r18, r24
    6c78:	30 e0       	ldi	r19, 0x00	; 0
    6c7a:	ce 01       	movw	r24, r28
    6c7c:	43 96       	adiw	r24, 0x13	; 19
    6c7e:	fc 01       	movw	r30, r24
    6c80:	e2 0f       	add	r30, r18
    6c82:	f3 1f       	adc	r31, r19
    6c84:	90 81       	ld	r25, Z
    6c86:	82 e0       	ldi	r24, 0x02	; 2
    6c88:	69 2f       	mov	r22, r25
    6c8a:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    6c8e:	88 8b       	std	Y+16, r24	; 0x10
		if( value == PRESSED )
    6c90:	88 89       	ldd	r24, Y+16	; 0x10
    6c92:	88 23       	and	r24, r24
    6c94:	09 f4       	brne	.+2      	; 0x6c98 <kpad_u8GetBtnStatus+0x1bc>
		{ status = PRESSED; }
    6c96:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return status;
    6c98:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    6c9a:	6b 96       	adiw	r28, 0x1b	; 27
    6c9c:	0f b6       	in	r0, 0x3f	; 63
    6c9e:	f8 94       	cli
    6ca0:	de bf       	out	0x3e, r29	; 62
    6ca2:	0f be       	out	0x3f, r0	; 63
    6ca4:	cd bf       	out	0x3d, r28	; 61
    6ca6:	cf 91       	pop	r28
    6ca8:	df 91       	pop	r29
    6caa:	08 95       	ret

00006cac <kpad_u8GetBtnSym>:

// returns symbol (ASCII) of a given button
u8 kpad_u8GetBtnSym( u8 btn )
{
    6cac:	df 93       	push	r29
    6cae:	cf 93       	push	r28
    6cb0:	00 d0       	rcall	.+0      	; 0x6cb2 <kpad_u8GetBtnSym+0x6>
    6cb2:	00 d0       	rcall	.+0      	; 0x6cb4 <kpad_u8GetBtnSym+0x8>
    6cb4:	cd b7       	in	r28, 0x3d	; 61
    6cb6:	de b7       	in	r29, 0x3e	; 62
    6cb8:	89 83       	std	Y+1, r24	; 0x01
	switch( btn )
    6cba:	89 81       	ldd	r24, Y+1	; 0x01
    6cbc:	28 2f       	mov	r18, r24
    6cbe:	30 e0       	ldi	r19, 0x00	; 0
    6cc0:	3c 83       	std	Y+4, r19	; 0x04
    6cc2:	2b 83       	std	Y+3, r18	; 0x03
    6cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    6cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    6cc8:	87 30       	cpi	r24, 0x07	; 7
    6cca:	91 05       	cpc	r25, r1
    6ccc:	09 f4       	brne	.+2      	; 0x6cd0 <kpad_u8GetBtnSym+0x24>
    6cce:	84 c0       	rjmp	.+264    	; 0x6dd8 <kpad_u8GetBtnSym+0x12c>
    6cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    6cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    6cd4:	28 30       	cpi	r18, 0x08	; 8
    6cd6:	31 05       	cpc	r19, r1
    6cd8:	54 f5       	brge	.+84     	; 0x6d2e <kpad_u8GetBtnSym+0x82>
    6cda:	8b 81       	ldd	r24, Y+3	; 0x03
    6cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    6cde:	83 30       	cpi	r24, 0x03	; 3
    6ce0:	91 05       	cpc	r25, r1
    6ce2:	09 f4       	brne	.+2      	; 0x6ce6 <kpad_u8GetBtnSym+0x3a>
    6ce4:	7c c0       	rjmp	.+248    	; 0x6dde <kpad_u8GetBtnSym+0x132>
    6ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    6ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    6cea:	24 30       	cpi	r18, 0x04	; 4
    6cec:	31 05       	cpc	r19, r1
    6cee:	94 f4       	brge	.+36     	; 0x6d14 <kpad_u8GetBtnSym+0x68>
    6cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    6cf4:	81 30       	cpi	r24, 0x01	; 1
    6cf6:	91 05       	cpc	r25, r1
    6cf8:	09 f4       	brne	.+2      	; 0x6cfc <kpad_u8GetBtnSym+0x50>
    6cfa:	5c c0       	rjmp	.+184    	; 0x6db4 <kpad_u8GetBtnSym+0x108>
    6cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    6cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    6d00:	22 30       	cpi	r18, 0x02	; 2
    6d02:	31 05       	cpc	r19, r1
    6d04:	0c f0       	brlt	.+2      	; 0x6d08 <kpad_u8GetBtnSym+0x5c>
    6d06:	59 c0       	rjmp	.+178    	; 0x6dba <kpad_u8GetBtnSym+0x10e>
    6d08:	8b 81       	ldd	r24, Y+3	; 0x03
    6d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    6d0c:	00 97       	sbiw	r24, 0x00	; 0
    6d0e:	09 f4       	brne	.+2      	; 0x6d12 <kpad_u8GetBtnSym+0x66>
    6d10:	4e c0       	rjmp	.+156    	; 0x6dae <kpad_u8GetBtnSym+0x102>
    6d12:	68 c0       	rjmp	.+208    	; 0x6de4 <kpad_u8GetBtnSym+0x138>
    6d14:	2b 81       	ldd	r18, Y+3	; 0x03
    6d16:	3c 81       	ldd	r19, Y+4	; 0x04
    6d18:	25 30       	cpi	r18, 0x05	; 5
    6d1a:	31 05       	cpc	r19, r1
    6d1c:	09 f4       	brne	.+2      	; 0x6d20 <kpad_u8GetBtnSym+0x74>
    6d1e:	41 c0       	rjmp	.+130    	; 0x6da2 <kpad_u8GetBtnSym+0xf6>
    6d20:	8b 81       	ldd	r24, Y+3	; 0x03
    6d22:	9c 81       	ldd	r25, Y+4	; 0x04
    6d24:	86 30       	cpi	r24, 0x06	; 6
    6d26:	91 05       	cpc	r25, r1
    6d28:	0c f0       	brlt	.+2      	; 0x6d2c <kpad_u8GetBtnSym+0x80>
    6d2a:	3e c0       	rjmp	.+124    	; 0x6da8 <kpad_u8GetBtnSym+0xfc>
    6d2c:	37 c0       	rjmp	.+110    	; 0x6d9c <kpad_u8GetBtnSym+0xf0>
    6d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    6d30:	3c 81       	ldd	r19, Y+4	; 0x04
    6d32:	2b 30       	cpi	r18, 0x0B	; 11
    6d34:	31 05       	cpc	r19, r1
    6d36:	09 f4       	brne	.+2      	; 0x6d3a <kpad_u8GetBtnSym+0x8e>
    6d38:	4c c0       	rjmp	.+152    	; 0x6dd2 <kpad_u8GetBtnSym+0x126>
    6d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d3e:	8c 30       	cpi	r24, 0x0C	; 12
    6d40:	91 05       	cpc	r25, r1
    6d42:	5c f4       	brge	.+22     	; 0x6d5a <kpad_u8GetBtnSym+0xae>
    6d44:	2b 81       	ldd	r18, Y+3	; 0x03
    6d46:	3c 81       	ldd	r19, Y+4	; 0x04
    6d48:	29 30       	cpi	r18, 0x09	; 9
    6d4a:	31 05       	cpc	r19, r1
    6d4c:	09 f1       	breq	.+66     	; 0x6d90 <kpad_u8GetBtnSym+0xe4>
    6d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d50:	9c 81       	ldd	r25, Y+4	; 0x04
    6d52:	8a 30       	cpi	r24, 0x0A	; 10
    6d54:	91 05       	cpc	r25, r1
    6d56:	fc f4       	brge	.+62     	; 0x6d96 <kpad_u8GetBtnSym+0xea>
    6d58:	18 c0       	rjmp	.+48     	; 0x6d8a <kpad_u8GetBtnSym+0xde>
    6d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    6d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    6d5e:	2d 30       	cpi	r18, 0x0D	; 13
    6d60:	31 05       	cpc	r19, r1
    6d62:	81 f0       	breq	.+32     	; 0x6d84 <kpad_u8GetBtnSym+0xd8>
    6d64:	8b 81       	ldd	r24, Y+3	; 0x03
    6d66:	9c 81       	ldd	r25, Y+4	; 0x04
    6d68:	8d 30       	cpi	r24, 0x0D	; 13
    6d6a:	91 05       	cpc	r25, r1
    6d6c:	64 f1       	brlt	.+88     	; 0x6dc6 <kpad_u8GetBtnSym+0x11a>
    6d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    6d70:	3c 81       	ldd	r19, Y+4	; 0x04
    6d72:	2e 30       	cpi	r18, 0x0E	; 14
    6d74:	31 05       	cpc	r19, r1
    6d76:	21 f1       	breq	.+72     	; 0x6dc0 <kpad_u8GetBtnSym+0x114>
    6d78:	8b 81       	ldd	r24, Y+3	; 0x03
    6d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    6d7c:	8f 30       	cpi	r24, 0x0F	; 15
    6d7e:	91 05       	cpc	r25, r1
    6d80:	29 f1       	breq	.+74     	; 0x6dcc <kpad_u8GetBtnSym+0x120>
    6d82:	30 c0       	rjmp	.+96     	; 0x6de4 <kpad_u8GetBtnSym+0x138>
	{
	case BTN0:
		return '0';
    6d84:	90 e3       	ldi	r25, 0x30	; 48
    6d86:	9a 83       	std	Y+2, r25	; 0x02
    6d88:	2e c0       	rjmp	.+92     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN1:
		return '1';
    6d8a:	21 e3       	ldi	r18, 0x31	; 49
    6d8c:	2a 83       	std	Y+2, r18	; 0x02
    6d8e:	2b c0       	rjmp	.+86     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN2:
		return '2';
    6d90:	32 e3       	ldi	r19, 0x32	; 50
    6d92:	3a 83       	std	Y+2, r19	; 0x02
    6d94:	28 c0       	rjmp	.+80     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN3:
		return '3';
    6d96:	83 e3       	ldi	r24, 0x33	; 51
    6d98:	8a 83       	std	Y+2, r24	; 0x02
    6d9a:	25 c0       	rjmp	.+74     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN4:
		return '4';
    6d9c:	94 e3       	ldi	r25, 0x34	; 52
    6d9e:	9a 83       	std	Y+2, r25	; 0x02
    6da0:	22 c0       	rjmp	.+68     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN5:
		return '5';
    6da2:	25 e3       	ldi	r18, 0x35	; 53
    6da4:	2a 83       	std	Y+2, r18	; 0x02
    6da6:	1f c0       	rjmp	.+62     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN6:
		return '6';
    6da8:	36 e3       	ldi	r19, 0x36	; 54
    6daa:	3a 83       	std	Y+2, r19	; 0x02
    6dac:	1c c0       	rjmp	.+56     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN7:
		return '7';
    6dae:	87 e3       	ldi	r24, 0x37	; 55
    6db0:	8a 83       	std	Y+2, r24	; 0x02
    6db2:	19 c0       	rjmp	.+50     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN8:
		return '8';
    6db4:	98 e3       	ldi	r25, 0x38	; 56
    6db6:	9a 83       	std	Y+2, r25	; 0x02
    6db8:	16 c0       	rjmp	.+44     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN9:
		return '9';
    6dba:	29 e3       	ldi	r18, 0x39	; 57
    6dbc:	2a 83       	std	Y+2, r18	; 0x02
    6dbe:	13 c0       	rjmp	.+38     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_EQU:
		return '=';
    6dc0:	3d e3       	ldi	r19, 0x3D	; 61
    6dc2:	3a 83       	std	Y+2, r19	; 0x02
    6dc4:	10 c0       	rjmp	.+32     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_CLR:
		return 'c';
    6dc6:	83 e6       	ldi	r24, 0x63	; 99
    6dc8:	8a 83       	std	Y+2, r24	; 0x02
    6dca:	0d c0       	rjmp	.+26     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_PLS:
		return '+';
    6dcc:	9b e2       	ldi	r25, 0x2B	; 43
    6dce:	9a 83       	std	Y+2, r25	; 0x02
    6dd0:	0a c0       	rjmp	.+20     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_MIN:
		return '-';
    6dd2:	2d e2       	ldi	r18, 0x2D	; 45
    6dd4:	2a 83       	std	Y+2, r18	; 0x02
    6dd6:	07 c0       	rjmp	.+14     	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_MUL:
		return '*';
    6dd8:	3a e2       	ldi	r19, 0x2A	; 42
    6dda:	3a 83       	std	Y+2, r19	; 0x02
    6ddc:	04 c0       	rjmp	.+8      	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	case BTN_DIV:
		return '/';
    6dde:	8f e2       	ldi	r24, 0x2F	; 47
    6de0:	8a 83       	std	Y+2, r24	; 0x02
    6de2:	01 c0       	rjmp	.+2      	; 0x6de6 <kpad_u8GetBtnSym+0x13a>
		break;
	}
	return 0;
    6de4:	1a 82       	std	Y+2, r1	; 0x02
    6de6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6de8:	0f 90       	pop	r0
    6dea:	0f 90       	pop	r0
    6dec:	0f 90       	pop	r0
    6dee:	0f 90       	pop	r0
    6df0:	cf 91       	pop	r28
    6df2:	df 91       	pop	r29
    6df4:	08 95       	ret

00006df6 <main>:
u8 j=1;

u8 customChar[] = {0x04,0x0A,0x04,0x04,0x15,0x04,0x0A,0x0A};	// Player arr
u8 customChar_2[] = {0x00,0x00,0x0E,0x11,0x11,0x11,0x0E,0x00};  // Ball arr
int main( void )
{
    6df6:	df 93       	push	r29
    6df8:	cf 93       	push	r28
    6dfa:	cd b7       	in	r28, 0x3d	; 61
    6dfc:	de b7       	in	r29, 0x3e	; 62
    6dfe:	60 97       	sbiw	r28, 0x10	; 16
    6e00:	0f b6       	in	r0, 0x3f	; 63
    6e02:	f8 94       	cli
    6e04:	de bf       	out	0x3e, r29	; 62
    6e06:	0f be       	out	0x3f, r0	; 63
    6e08:	cd bf       	out	0x3d, r28	; 61
	u8 Player_1 ;
	u8 Player_2 ;


	Init_Buttons();
    6e0a:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <Init_Buttons>
	HLCD_voidLcdIntiate();
    6e0e:	0e 94 07 13 	call	0x260e	; 0x260e <HLCD_voidLcdIntiate>

	HLCD_voidLcdDraw(customChar, 0, Player1, 0);  	// player_1
    6e12:	20 91 75 01 	lds	r18, 0x0175
    6e16:	89 e7       	ldi	r24, 0x79	; 121
    6e18:	91 e0       	ldi	r25, 0x01	; 1
    6e1a:	60 e0       	ldi	r22, 0x00	; 0
    6e1c:	42 2f       	mov	r20, r18
    6e1e:	20 e0       	ldi	r18, 0x00	; 0
    6e20:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>

	HLCD_voidLcdDraw(customChar, 0, Player2, 19); 	// player_2
    6e24:	20 91 76 01 	lds	r18, 0x0176
    6e28:	89 e7       	ldi	r24, 0x79	; 121
    6e2a:	91 e0       	ldi	r25, 0x01	; 1
    6e2c:	60 e0       	ldi	r22, 0x00	; 0
    6e2e:	42 2f       	mov	r20, r18
    6e30:	23 e1       	ldi	r18, 0x13	; 19
    6e32:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>

	HLCD_voidLcdWriteString("P1:0", 4, 0);		// score player_1
    6e36:	80 e6       	ldi	r24, 0x60	; 96
    6e38:	90 e0       	ldi	r25, 0x00	; 0
    6e3a:	64 e0       	ldi	r22, 0x04	; 4
    6e3c:	40 e0       	ldi	r20, 0x00	; 0
    6e3e:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>
	HLCD_voidLcdWriteString("P2:0", 4, 16);		// score player_2
    6e42:	85 e6       	ldi	r24, 0x65	; 101
    6e44:	90 e0       	ldi	r25, 0x00	; 0
    6e46:	64 e0       	ldi	r22, 0x04	; 4
    6e48:	40 e1       	ldi	r20, 0x10	; 16
    6e4a:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>
	while( 1 )
	{
		HLCD_voidLcdDraw(customChar, 0, Player1, 0);  	// player_1
    6e4e:	20 91 75 01 	lds	r18, 0x0175
    6e52:	89 e7       	ldi	r24, 0x79	; 121
    6e54:	91 e0       	ldi	r25, 0x01	; 1
    6e56:	60 e0       	ldi	r22, 0x00	; 0
    6e58:	42 2f       	mov	r20, r18
    6e5a:	20 e0       	ldi	r18, 0x00	; 0
    6e5c:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>

		HLCD_voidLcdDraw(customChar, 0, Player2, 19); 	// player_2
    6e60:	20 91 76 01 	lds	r18, 0x0176
    6e64:	89 e7       	ldi	r24, 0x79	; 121
    6e66:	91 e0       	ldi	r25, 0x01	; 1
    6e68:	60 e0       	ldi	r22, 0x00	; 0
    6e6a:	42 2f       	mov	r20, r18
    6e6c:	23 e1       	ldi	r18, 0x13	; 19
    6e6e:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>

		Player_1 = Player_One();
    6e72:	0e 94 03 39 	call	0x7206	; 0x7206 <Player_One>
    6e76:	88 8b       	std	Y+16, r24	; 0x10
		Player_2 = Player_Two();
    6e78:	0e 94 0c 3a 	call	0x7418	; 0x7418 <Player_Two>
    6e7c:	8f 87       	std	Y+15, r24	; 0x0f

		if (Flag)
    6e7e:	80 91 74 01 	lds	r24, 0x0174
    6e82:	88 23       	and	r24, r24
    6e84:	09 f4       	brne	.+2      	; 0x6e88 <main+0x92>
    6e86:	85 c0       	rjmp	.+266    	; 0x6f92 <main+0x19c>
		{
			if(Player_1==L_DOWN)
    6e88:	88 89       	ldd	r24, Y+16	; 0x10
    6e8a:	81 30       	cpi	r24, 0x01	; 1
    6e8c:	69 f4       	brne	.+26     	; 0x6ea8 <main+0xb2>
			{
				j+=1;
    6e8e:	80 91 78 01 	lds	r24, 0x0178
    6e92:	8f 5f       	subi	r24, 0xFF	; 255
    6e94:	80 93 78 01 	sts	0x0178, r24
				if(j>=3)
    6e98:	80 91 78 01 	lds	r24, 0x0178
    6e9c:	83 30       	cpi	r24, 0x03	; 3
    6e9e:	98 f0       	brcs	.+38     	; 0x6ec6 <main+0xd0>
				{
					j=3;
    6ea0:	83 e0       	ldi	r24, 0x03	; 3
    6ea2:	80 93 78 01 	sts	0x0178, r24
    6ea6:	0f c0       	rjmp	.+30     	; 0x6ec6 <main+0xd0>
				}
				else{}
			}
			else if(Player_1==L_UP)
    6ea8:	88 89       	ldd	r24, Y+16	; 0x10
    6eaa:	88 23       	and	r24, r24
    6eac:	61 f4       	brne	.+24     	; 0x6ec6 <main+0xd0>
			{
				j -= 1;
    6eae:	80 91 78 01 	lds	r24, 0x0178
    6eb2:	81 50       	subi	r24, 0x01	; 1
    6eb4:	80 93 78 01 	sts	0x0178, r24
				if(j<=1)
    6eb8:	80 91 78 01 	lds	r24, 0x0178
    6ebc:	82 30       	cpi	r24, 0x02	; 2
    6ebe:	18 f4       	brcc	.+6      	; 0x6ec6 <main+0xd0>
				{
					j=1;
    6ec0:	81 e0       	ldi	r24, 0x01	; 1
    6ec2:	80 93 78 01 	sts	0x0178, r24
				}
				else{}
			}
			else{}
			if(Player_2==R_DOWN)
    6ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ec8:	83 30       	cpi	r24, 0x03	; 3
    6eca:	f1 f4       	brne	.+60     	; 0x6f08 <main+0x112>
			{

				HLCD_voidLcdWriteString(" ", Player2, 19);
    6ecc:	20 91 76 01 	lds	r18, 0x0176
    6ed0:	8a e6       	ldi	r24, 0x6A	; 106
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	62 2f       	mov	r22, r18
    6ed6:	43 e1       	ldi	r20, 0x13	; 19
    6ed8:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>

				Player2 += 1;
    6edc:	80 91 76 01 	lds	r24, 0x0176
    6ee0:	8f 5f       	subi	r24, 0xFF	; 255
    6ee2:	80 93 76 01 	sts	0x0176, r24
				if(Player2>=3)
    6ee6:	80 91 76 01 	lds	r24, 0x0176
    6eea:	83 30       	cpi	r24, 0x03	; 3
    6eec:	18 f0       	brcs	.+6      	; 0x6ef4 <main+0xfe>
				{
					Player2=3;
    6eee:	83 e0       	ldi	r24, 0x03	; 3
    6ef0:	80 93 76 01 	sts	0x0176, r24
				}
				else{}
				HLCD_voidLcdDraw(customChar, 0, Player2, 19); 	// player_2
    6ef4:	20 91 76 01 	lds	r18, 0x0176
    6ef8:	89 e7       	ldi	r24, 0x79	; 121
    6efa:	91 e0       	ldi	r25, 0x01	; 1
    6efc:	60 e0       	ldi	r22, 0x00	; 0
    6efe:	42 2f       	mov	r20, r18
    6f00:	23 e1       	ldi	r18, 0x13	; 19
    6f02:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>
    6f06:	20 c0       	rjmp	.+64     	; 0x6f48 <main+0x152>
			}
			else if(Player_2==R_UP)
    6f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f0a:	82 30       	cpi	r24, 0x02	; 2
    6f0c:	e9 f4       	brne	.+58     	; 0x6f48 <main+0x152>
			{

				HLCD_voidLcdWriteString(" ", Player2, 19);
    6f0e:	20 91 76 01 	lds	r18, 0x0176
    6f12:	8a e6       	ldi	r24, 0x6A	; 106
    6f14:	90 e0       	ldi	r25, 0x00	; 0
    6f16:	62 2f       	mov	r22, r18
    6f18:	43 e1       	ldi	r20, 0x13	; 19
    6f1a:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>

				Player2-=1;
    6f1e:	80 91 76 01 	lds	r24, 0x0176
    6f22:	81 50       	subi	r24, 0x01	; 1
    6f24:	80 93 76 01 	sts	0x0176, r24
				if(Player2<=1)
    6f28:	80 91 76 01 	lds	r24, 0x0176
    6f2c:	82 30       	cpi	r24, 0x02	; 2
    6f2e:	18 f4       	brcc	.+6      	; 0x6f36 <main+0x140>
				{
					Player2=1;
    6f30:	81 e0       	ldi	r24, 0x01	; 1
    6f32:	80 93 76 01 	sts	0x0176, r24
				}
				else{}
				HLCD_voidLcdDraw(customChar, 0, Player2, 19); 	// player_2
    6f36:	20 91 76 01 	lds	r18, 0x0176
    6f3a:	89 e7       	ldi	r24, 0x79	; 121
    6f3c:	91 e0       	ldi	r25, 0x01	; 1
    6f3e:	60 e0       	ldi	r22, 0x00	; 0
    6f40:	42 2f       	mov	r20, r18
    6f42:	23 e1       	ldi	r18, 0x13	; 19
    6f44:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>
			}
			else{}
			i+=1;
    6f48:	80 91 77 01 	lds	r24, 0x0177
    6f4c:	8f 5f       	subi	r24, 0xFF	; 255
    6f4e:	80 93 77 01 	sts	0x0177, r24
			if (i==18)
    6f52:	80 91 77 01 	lds	r24, 0x0177
    6f56:	82 31       	cpi	r24, 0x12	; 18
    6f58:	09 f0       	breq	.+2      	; 0x6f5c <main+0x166>
    6f5a:	9e c0       	rjmp	.+316    	; 0x7098 <main+0x2a2>
			{
				Flag=0;
    6f5c:	10 92 74 01 	sts	0x0174, r1
				if(j!=Player2)
    6f60:	90 91 78 01 	lds	r25, 0x0178
    6f64:	80 91 76 01 	lds	r24, 0x0176
    6f68:	98 17       	cp	r25, r24
    6f6a:	09 f4       	brne	.+2      	; 0x6f6e <main+0x178>
    6f6c:	95 c0       	rjmp	.+298    	; 0x7098 <main+0x2a2>
				{
					Score1++;
    6f6e:	80 91 dd 01 	lds	r24, 0x01DD
    6f72:	8f 5f       	subi	r24, 0xFF	; 255
    6f74:	80 93 dd 01 	sts	0x01DD, r24
					HLCD_voidLcdWriteIntiger(Score1,4,3);
    6f78:	80 91 dd 01 	lds	r24, 0x01DD
    6f7c:	88 2f       	mov	r24, r24
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	a0 e0       	ldi	r26, 0x00	; 0
    6f82:	b0 e0       	ldi	r27, 0x00	; 0
    6f84:	bc 01       	movw	r22, r24
    6f86:	cd 01       	movw	r24, r26
    6f88:	44 e0       	ldi	r20, 0x04	; 4
    6f8a:	23 e0       	ldi	r18, 0x03	; 3
    6f8c:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <HLCD_voidLcdWriteIntiger>
    6f90:	83 c0       	rjmp	.+262    	; 0x7098 <main+0x2a2>
			}
			else{}
		}
		else
		{
			if(Player_2==R_DOWN)
    6f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f94:	83 30       	cpi	r24, 0x03	; 3
    6f96:	69 f4       	brne	.+26     	; 0x6fb2 <main+0x1bc>
			{
				j+=1;
    6f98:	80 91 78 01 	lds	r24, 0x0178
    6f9c:	8f 5f       	subi	r24, 0xFF	; 255
    6f9e:	80 93 78 01 	sts	0x0178, r24
				if(j>=3)
    6fa2:	80 91 78 01 	lds	r24, 0x0178
    6fa6:	83 30       	cpi	r24, 0x03	; 3
    6fa8:	98 f0       	brcs	.+38     	; 0x6fd0 <main+0x1da>
				{
					j=3;
    6faa:	83 e0       	ldi	r24, 0x03	; 3
    6fac:	80 93 78 01 	sts	0x0178, r24
    6fb0:	0f c0       	rjmp	.+30     	; 0x6fd0 <main+0x1da>
				}
				else{}
			}
			else if(Player_2==R_UP)
    6fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    6fb4:	82 30       	cpi	r24, 0x02	; 2
    6fb6:	61 f4       	brne	.+24     	; 0x6fd0 <main+0x1da>
			{
				j-=1;
    6fb8:	80 91 78 01 	lds	r24, 0x0178
    6fbc:	81 50       	subi	r24, 0x01	; 1
    6fbe:	80 93 78 01 	sts	0x0178, r24
				if(j<=1)
    6fc2:	80 91 78 01 	lds	r24, 0x0178
    6fc6:	82 30       	cpi	r24, 0x02	; 2
    6fc8:	18 f4       	brcc	.+6      	; 0x6fd0 <main+0x1da>
				{
					j=1;
    6fca:	81 e0       	ldi	r24, 0x01	; 1
    6fcc:	80 93 78 01 	sts	0x0178, r24
				}
				else{}
			}
			else{}
			if(Player_1==L_DOWN)
    6fd0:	88 89       	ldd	r24, Y+16	; 0x10
    6fd2:	81 30       	cpi	r24, 0x01	; 1
    6fd4:	f1 f4       	brne	.+60     	; 0x7012 <main+0x21c>
			{
				HLCD_voidLcdWriteString(" ", Player1, 0);
    6fd6:	20 91 75 01 	lds	r18, 0x0175
    6fda:	8a e6       	ldi	r24, 0x6A	; 106
    6fdc:	90 e0       	ldi	r25, 0x00	; 0
    6fde:	62 2f       	mov	r22, r18
    6fe0:	40 e0       	ldi	r20, 0x00	; 0
    6fe2:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>
				Player1+=1;
    6fe6:	80 91 75 01 	lds	r24, 0x0175
    6fea:	8f 5f       	subi	r24, 0xFF	; 255
    6fec:	80 93 75 01 	sts	0x0175, r24
				if(Player1>=3)
    6ff0:	80 91 75 01 	lds	r24, 0x0175
    6ff4:	83 30       	cpi	r24, 0x03	; 3
    6ff6:	18 f0       	brcs	.+6      	; 0x6ffe <main+0x208>
				{
					Player1=3;
    6ff8:	83 e0       	ldi	r24, 0x03	; 3
    6ffa:	80 93 75 01 	sts	0x0175, r24
				}
				else{}
				HLCD_voidLcdDraw(customChar, 0, Player1, 0); 	// player_1
    6ffe:	20 91 75 01 	lds	r18, 0x0175
    7002:	89 e7       	ldi	r24, 0x79	; 121
    7004:	91 e0       	ldi	r25, 0x01	; 1
    7006:	60 e0       	ldi	r22, 0x00	; 0
    7008:	42 2f       	mov	r20, r18
    700a:	20 e0       	ldi	r18, 0x00	; 0
    700c:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>
    7010:	20 c0       	rjmp	.+64     	; 0x7052 <main+0x25c>
			}
			else if(Player_1==L_UP)
    7012:	88 89       	ldd	r24, Y+16	; 0x10
    7014:	88 23       	and	r24, r24
    7016:	e9 f4       	brne	.+58     	; 0x7052 <main+0x25c>
			{
				HLCD_voidLcdWriteString(" ", Player1, 0);
    7018:	20 91 75 01 	lds	r18, 0x0175
    701c:	8a e6       	ldi	r24, 0x6A	; 106
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	62 2f       	mov	r22, r18
    7022:	40 e0       	ldi	r20, 0x00	; 0
    7024:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>
				Player1--;
    7028:	80 91 75 01 	lds	r24, 0x0175
    702c:	81 50       	subi	r24, 0x01	; 1
    702e:	80 93 75 01 	sts	0x0175, r24
				if(Player1==0)
    7032:	80 91 75 01 	lds	r24, 0x0175
    7036:	88 23       	and	r24, r24
    7038:	19 f4       	brne	.+6      	; 0x7040 <main+0x24a>
				{
					Player1=1;
    703a:	81 e0       	ldi	r24, 0x01	; 1
    703c:	80 93 75 01 	sts	0x0175, r24
				}
				else{}
				HLCD_voidLcdDraw(customChar, 0, Player1, 0); 	// player_1
    7040:	20 91 75 01 	lds	r18, 0x0175
    7044:	89 e7       	ldi	r24, 0x79	; 121
    7046:	91 e0       	ldi	r25, 0x01	; 1
    7048:	60 e0       	ldi	r22, 0x00	; 0
    704a:	42 2f       	mov	r20, r18
    704c:	20 e0       	ldi	r18, 0x00	; 0
    704e:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>
			}
			else{}
			i-=1;
    7052:	80 91 77 01 	lds	r24, 0x0177
    7056:	81 50       	subi	r24, 0x01	; 1
    7058:	80 93 77 01 	sts	0x0177, r24
			if(i==1)
    705c:	80 91 77 01 	lds	r24, 0x0177
    7060:	81 30       	cpi	r24, 0x01	; 1
    7062:	d1 f4       	brne	.+52     	; 0x7098 <main+0x2a2>
			{
				Flag=1;
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	80 93 74 01 	sts	0x0174, r24
				if(j!=Player1)
    706a:	90 91 78 01 	lds	r25, 0x0178
    706e:	80 91 75 01 	lds	r24, 0x0175
    7072:	98 17       	cp	r25, r24
    7074:	89 f0       	breq	.+34     	; 0x7098 <main+0x2a2>
				{
					Score2++;
    7076:	80 91 de 01 	lds	r24, 0x01DE
    707a:	8f 5f       	subi	r24, 0xFF	; 255
    707c:	80 93 de 01 	sts	0x01DE, r24
					HLCD_voidLcdWriteIntiger(Score2,4,19);
    7080:	80 91 de 01 	lds	r24, 0x01DE
    7084:	88 2f       	mov	r24, r24
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	a0 e0       	ldi	r26, 0x00	; 0
    708a:	b0 e0       	ldi	r27, 0x00	; 0
    708c:	bc 01       	movw	r22, r24
    708e:	cd 01       	movw	r24, r26
    7090:	44 e0       	ldi	r20, 0x04	; 4
    7092:	23 e1       	ldi	r18, 0x13	; 19
    7094:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <HLCD_voidLcdWriteIntiger>
				else{}

			}
			else{}
		}
		HLCD_voidLcdDraw(customChar_2, 1,j,i);
    7098:	20 91 78 01 	lds	r18, 0x0178
    709c:	30 91 77 01 	lds	r19, 0x0177
    70a0:	81 e8       	ldi	r24, 0x81	; 129
    70a2:	91 e0       	ldi	r25, 0x01	; 1
    70a4:	61 e0       	ldi	r22, 0x01	; 1
    70a6:	42 2f       	mov	r20, r18
    70a8:	23 2f       	mov	r18, r19
    70aa:	0e 94 32 21 	call	0x4264	; 0x4264 <HLCD_voidLcdDraw>
    70ae:	80 e0       	ldi	r24, 0x00	; 0
    70b0:	90 e0       	ldi	r25, 0x00	; 0
    70b2:	a8 e4       	ldi	r26, 0x48	; 72
    70b4:	b3 e4       	ldi	r27, 0x43	; 67
    70b6:	8b 87       	std	Y+11, r24	; 0x0b
    70b8:	9c 87       	std	Y+12, r25	; 0x0c
    70ba:	ad 87       	std	Y+13, r26	; 0x0d
    70bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70be:	6b 85       	ldd	r22, Y+11	; 0x0b
    70c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    70c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    70c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    70c6:	20 e0       	ldi	r18, 0x00	; 0
    70c8:	30 e0       	ldi	r19, 0x00	; 0
    70ca:	4a e7       	ldi	r20, 0x7A	; 122
    70cc:	55 e4       	ldi	r21, 0x45	; 69
    70ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70d2:	dc 01       	movw	r26, r24
    70d4:	cb 01       	movw	r24, r22
    70d6:	8f 83       	std	Y+7, r24	; 0x07
    70d8:	98 87       	std	Y+8, r25	; 0x08
    70da:	a9 87       	std	Y+9, r26	; 0x09
    70dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70de:	6f 81       	ldd	r22, Y+7	; 0x07
    70e0:	78 85       	ldd	r23, Y+8	; 0x08
    70e2:	89 85       	ldd	r24, Y+9	; 0x09
    70e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    70e6:	20 e0       	ldi	r18, 0x00	; 0
    70e8:	30 e0       	ldi	r19, 0x00	; 0
    70ea:	40 e8       	ldi	r20, 0x80	; 128
    70ec:	5f e3       	ldi	r21, 0x3F	; 63
    70ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    70f2:	88 23       	and	r24, r24
    70f4:	2c f4       	brge	.+10     	; 0x7100 <main+0x30a>
		__ticks = 1;
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	9e 83       	std	Y+6, r25	; 0x06
    70fc:	8d 83       	std	Y+5, r24	; 0x05
    70fe:	3f c0       	rjmp	.+126    	; 0x717e <main+0x388>
	else if (__tmp > 65535)
    7100:	6f 81       	ldd	r22, Y+7	; 0x07
    7102:	78 85       	ldd	r23, Y+8	; 0x08
    7104:	89 85       	ldd	r24, Y+9	; 0x09
    7106:	9a 85       	ldd	r25, Y+10	; 0x0a
    7108:	20 e0       	ldi	r18, 0x00	; 0
    710a:	3f ef       	ldi	r19, 0xFF	; 255
    710c:	4f e7       	ldi	r20, 0x7F	; 127
    710e:	57 e4       	ldi	r21, 0x47	; 71
    7110:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7114:	18 16       	cp	r1, r24
    7116:	4c f5       	brge	.+82     	; 0x716a <main+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7118:	6b 85       	ldd	r22, Y+11	; 0x0b
    711a:	7c 85       	ldd	r23, Y+12	; 0x0c
    711c:	8d 85       	ldd	r24, Y+13	; 0x0d
    711e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7120:	20 e0       	ldi	r18, 0x00	; 0
    7122:	30 e0       	ldi	r19, 0x00	; 0
    7124:	40 e2       	ldi	r20, 0x20	; 32
    7126:	51 e4       	ldi	r21, 0x41	; 65
    7128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    712c:	dc 01       	movw	r26, r24
    712e:	cb 01       	movw	r24, r22
    7130:	bc 01       	movw	r22, r24
    7132:	cd 01       	movw	r24, r26
    7134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7138:	dc 01       	movw	r26, r24
    713a:	cb 01       	movw	r24, r22
    713c:	9e 83       	std	Y+6, r25	; 0x06
    713e:	8d 83       	std	Y+5, r24	; 0x05
    7140:	0f c0       	rjmp	.+30     	; 0x7160 <main+0x36a>
    7142:	80 e9       	ldi	r24, 0x90	; 144
    7144:	91 e0       	ldi	r25, 0x01	; 1
    7146:	9c 83       	std	Y+4, r25	; 0x04
    7148:	8b 83       	std	Y+3, r24	; 0x03
    714a:	8b 81       	ldd	r24, Y+3	; 0x03
    714c:	9c 81       	ldd	r25, Y+4	; 0x04
    714e:	01 97       	sbiw	r24, 0x01	; 1
    7150:	f1 f7       	brne	.-4      	; 0x714e <main+0x358>
    7152:	9c 83       	std	Y+4, r25	; 0x04
    7154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7156:	8d 81       	ldd	r24, Y+5	; 0x05
    7158:	9e 81       	ldd	r25, Y+6	; 0x06
    715a:	01 97       	sbiw	r24, 0x01	; 1
    715c:	9e 83       	std	Y+6, r25	; 0x06
    715e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7160:	8d 81       	ldd	r24, Y+5	; 0x05
    7162:	9e 81       	ldd	r25, Y+6	; 0x06
    7164:	00 97       	sbiw	r24, 0x00	; 0
    7166:	69 f7       	brne	.-38     	; 0x7142 <main+0x34c>
    7168:	14 c0       	rjmp	.+40     	; 0x7192 <main+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    716a:	6f 81       	ldd	r22, Y+7	; 0x07
    716c:	78 85       	ldd	r23, Y+8	; 0x08
    716e:	89 85       	ldd	r24, Y+9	; 0x09
    7170:	9a 85       	ldd	r25, Y+10	; 0x0a
    7172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7176:	dc 01       	movw	r26, r24
    7178:	cb 01       	movw	r24, r22
    717a:	9e 83       	std	Y+6, r25	; 0x06
    717c:	8d 83       	std	Y+5, r24	; 0x05
    717e:	8d 81       	ldd	r24, Y+5	; 0x05
    7180:	9e 81       	ldd	r25, Y+6	; 0x06
    7182:	9a 83       	std	Y+2, r25	; 0x02
    7184:	89 83       	std	Y+1, r24	; 0x01
    7186:	89 81       	ldd	r24, Y+1	; 0x01
    7188:	9a 81       	ldd	r25, Y+2	; 0x02
    718a:	01 97       	sbiw	r24, 0x01	; 1
    718c:	f1 f7       	brne	.-4      	; 0x718a <main+0x394>
    718e:	9a 83       	std	Y+2, r25	; 0x02
    7190:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		HLCD_voidLcdWriteString(" ",j,i);
    7192:	20 91 78 01 	lds	r18, 0x0178
    7196:	30 91 77 01 	lds	r19, 0x0177
    719a:	8a e6       	ldi	r24, 0x6A	; 106
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	62 2f       	mov	r22, r18
    71a0:	43 2f       	mov	r20, r19
    71a2:	0e 94 28 18 	call	0x3050	; 0x3050 <HLCD_voidLcdWriteString>
    71a6:	53 ce       	rjmp	.-858    	; 0x6e4e <main+0x58>

000071a8 <Init_Buttons>:
	}
	return 0;
}
void Init_Buttons(void)
{
    71a8:	df 93       	push	r29
    71aa:	cf 93       	push	r28
    71ac:	cd b7       	in	r28, 0x3d	; 61
    71ae:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTD_ID, PIN7, PIN_INPUT);
    71b0:	83 e0       	ldi	r24, 0x03	; 3
    71b2:	67 e0       	ldi	r22, 0x07	; 7
    71b4:	40 e0       	ldi	r20, 0x00	; 0
    71b6:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD_ID, PIN7, PIN_HIGH);			// Pull up button
    71ba:	83 e0       	ldi	r24, 0x03	; 3
    71bc:	67 e0       	ldi	r22, 0x07	; 7
    71be:	41 e0       	ldi	r20, 0x01	; 1
    71c0:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTD_ID, PIN6, PIN_INPUT);
    71c4:	83 e0       	ldi	r24, 0x03	; 3
    71c6:	66 e0       	ldi	r22, 0x06	; 6
    71c8:	40 e0       	ldi	r20, 0x00	; 0
    71ca:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD_ID, PIN6, PIN_HIGH);			// Pull up button
    71ce:	83 e0       	ldi	r24, 0x03	; 3
    71d0:	66 e0       	ldi	r22, 0x06	; 6
    71d2:	41 e0       	ldi	r20, 0x01	; 1
    71d4:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTD_ID, PIN5, PIN_INPUT);
    71d8:	83 e0       	ldi	r24, 0x03	; 3
    71da:	65 e0       	ldi	r22, 0x05	; 5
    71dc:	40 e0       	ldi	r20, 0x00	; 0
    71de:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD_ID, PIN5, PIN_HIGH);			// Pull up button
    71e2:	83 e0       	ldi	r24, 0x03	; 3
    71e4:	65 e0       	ldi	r22, 0x05	; 5
    71e6:	41 e0       	ldi	r20, 0x01	; 1
    71e8:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTD_ID, PIN3, PIN_INPUT);
    71ec:	83 e0       	ldi	r24, 0x03	; 3
    71ee:	63 e0       	ldi	r22, 0x03	; 3
    71f0:	40 e0       	ldi	r20, 0x00	; 0
    71f2:	0e 94 1e 0a 	call	0x143c	; 0x143c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD_ID, PIN3, PIN_HIGH);			// Pull up button
    71f6:	83 e0       	ldi	r24, 0x03	; 3
    71f8:	63 e0       	ldi	r22, 0x03	; 3
    71fa:	41 e0       	ldi	r20, 0x01	; 1
    71fc:	0e 94 22 0b 	call	0x1644	; 0x1644 <DIO_voidSetPinValue>
}
    7200:	cf 91       	pop	r28
    7202:	df 91       	pop	r29
    7204:	08 95       	ret

00007206 <Player_One>:

u8 Player_One (void)
{
    7206:	df 93       	push	r29
    7208:	cf 93       	push	r28
    720a:	cd b7       	in	r28, 0x3d	; 61
    720c:	de b7       	in	r29, 0x3e	; 62
    720e:	6d 97       	sbiw	r28, 0x1d	; 29
    7210:	0f b6       	in	r0, 0x3f	; 63
    7212:	f8 94       	cli
    7214:	de bf       	out	0x3e, r29	; 62
    7216:	0f be       	out	0x3f, r0	; 63
    7218:	cd bf       	out	0x3d, r28	; 61
	u8 Ball_1 ;
	if(DIO_u8GetPinValue(PORTD_ID,PIN7) == 0)
    721a:	83 e0       	ldi	r24, 0x03	; 3
    721c:	67 e0       	ldi	r22, 0x07	; 7
    721e:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    7222:	88 23       	and	r24, r24
    7224:	09 f0       	breq	.+2      	; 0x7228 <Player_One+0x22>
    7226:	74 c0       	rjmp	.+232    	; 0x7310 <Player_One+0x10a>
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	a0 e8       	ldi	r26, 0x80	; 128
    722e:	bf e3       	ldi	r27, 0x3F	; 63
    7230:	89 8f       	std	Y+25, r24	; 0x19
    7232:	9a 8f       	std	Y+26, r25	; 0x1a
    7234:	ab 8f       	std	Y+27, r26	; 0x1b
    7236:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7238:	69 8d       	ldd	r22, Y+25	; 0x19
    723a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    723c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    723e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7240:	20 e0       	ldi	r18, 0x00	; 0
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	4a e7       	ldi	r20, 0x7A	; 122
    7246:	55 e4       	ldi	r21, 0x45	; 69
    7248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    724c:	dc 01       	movw	r26, r24
    724e:	cb 01       	movw	r24, r22
    7250:	8d 8b       	std	Y+21, r24	; 0x15
    7252:	9e 8b       	std	Y+22, r25	; 0x16
    7254:	af 8b       	std	Y+23, r26	; 0x17
    7256:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7258:	6d 89       	ldd	r22, Y+21	; 0x15
    725a:	7e 89       	ldd	r23, Y+22	; 0x16
    725c:	8f 89       	ldd	r24, Y+23	; 0x17
    725e:	98 8d       	ldd	r25, Y+24	; 0x18
    7260:	20 e0       	ldi	r18, 0x00	; 0
    7262:	30 e0       	ldi	r19, 0x00	; 0
    7264:	40 e8       	ldi	r20, 0x80	; 128
    7266:	5f e3       	ldi	r21, 0x3F	; 63
    7268:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    726c:	88 23       	and	r24, r24
    726e:	2c f4       	brge	.+10     	; 0x727a <Player_One+0x74>
		__ticks = 1;
    7270:	81 e0       	ldi	r24, 0x01	; 1
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	9c 8b       	std	Y+20, r25	; 0x14
    7276:	8b 8b       	std	Y+19, r24	; 0x13
    7278:	3f c0       	rjmp	.+126    	; 0x72f8 <Player_One+0xf2>
	else if (__tmp > 65535)
    727a:	6d 89       	ldd	r22, Y+21	; 0x15
    727c:	7e 89       	ldd	r23, Y+22	; 0x16
    727e:	8f 89       	ldd	r24, Y+23	; 0x17
    7280:	98 8d       	ldd	r25, Y+24	; 0x18
    7282:	20 e0       	ldi	r18, 0x00	; 0
    7284:	3f ef       	ldi	r19, 0xFF	; 255
    7286:	4f e7       	ldi	r20, 0x7F	; 127
    7288:	57 e4       	ldi	r21, 0x47	; 71
    728a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    728e:	18 16       	cp	r1, r24
    7290:	4c f5       	brge	.+82     	; 0x72e4 <Player_One+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7292:	69 8d       	ldd	r22, Y+25	; 0x19
    7294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    729a:	20 e0       	ldi	r18, 0x00	; 0
    729c:	30 e0       	ldi	r19, 0x00	; 0
    729e:	40 e2       	ldi	r20, 0x20	; 32
    72a0:	51 e4       	ldi	r21, 0x41	; 65
    72a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72a6:	dc 01       	movw	r26, r24
    72a8:	cb 01       	movw	r24, r22
    72aa:	bc 01       	movw	r22, r24
    72ac:	cd 01       	movw	r24, r26
    72ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72b2:	dc 01       	movw	r26, r24
    72b4:	cb 01       	movw	r24, r22
    72b6:	9c 8b       	std	Y+20, r25	; 0x14
    72b8:	8b 8b       	std	Y+19, r24	; 0x13
    72ba:	0f c0       	rjmp	.+30     	; 0x72da <Player_One+0xd4>
    72bc:	80 e9       	ldi	r24, 0x90	; 144
    72be:	91 e0       	ldi	r25, 0x01	; 1
    72c0:	9a 8b       	std	Y+18, r25	; 0x12
    72c2:	89 8b       	std	Y+17, r24	; 0x11
    72c4:	89 89       	ldd	r24, Y+17	; 0x11
    72c6:	9a 89       	ldd	r25, Y+18	; 0x12
    72c8:	01 97       	sbiw	r24, 0x01	; 1
    72ca:	f1 f7       	brne	.-4      	; 0x72c8 <Player_One+0xc2>
    72cc:	9a 8b       	std	Y+18, r25	; 0x12
    72ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72d0:	8b 89       	ldd	r24, Y+19	; 0x13
    72d2:	9c 89       	ldd	r25, Y+20	; 0x14
    72d4:	01 97       	sbiw	r24, 0x01	; 1
    72d6:	9c 8b       	std	Y+20, r25	; 0x14
    72d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72da:	8b 89       	ldd	r24, Y+19	; 0x13
    72dc:	9c 89       	ldd	r25, Y+20	; 0x14
    72de:	00 97       	sbiw	r24, 0x00	; 0
    72e0:	69 f7       	brne	.-38     	; 0x72bc <Player_One+0xb6>
    72e2:	14 c0       	rjmp	.+40     	; 0x730c <Player_One+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72e4:	6d 89       	ldd	r22, Y+21	; 0x15
    72e6:	7e 89       	ldd	r23, Y+22	; 0x16
    72e8:	8f 89       	ldd	r24, Y+23	; 0x17
    72ea:	98 8d       	ldd	r25, Y+24	; 0x18
    72ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72f0:	dc 01       	movw	r26, r24
    72f2:	cb 01       	movw	r24, r22
    72f4:	9c 8b       	std	Y+20, r25	; 0x14
    72f6:	8b 8b       	std	Y+19, r24	; 0x13
    72f8:	8b 89       	ldd	r24, Y+19	; 0x13
    72fa:	9c 89       	ldd	r25, Y+20	; 0x14
    72fc:	98 8b       	std	Y+16, r25	; 0x10
    72fe:	8f 87       	std	Y+15, r24	; 0x0f
    7300:	8f 85       	ldd	r24, Y+15	; 0x0f
    7302:	98 89       	ldd	r25, Y+16	; 0x10
    7304:	01 97       	sbiw	r24, 0x01	; 1
    7306:	f1 f7       	brne	.-4      	; 0x7304 <Player_One+0xfe>
    7308:	98 8b       	std	Y+16, r25	; 0x10
    730a:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		Ball_1 = L_DOWN ;
    730c:	81 e0       	ldi	r24, 0x01	; 1
    730e:	8d 8f       	std	Y+29, r24	; 0x1d

	}
	else{}
	if(DIO_u8GetPinValue(PORTD_ID,PIN6) == 0)
    7310:	83 e0       	ldi	r24, 0x03	; 3
    7312:	66 e0       	ldi	r22, 0x06	; 6
    7314:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    7318:	88 23       	and	r24, r24
    731a:	09 f0       	breq	.+2      	; 0x731e <Player_One+0x118>
    731c:	73 c0       	rjmp	.+230    	; 0x7404 <Player_One+0x1fe>
    731e:	80 e0       	ldi	r24, 0x00	; 0
    7320:	90 e0       	ldi	r25, 0x00	; 0
    7322:	a0 e8       	ldi	r26, 0x80	; 128
    7324:	bf e3       	ldi	r27, 0x3F	; 63
    7326:	8b 87       	std	Y+11, r24	; 0x0b
    7328:	9c 87       	std	Y+12, r25	; 0x0c
    732a:	ad 87       	std	Y+13, r26	; 0x0d
    732c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    732e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7330:	7c 85       	ldd	r23, Y+12	; 0x0c
    7332:	8d 85       	ldd	r24, Y+13	; 0x0d
    7334:	9e 85       	ldd	r25, Y+14	; 0x0e
    7336:	20 e0       	ldi	r18, 0x00	; 0
    7338:	30 e0       	ldi	r19, 0x00	; 0
    733a:	4a e7       	ldi	r20, 0x7A	; 122
    733c:	55 e4       	ldi	r21, 0x45	; 69
    733e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7342:	dc 01       	movw	r26, r24
    7344:	cb 01       	movw	r24, r22
    7346:	8f 83       	std	Y+7, r24	; 0x07
    7348:	98 87       	std	Y+8, r25	; 0x08
    734a:	a9 87       	std	Y+9, r26	; 0x09
    734c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    734e:	6f 81       	ldd	r22, Y+7	; 0x07
    7350:	78 85       	ldd	r23, Y+8	; 0x08
    7352:	89 85       	ldd	r24, Y+9	; 0x09
    7354:	9a 85       	ldd	r25, Y+10	; 0x0a
    7356:	20 e0       	ldi	r18, 0x00	; 0
    7358:	30 e0       	ldi	r19, 0x00	; 0
    735a:	40 e8       	ldi	r20, 0x80	; 128
    735c:	5f e3       	ldi	r21, 0x3F	; 63
    735e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7362:	88 23       	and	r24, r24
    7364:	2c f4       	brge	.+10     	; 0x7370 <Player_One+0x16a>
		__ticks = 1;
    7366:	81 e0       	ldi	r24, 0x01	; 1
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	9e 83       	std	Y+6, r25	; 0x06
    736c:	8d 83       	std	Y+5, r24	; 0x05
    736e:	3f c0       	rjmp	.+126    	; 0x73ee <Player_One+0x1e8>
	else if (__tmp > 65535)
    7370:	6f 81       	ldd	r22, Y+7	; 0x07
    7372:	78 85       	ldd	r23, Y+8	; 0x08
    7374:	89 85       	ldd	r24, Y+9	; 0x09
    7376:	9a 85       	ldd	r25, Y+10	; 0x0a
    7378:	20 e0       	ldi	r18, 0x00	; 0
    737a:	3f ef       	ldi	r19, 0xFF	; 255
    737c:	4f e7       	ldi	r20, 0x7F	; 127
    737e:	57 e4       	ldi	r21, 0x47	; 71
    7380:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7384:	18 16       	cp	r1, r24
    7386:	4c f5       	brge	.+82     	; 0x73da <Player_One+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7388:	6b 85       	ldd	r22, Y+11	; 0x0b
    738a:	7c 85       	ldd	r23, Y+12	; 0x0c
    738c:	8d 85       	ldd	r24, Y+13	; 0x0d
    738e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7390:	20 e0       	ldi	r18, 0x00	; 0
    7392:	30 e0       	ldi	r19, 0x00	; 0
    7394:	40 e2       	ldi	r20, 0x20	; 32
    7396:	51 e4       	ldi	r21, 0x41	; 65
    7398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    739c:	dc 01       	movw	r26, r24
    739e:	cb 01       	movw	r24, r22
    73a0:	bc 01       	movw	r22, r24
    73a2:	cd 01       	movw	r24, r26
    73a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73a8:	dc 01       	movw	r26, r24
    73aa:	cb 01       	movw	r24, r22
    73ac:	9e 83       	std	Y+6, r25	; 0x06
    73ae:	8d 83       	std	Y+5, r24	; 0x05
    73b0:	0f c0       	rjmp	.+30     	; 0x73d0 <Player_One+0x1ca>
    73b2:	80 e9       	ldi	r24, 0x90	; 144
    73b4:	91 e0       	ldi	r25, 0x01	; 1
    73b6:	9c 83       	std	Y+4, r25	; 0x04
    73b8:	8b 83       	std	Y+3, r24	; 0x03
    73ba:	8b 81       	ldd	r24, Y+3	; 0x03
    73bc:	9c 81       	ldd	r25, Y+4	; 0x04
    73be:	01 97       	sbiw	r24, 0x01	; 1
    73c0:	f1 f7       	brne	.-4      	; 0x73be <Player_One+0x1b8>
    73c2:	9c 83       	std	Y+4, r25	; 0x04
    73c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73c6:	8d 81       	ldd	r24, Y+5	; 0x05
    73c8:	9e 81       	ldd	r25, Y+6	; 0x06
    73ca:	01 97       	sbiw	r24, 0x01	; 1
    73cc:	9e 83       	std	Y+6, r25	; 0x06
    73ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73d0:	8d 81       	ldd	r24, Y+5	; 0x05
    73d2:	9e 81       	ldd	r25, Y+6	; 0x06
    73d4:	00 97       	sbiw	r24, 0x00	; 0
    73d6:	69 f7       	brne	.-38     	; 0x73b2 <Player_One+0x1ac>
    73d8:	14 c0       	rjmp	.+40     	; 0x7402 <Player_One+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73da:	6f 81       	ldd	r22, Y+7	; 0x07
    73dc:	78 85       	ldd	r23, Y+8	; 0x08
    73de:	89 85       	ldd	r24, Y+9	; 0x09
    73e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    73e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73e6:	dc 01       	movw	r26, r24
    73e8:	cb 01       	movw	r24, r22
    73ea:	9e 83       	std	Y+6, r25	; 0x06
    73ec:	8d 83       	std	Y+5, r24	; 0x05
    73ee:	8d 81       	ldd	r24, Y+5	; 0x05
    73f0:	9e 81       	ldd	r25, Y+6	; 0x06
    73f2:	9a 83       	std	Y+2, r25	; 0x02
    73f4:	89 83       	std	Y+1, r24	; 0x01
    73f6:	89 81       	ldd	r24, Y+1	; 0x01
    73f8:	9a 81       	ldd	r25, Y+2	; 0x02
    73fa:	01 97       	sbiw	r24, 0x01	; 1
    73fc:	f1 f7       	brne	.-4      	; 0x73fa <Player_One+0x1f4>
    73fe:	9a 83       	std	Y+2, r25	; 0x02
    7400:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		Ball_1 = L_UP ;
    7402:	1d 8e       	std	Y+29, r1	; 0x1d
	}
	else{}
	return Ball_1;
    7404:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    7406:	6d 96       	adiw	r28, 0x1d	; 29
    7408:	0f b6       	in	r0, 0x3f	; 63
    740a:	f8 94       	cli
    740c:	de bf       	out	0x3e, r29	; 62
    740e:	0f be       	out	0x3f, r0	; 63
    7410:	cd bf       	out	0x3d, r28	; 61
    7412:	cf 91       	pop	r28
    7414:	df 91       	pop	r29
    7416:	08 95       	ret

00007418 <Player_Two>:

u8 Player_Two (void)
{
    7418:	df 93       	push	r29
    741a:	cf 93       	push	r28
    741c:	cd b7       	in	r28, 0x3d	; 61
    741e:	de b7       	in	r29, 0x3e	; 62
    7420:	6d 97       	sbiw	r28, 0x1d	; 29
    7422:	0f b6       	in	r0, 0x3f	; 63
    7424:	f8 94       	cli
    7426:	de bf       	out	0x3e, r29	; 62
    7428:	0f be       	out	0x3f, r0	; 63
    742a:	cd bf       	out	0x3d, r28	; 61
	u8 Ball_2 ;
	if(DIO_u8GetPinValue(PORTD_ID,PIN5) == 0)
    742c:	83 e0       	ldi	r24, 0x03	; 3
    742e:	65 e0       	ldi	r22, 0x05	; 5
    7430:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    7434:	88 23       	and	r24, r24
    7436:	09 f0       	breq	.+2      	; 0x743a <Player_Two+0x22>
    7438:	74 c0       	rjmp	.+232    	; 0x7522 <Player_Two+0x10a>
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	a0 e8       	ldi	r26, 0x80	; 128
    7440:	bf e3       	ldi	r27, 0x3F	; 63
    7442:	89 8f       	std	Y+25, r24	; 0x19
    7444:	9a 8f       	std	Y+26, r25	; 0x1a
    7446:	ab 8f       	std	Y+27, r26	; 0x1b
    7448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    744a:	69 8d       	ldd	r22, Y+25	; 0x19
    744c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    744e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7452:	20 e0       	ldi	r18, 0x00	; 0
    7454:	30 e0       	ldi	r19, 0x00	; 0
    7456:	4a e7       	ldi	r20, 0x7A	; 122
    7458:	55 e4       	ldi	r21, 0x45	; 69
    745a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    745e:	dc 01       	movw	r26, r24
    7460:	cb 01       	movw	r24, r22
    7462:	8d 8b       	std	Y+21, r24	; 0x15
    7464:	9e 8b       	std	Y+22, r25	; 0x16
    7466:	af 8b       	std	Y+23, r26	; 0x17
    7468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    746a:	6d 89       	ldd	r22, Y+21	; 0x15
    746c:	7e 89       	ldd	r23, Y+22	; 0x16
    746e:	8f 89       	ldd	r24, Y+23	; 0x17
    7470:	98 8d       	ldd	r25, Y+24	; 0x18
    7472:	20 e0       	ldi	r18, 0x00	; 0
    7474:	30 e0       	ldi	r19, 0x00	; 0
    7476:	40 e8       	ldi	r20, 0x80	; 128
    7478:	5f e3       	ldi	r21, 0x3F	; 63
    747a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    747e:	88 23       	and	r24, r24
    7480:	2c f4       	brge	.+10     	; 0x748c <Player_Two+0x74>
		__ticks = 1;
    7482:	81 e0       	ldi	r24, 0x01	; 1
    7484:	90 e0       	ldi	r25, 0x00	; 0
    7486:	9c 8b       	std	Y+20, r25	; 0x14
    7488:	8b 8b       	std	Y+19, r24	; 0x13
    748a:	3f c0       	rjmp	.+126    	; 0x750a <Player_Two+0xf2>
	else if (__tmp > 65535)
    748c:	6d 89       	ldd	r22, Y+21	; 0x15
    748e:	7e 89       	ldd	r23, Y+22	; 0x16
    7490:	8f 89       	ldd	r24, Y+23	; 0x17
    7492:	98 8d       	ldd	r25, Y+24	; 0x18
    7494:	20 e0       	ldi	r18, 0x00	; 0
    7496:	3f ef       	ldi	r19, 0xFF	; 255
    7498:	4f e7       	ldi	r20, 0x7F	; 127
    749a:	57 e4       	ldi	r21, 0x47	; 71
    749c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    74a0:	18 16       	cp	r1, r24
    74a2:	4c f5       	brge	.+82     	; 0x74f6 <Player_Two+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    74a4:	69 8d       	ldd	r22, Y+25	; 0x19
    74a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    74a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    74aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    74ac:	20 e0       	ldi	r18, 0x00	; 0
    74ae:	30 e0       	ldi	r19, 0x00	; 0
    74b0:	40 e2       	ldi	r20, 0x20	; 32
    74b2:	51 e4       	ldi	r21, 0x41	; 65
    74b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    74b8:	dc 01       	movw	r26, r24
    74ba:	cb 01       	movw	r24, r22
    74bc:	bc 01       	movw	r22, r24
    74be:	cd 01       	movw	r24, r26
    74c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74c4:	dc 01       	movw	r26, r24
    74c6:	cb 01       	movw	r24, r22
    74c8:	9c 8b       	std	Y+20, r25	; 0x14
    74ca:	8b 8b       	std	Y+19, r24	; 0x13
    74cc:	0f c0       	rjmp	.+30     	; 0x74ec <Player_Two+0xd4>
    74ce:	80 e9       	ldi	r24, 0x90	; 144
    74d0:	91 e0       	ldi	r25, 0x01	; 1
    74d2:	9a 8b       	std	Y+18, r25	; 0x12
    74d4:	89 8b       	std	Y+17, r24	; 0x11
    74d6:	89 89       	ldd	r24, Y+17	; 0x11
    74d8:	9a 89       	ldd	r25, Y+18	; 0x12
    74da:	01 97       	sbiw	r24, 0x01	; 1
    74dc:	f1 f7       	brne	.-4      	; 0x74da <Player_Two+0xc2>
    74de:	9a 8b       	std	Y+18, r25	; 0x12
    74e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74e2:	8b 89       	ldd	r24, Y+19	; 0x13
    74e4:	9c 89       	ldd	r25, Y+20	; 0x14
    74e6:	01 97       	sbiw	r24, 0x01	; 1
    74e8:	9c 8b       	std	Y+20, r25	; 0x14
    74ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74ec:	8b 89       	ldd	r24, Y+19	; 0x13
    74ee:	9c 89       	ldd	r25, Y+20	; 0x14
    74f0:	00 97       	sbiw	r24, 0x00	; 0
    74f2:	69 f7       	brne	.-38     	; 0x74ce <Player_Two+0xb6>
    74f4:	14 c0       	rjmp	.+40     	; 0x751e <Player_Two+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74f6:	6d 89       	ldd	r22, Y+21	; 0x15
    74f8:	7e 89       	ldd	r23, Y+22	; 0x16
    74fa:	8f 89       	ldd	r24, Y+23	; 0x17
    74fc:	98 8d       	ldd	r25, Y+24	; 0x18
    74fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7502:	dc 01       	movw	r26, r24
    7504:	cb 01       	movw	r24, r22
    7506:	9c 8b       	std	Y+20, r25	; 0x14
    7508:	8b 8b       	std	Y+19, r24	; 0x13
    750a:	8b 89       	ldd	r24, Y+19	; 0x13
    750c:	9c 89       	ldd	r25, Y+20	; 0x14
    750e:	98 8b       	std	Y+16, r25	; 0x10
    7510:	8f 87       	std	Y+15, r24	; 0x0f
    7512:	8f 85       	ldd	r24, Y+15	; 0x0f
    7514:	98 89       	ldd	r25, Y+16	; 0x10
    7516:	01 97       	sbiw	r24, 0x01	; 1
    7518:	f1 f7       	brne	.-4      	; 0x7516 <Player_Two+0xfe>
    751a:	98 8b       	std	Y+16, r25	; 0x10
    751c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(1);
		Ball_2 = R_DOWN ;
    751e:	83 e0       	ldi	r24, 0x03	; 3
    7520:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	else{}
	if(DIO_u8GetPinValue(PORTD_ID,PIN3) == 0)
    7522:	83 e0       	ldi	r24, 0x03	; 3
    7524:	63 e0       	ldi	r22, 0x03	; 3
    7526:	0e 94 26 0c 	call	0x184c	; 0x184c <DIO_u8GetPinValue>
    752a:	88 23       	and	r24, r24
    752c:	09 f0       	breq	.+2      	; 0x7530 <Player_Two+0x118>
    752e:	74 c0       	rjmp	.+232    	; 0x7618 <Player_Two+0x200>
    7530:	80 e0       	ldi	r24, 0x00	; 0
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	a0 e8       	ldi	r26, 0x80	; 128
    7536:	bf e3       	ldi	r27, 0x3F	; 63
    7538:	8b 87       	std	Y+11, r24	; 0x0b
    753a:	9c 87       	std	Y+12, r25	; 0x0c
    753c:	ad 87       	std	Y+13, r26	; 0x0d
    753e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7540:	6b 85       	ldd	r22, Y+11	; 0x0b
    7542:	7c 85       	ldd	r23, Y+12	; 0x0c
    7544:	8d 85       	ldd	r24, Y+13	; 0x0d
    7546:	9e 85       	ldd	r25, Y+14	; 0x0e
    7548:	20 e0       	ldi	r18, 0x00	; 0
    754a:	30 e0       	ldi	r19, 0x00	; 0
    754c:	4a e7       	ldi	r20, 0x7A	; 122
    754e:	55 e4       	ldi	r21, 0x45	; 69
    7550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7554:	dc 01       	movw	r26, r24
    7556:	cb 01       	movw	r24, r22
    7558:	8f 83       	std	Y+7, r24	; 0x07
    755a:	98 87       	std	Y+8, r25	; 0x08
    755c:	a9 87       	std	Y+9, r26	; 0x09
    755e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7560:	6f 81       	ldd	r22, Y+7	; 0x07
    7562:	78 85       	ldd	r23, Y+8	; 0x08
    7564:	89 85       	ldd	r24, Y+9	; 0x09
    7566:	9a 85       	ldd	r25, Y+10	; 0x0a
    7568:	20 e0       	ldi	r18, 0x00	; 0
    756a:	30 e0       	ldi	r19, 0x00	; 0
    756c:	40 e8       	ldi	r20, 0x80	; 128
    756e:	5f e3       	ldi	r21, 0x3F	; 63
    7570:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    7574:	88 23       	and	r24, r24
    7576:	2c f4       	brge	.+10     	; 0x7582 <Player_Two+0x16a>
		__ticks = 1;
    7578:	81 e0       	ldi	r24, 0x01	; 1
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	9e 83       	std	Y+6, r25	; 0x06
    757e:	8d 83       	std	Y+5, r24	; 0x05
    7580:	3f c0       	rjmp	.+126    	; 0x7600 <Player_Two+0x1e8>
	else if (__tmp > 65535)
    7582:	6f 81       	ldd	r22, Y+7	; 0x07
    7584:	78 85       	ldd	r23, Y+8	; 0x08
    7586:	89 85       	ldd	r24, Y+9	; 0x09
    7588:	9a 85       	ldd	r25, Y+10	; 0x0a
    758a:	20 e0       	ldi	r18, 0x00	; 0
    758c:	3f ef       	ldi	r19, 0xFF	; 255
    758e:	4f e7       	ldi	r20, 0x7F	; 127
    7590:	57 e4       	ldi	r21, 0x47	; 71
    7592:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    7596:	18 16       	cp	r1, r24
    7598:	4c f5       	brge	.+82     	; 0x75ec <Player_Two+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    759a:	6b 85       	ldd	r22, Y+11	; 0x0b
    759c:	7c 85       	ldd	r23, Y+12	; 0x0c
    759e:	8d 85       	ldd	r24, Y+13	; 0x0d
    75a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    75a2:	20 e0       	ldi	r18, 0x00	; 0
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	40 e2       	ldi	r20, 0x20	; 32
    75a8:	51 e4       	ldi	r21, 0x41	; 65
    75aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75ae:	dc 01       	movw	r26, r24
    75b0:	cb 01       	movw	r24, r22
    75b2:	bc 01       	movw	r22, r24
    75b4:	cd 01       	movw	r24, r26
    75b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75ba:	dc 01       	movw	r26, r24
    75bc:	cb 01       	movw	r24, r22
    75be:	9e 83       	std	Y+6, r25	; 0x06
    75c0:	8d 83       	std	Y+5, r24	; 0x05
    75c2:	0f c0       	rjmp	.+30     	; 0x75e2 <Player_Two+0x1ca>
    75c4:	80 e9       	ldi	r24, 0x90	; 144
    75c6:	91 e0       	ldi	r25, 0x01	; 1
    75c8:	9c 83       	std	Y+4, r25	; 0x04
    75ca:	8b 83       	std	Y+3, r24	; 0x03
    75cc:	8b 81       	ldd	r24, Y+3	; 0x03
    75ce:	9c 81       	ldd	r25, Y+4	; 0x04
    75d0:	01 97       	sbiw	r24, 0x01	; 1
    75d2:	f1 f7       	brne	.-4      	; 0x75d0 <Player_Two+0x1b8>
    75d4:	9c 83       	std	Y+4, r25	; 0x04
    75d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75d8:	8d 81       	ldd	r24, Y+5	; 0x05
    75da:	9e 81       	ldd	r25, Y+6	; 0x06
    75dc:	01 97       	sbiw	r24, 0x01	; 1
    75de:	9e 83       	std	Y+6, r25	; 0x06
    75e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75e2:	8d 81       	ldd	r24, Y+5	; 0x05
    75e4:	9e 81       	ldd	r25, Y+6	; 0x06
    75e6:	00 97       	sbiw	r24, 0x00	; 0
    75e8:	69 f7       	brne	.-38     	; 0x75c4 <Player_Two+0x1ac>
    75ea:	14 c0       	rjmp	.+40     	; 0x7614 <Player_Two+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75ec:	6f 81       	ldd	r22, Y+7	; 0x07
    75ee:	78 85       	ldd	r23, Y+8	; 0x08
    75f0:	89 85       	ldd	r24, Y+9	; 0x09
    75f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    75f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75f8:	dc 01       	movw	r26, r24
    75fa:	cb 01       	movw	r24, r22
    75fc:	9e 83       	std	Y+6, r25	; 0x06
    75fe:	8d 83       	std	Y+5, r24	; 0x05
    7600:	8d 81       	ldd	r24, Y+5	; 0x05
    7602:	9e 81       	ldd	r25, Y+6	; 0x06
    7604:	9a 83       	std	Y+2, r25	; 0x02
    7606:	89 83       	std	Y+1, r24	; 0x01
    7608:	89 81       	ldd	r24, Y+1	; 0x01
    760a:	9a 81       	ldd	r25, Y+2	; 0x02
    760c:	01 97       	sbiw	r24, 0x01	; 1
    760e:	f1 f7       	brne	.-4      	; 0x760c <Player_Two+0x1f4>
    7610:	9a 83       	std	Y+2, r25	; 0x02
    7612:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		Ball_2 = R_UP ;
    7614:	82 e0       	ldi	r24, 0x02	; 2
    7616:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	else{}
	return Ball_2;
    7618:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    761a:	6d 96       	adiw	r28, 0x1d	; 29
    761c:	0f b6       	in	r0, 0x3f	; 63
    761e:	f8 94       	cli
    7620:	de bf       	out	0x3e, r29	; 62
    7622:	0f be       	out	0x3f, r0	; 63
    7624:	cd bf       	out	0x3d, r28	; 61
    7626:	cf 91       	pop	r28
    7628:	df 91       	pop	r29
    762a:	08 95       	ret

0000762c <__mulsi3>:
    762c:	62 9f       	mul	r22, r18
    762e:	d0 01       	movw	r26, r0
    7630:	73 9f       	mul	r23, r19
    7632:	f0 01       	movw	r30, r0
    7634:	82 9f       	mul	r24, r18
    7636:	e0 0d       	add	r30, r0
    7638:	f1 1d       	adc	r31, r1
    763a:	64 9f       	mul	r22, r20
    763c:	e0 0d       	add	r30, r0
    763e:	f1 1d       	adc	r31, r1
    7640:	92 9f       	mul	r25, r18
    7642:	f0 0d       	add	r31, r0
    7644:	83 9f       	mul	r24, r19
    7646:	f0 0d       	add	r31, r0
    7648:	74 9f       	mul	r23, r20
    764a:	f0 0d       	add	r31, r0
    764c:	65 9f       	mul	r22, r21
    764e:	f0 0d       	add	r31, r0
    7650:	99 27       	eor	r25, r25
    7652:	72 9f       	mul	r23, r18
    7654:	b0 0d       	add	r27, r0
    7656:	e1 1d       	adc	r30, r1
    7658:	f9 1f       	adc	r31, r25
    765a:	63 9f       	mul	r22, r19
    765c:	b0 0d       	add	r27, r0
    765e:	e1 1d       	adc	r30, r1
    7660:	f9 1f       	adc	r31, r25
    7662:	bd 01       	movw	r22, r26
    7664:	cf 01       	movw	r24, r30
    7666:	11 24       	eor	r1, r1
    7668:	08 95       	ret

0000766a <__udivmodsi4>:
    766a:	a1 e2       	ldi	r26, 0x21	; 33
    766c:	1a 2e       	mov	r1, r26
    766e:	aa 1b       	sub	r26, r26
    7670:	bb 1b       	sub	r27, r27
    7672:	fd 01       	movw	r30, r26
    7674:	0d c0       	rjmp	.+26     	; 0x7690 <__udivmodsi4_ep>

00007676 <__udivmodsi4_loop>:
    7676:	aa 1f       	adc	r26, r26
    7678:	bb 1f       	adc	r27, r27
    767a:	ee 1f       	adc	r30, r30
    767c:	ff 1f       	adc	r31, r31
    767e:	a2 17       	cp	r26, r18
    7680:	b3 07       	cpc	r27, r19
    7682:	e4 07       	cpc	r30, r20
    7684:	f5 07       	cpc	r31, r21
    7686:	20 f0       	brcs	.+8      	; 0x7690 <__udivmodsi4_ep>
    7688:	a2 1b       	sub	r26, r18
    768a:	b3 0b       	sbc	r27, r19
    768c:	e4 0b       	sbc	r30, r20
    768e:	f5 0b       	sbc	r31, r21

00007690 <__udivmodsi4_ep>:
    7690:	66 1f       	adc	r22, r22
    7692:	77 1f       	adc	r23, r23
    7694:	88 1f       	adc	r24, r24
    7696:	99 1f       	adc	r25, r25
    7698:	1a 94       	dec	r1
    769a:	69 f7       	brne	.-38     	; 0x7676 <__udivmodsi4_loop>
    769c:	60 95       	com	r22
    769e:	70 95       	com	r23
    76a0:	80 95       	com	r24
    76a2:	90 95       	com	r25
    76a4:	9b 01       	movw	r18, r22
    76a6:	ac 01       	movw	r20, r24
    76a8:	bd 01       	movw	r22, r26
    76aa:	cf 01       	movw	r24, r30
    76ac:	08 95       	ret

000076ae <__divmodsi4>:
    76ae:	97 fb       	bst	r25, 7
    76b0:	09 2e       	mov	r0, r25
    76b2:	05 26       	eor	r0, r21
    76b4:	0e d0       	rcall	.+28     	; 0x76d2 <__divmodsi4_neg1>
    76b6:	57 fd       	sbrc	r21, 7
    76b8:	04 d0       	rcall	.+8      	; 0x76c2 <__divmodsi4_neg2>
    76ba:	d7 df       	rcall	.-82     	; 0x766a <__udivmodsi4>
    76bc:	0a d0       	rcall	.+20     	; 0x76d2 <__divmodsi4_neg1>
    76be:	00 1c       	adc	r0, r0
    76c0:	38 f4       	brcc	.+14     	; 0x76d0 <__divmodsi4_exit>

000076c2 <__divmodsi4_neg2>:
    76c2:	50 95       	com	r21
    76c4:	40 95       	com	r20
    76c6:	30 95       	com	r19
    76c8:	21 95       	neg	r18
    76ca:	3f 4f       	sbci	r19, 0xFF	; 255
    76cc:	4f 4f       	sbci	r20, 0xFF	; 255
    76ce:	5f 4f       	sbci	r21, 0xFF	; 255

000076d0 <__divmodsi4_exit>:
    76d0:	08 95       	ret

000076d2 <__divmodsi4_neg1>:
    76d2:	f6 f7       	brtc	.-4      	; 0x76d0 <__divmodsi4_exit>
    76d4:	90 95       	com	r25
    76d6:	80 95       	com	r24
    76d8:	70 95       	com	r23
    76da:	61 95       	neg	r22
    76dc:	7f 4f       	sbci	r23, 0xFF	; 255
    76de:	8f 4f       	sbci	r24, 0xFF	; 255
    76e0:	9f 4f       	sbci	r25, 0xFF	; 255
    76e2:	08 95       	ret

000076e4 <__prologue_saves__>:
    76e4:	2f 92       	push	r2
    76e6:	3f 92       	push	r3
    76e8:	4f 92       	push	r4
    76ea:	5f 92       	push	r5
    76ec:	6f 92       	push	r6
    76ee:	7f 92       	push	r7
    76f0:	8f 92       	push	r8
    76f2:	9f 92       	push	r9
    76f4:	af 92       	push	r10
    76f6:	bf 92       	push	r11
    76f8:	cf 92       	push	r12
    76fa:	df 92       	push	r13
    76fc:	ef 92       	push	r14
    76fe:	ff 92       	push	r15
    7700:	0f 93       	push	r16
    7702:	1f 93       	push	r17
    7704:	cf 93       	push	r28
    7706:	df 93       	push	r29
    7708:	cd b7       	in	r28, 0x3d	; 61
    770a:	de b7       	in	r29, 0x3e	; 62
    770c:	ca 1b       	sub	r28, r26
    770e:	db 0b       	sbc	r29, r27
    7710:	0f b6       	in	r0, 0x3f	; 63
    7712:	f8 94       	cli
    7714:	de bf       	out	0x3e, r29	; 62
    7716:	0f be       	out	0x3f, r0	; 63
    7718:	cd bf       	out	0x3d, r28	; 61
    771a:	09 94       	ijmp

0000771c <__epilogue_restores__>:
    771c:	2a 88       	ldd	r2, Y+18	; 0x12
    771e:	39 88       	ldd	r3, Y+17	; 0x11
    7720:	48 88       	ldd	r4, Y+16	; 0x10
    7722:	5f 84       	ldd	r5, Y+15	; 0x0f
    7724:	6e 84       	ldd	r6, Y+14	; 0x0e
    7726:	7d 84       	ldd	r7, Y+13	; 0x0d
    7728:	8c 84       	ldd	r8, Y+12	; 0x0c
    772a:	9b 84       	ldd	r9, Y+11	; 0x0b
    772c:	aa 84       	ldd	r10, Y+10	; 0x0a
    772e:	b9 84       	ldd	r11, Y+9	; 0x09
    7730:	c8 84       	ldd	r12, Y+8	; 0x08
    7732:	df 80       	ldd	r13, Y+7	; 0x07
    7734:	ee 80       	ldd	r14, Y+6	; 0x06
    7736:	fd 80       	ldd	r15, Y+5	; 0x05
    7738:	0c 81       	ldd	r16, Y+4	; 0x04
    773a:	1b 81       	ldd	r17, Y+3	; 0x03
    773c:	aa 81       	ldd	r26, Y+2	; 0x02
    773e:	b9 81       	ldd	r27, Y+1	; 0x01
    7740:	ce 0f       	add	r28, r30
    7742:	d1 1d       	adc	r29, r1
    7744:	0f b6       	in	r0, 0x3f	; 63
    7746:	f8 94       	cli
    7748:	de bf       	out	0x3e, r29	; 62
    774a:	0f be       	out	0x3f, r0	; 63
    774c:	cd bf       	out	0x3d, r28	; 61
    774e:	ed 01       	movw	r28, r26
    7750:	08 95       	ret

00007752 <_exit>:
    7752:	f8 94       	cli

00007754 <__stop_program>:
    7754:	ff cf       	rjmp	.-2      	; 0x7754 <__stop_program>
